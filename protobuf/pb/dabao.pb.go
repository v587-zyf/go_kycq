// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dabao.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 打宝神器升级
type DaBaoEquipUpReq struct {
	EquipType int32 `protobuf:"varint,1,opt,name=equipType,proto3" json:"equipType,omitempty"`
}

func (m *DaBaoEquipUpReq) Reset()                    { *m = DaBaoEquipUpReq{} }
func (m *DaBaoEquipUpReq) String() string            { return proto.CompactTextString(m) }
func (*DaBaoEquipUpReq) ProtoMessage()               {}
func (*DaBaoEquipUpReq) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{0} }

func (m *DaBaoEquipUpReq) GetEquipType() int32 {
	if m != nil {
		return m.EquipType
	}
	return 0
}

type DaBaoEquipUpAck struct {
	EquipType int32 `protobuf:"varint,1,opt,name=equipType,proto3" json:"equipType,omitempty"`
	Lv        int32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *DaBaoEquipUpAck) Reset()                    { *m = DaBaoEquipUpAck{} }
func (m *DaBaoEquipUpAck) String() string            { return proto.CompactTextString(m) }
func (*DaBaoEquipUpAck) ProtoMessage()               {}
func (*DaBaoEquipUpAck) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{1} }

func (m *DaBaoEquipUpAck) GetEquipType() int32 {
	if m != nil {
		return m.EquipType
	}
	return 0
}

func (m *DaBaoEquipUpAck) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

// 打宝秘境进入
type EnterDaBaoMysteryReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterDaBaoMysteryReq) Reset()                    { *m = EnterDaBaoMysteryReq{} }
func (m *EnterDaBaoMysteryReq) String() string            { return proto.CompactTextString(m) }
func (*EnterDaBaoMysteryReq) ProtoMessage()               {}
func (*EnterDaBaoMysteryReq) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{2} }

func (m *EnterDaBaoMysteryReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 打宝秘境结算
type DaBaoMysteryResultNtf struct {
	StageId int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Result  int32           `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
}

func (m *DaBaoMysteryResultNtf) Reset()                    { *m = DaBaoMysteryResultNtf{} }
func (m *DaBaoMysteryResultNtf) String() string            { return proto.CompactTextString(m) }
func (*DaBaoMysteryResultNtf) ProtoMessage()               {}
func (*DaBaoMysteryResultNtf) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{3} }

func (m *DaBaoMysteryResultNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *DaBaoMysteryResultNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *DaBaoMysteryResultNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 购买体力道具
type DaBaoMysteryEnergyItemBuyReq struct {
	ShopId int32 `protobuf:"varint,1,opt,name=shopId,proto3" json:"shopId,omitempty"`
}

func (m *DaBaoMysteryEnergyItemBuyReq) Reset()         { *m = DaBaoMysteryEnergyItemBuyReq{} }
func (m *DaBaoMysteryEnergyItemBuyReq) String() string { return proto.CompactTextString(m) }
func (*DaBaoMysteryEnergyItemBuyReq) ProtoMessage()    {}
func (*DaBaoMysteryEnergyItemBuyReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDabao, []int{4}
}

func (m *DaBaoMysteryEnergyItemBuyReq) GetShopId() int32 {
	if m != nil {
		return m.ShopId
	}
	return 0
}

// 增加体力
type DaBaoMysteryEnergyAddReq struct {
	ItemId int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *DaBaoMysteryEnergyAddReq) Reset()                    { *m = DaBaoMysteryEnergyAddReq{} }
func (m *DaBaoMysteryEnergyAddReq) String() string            { return proto.CompactTextString(m) }
func (*DaBaoMysteryEnergyAddReq) ProtoMessage()               {}
func (*DaBaoMysteryEnergyAddReq) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{5} }

func (m *DaBaoMysteryEnergyAddReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type DaBaoMysteryEnergyAddAck struct {
	ItemId int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *DaBaoMysteryEnergyAddAck) Reset()                    { *m = DaBaoMysteryEnergyAddAck{} }
func (m *DaBaoMysteryEnergyAddAck) String() string            { return proto.CompactTextString(m) }
func (*DaBaoMysteryEnergyAddAck) ProtoMessage()               {}
func (*DaBaoMysteryEnergyAddAck) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{6} }

func (m *DaBaoMysteryEnergyAddAck) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

// 体力值推送
type DaBaoMysteryEnergyNtf struct {
	Energy int32 `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
}

func (m *DaBaoMysteryEnergyNtf) Reset()                    { *m = DaBaoMysteryEnergyNtf{} }
func (m *DaBaoMysteryEnergyNtf) String() string            { return proto.CompactTextString(m) }
func (*DaBaoMysteryEnergyNtf) ProtoMessage()               {}
func (*DaBaoMysteryEnergyNtf) Descriptor() ([]byte, []int) { return fileDescriptorDabao, []int{7} }

func (m *DaBaoMysteryEnergyNtf) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func init() {
	proto.RegisterType((*DaBaoEquipUpReq)(nil), "pb.DaBaoEquipUpReq")
	proto.RegisterType((*DaBaoEquipUpAck)(nil), "pb.DaBaoEquipUpAck")
	proto.RegisterType((*EnterDaBaoMysteryReq)(nil), "pb.EnterDaBaoMysteryReq")
	proto.RegisterType((*DaBaoMysteryResultNtf)(nil), "pb.DaBaoMysteryResultNtf")
	proto.RegisterType((*DaBaoMysteryEnergyItemBuyReq)(nil), "pb.DaBaoMysteryEnergyItemBuyReq")
	proto.RegisterType((*DaBaoMysteryEnergyAddReq)(nil), "pb.DaBaoMysteryEnergyAddReq")
	proto.RegisterType((*DaBaoMysteryEnergyAddAck)(nil), "pb.DaBaoMysteryEnergyAddAck")
	proto.RegisterType((*DaBaoMysteryEnergyNtf)(nil), "pb.DaBaoMysteryEnergyNtf")
}
func (m *DaBaoEquipUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoEquipUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EquipType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.EquipType))
	}
	return i, nil
}

func (m *DaBaoEquipUpAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoEquipUpAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EquipType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.EquipType))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func (m *EnterDaBaoMysteryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDaBaoMysteryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *DaBaoMysteryResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoMysteryResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.StageId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.Result))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *DaBaoMysteryEnergyItemBuyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoMysteryEnergyItemBuyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.ShopId))
	}
	return i, nil
}

func (m *DaBaoMysteryEnergyAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoMysteryEnergyAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *DaBaoMysteryEnergyAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoMysteryEnergyAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *DaBaoMysteryEnergyNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaBaoMysteryEnergyNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Energy != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDabao(dAtA, i, uint64(m.Energy))
	}
	return i, nil
}

func encodeVarintDabao(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DaBaoEquipUpReq) Size() (n int) {
	var l int
	_ = l
	if m.EquipType != 0 {
		n += 1 + sovDabao(uint64(m.EquipType))
	}
	return n
}

func (m *DaBaoEquipUpAck) Size() (n int) {
	var l int
	_ = l
	if m.EquipType != 0 {
		n += 1 + sovDabao(uint64(m.EquipType))
	}
	if m.Lv != 0 {
		n += 1 + sovDabao(uint64(m.Lv))
	}
	return n
}

func (m *EnterDaBaoMysteryReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovDabao(uint64(m.StageId))
	}
	return n
}

func (m *DaBaoMysteryResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovDabao(uint64(m.StageId))
	}
	if m.Result != 0 {
		n += 1 + sovDabao(uint64(m.Result))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovDabao(uint64(l))
	}
	return n
}

func (m *DaBaoMysteryEnergyItemBuyReq) Size() (n int) {
	var l int
	_ = l
	if m.ShopId != 0 {
		n += 1 + sovDabao(uint64(m.ShopId))
	}
	return n
}

func (m *DaBaoMysteryEnergyAddReq) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovDabao(uint64(m.ItemId))
	}
	return n
}

func (m *DaBaoMysteryEnergyAddAck) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovDabao(uint64(m.ItemId))
	}
	return n
}

func (m *DaBaoMysteryEnergyNtf) Size() (n int) {
	var l int
	_ = l
	if m.Energy != 0 {
		n += 1 + sovDabao(uint64(m.Energy))
	}
	return n
}

func sovDabao(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDabao(x uint64) (n int) {
	return sovDabao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DaBaoEquipUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoEquipUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoEquipUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipType", wireType)
			}
			m.EquipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaBaoEquipUpAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoEquipUpAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoEquipUpAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipType", wireType)
			}
			m.EquipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterDaBaoMysteryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDaBaoMysteryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDaBaoMysteryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaBaoMysteryResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoMysteryResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoMysteryResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDabao
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaBaoMysteryEnergyItemBuyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyItemBuyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyItemBuyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopId", wireType)
			}
			m.ShopId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaBaoMysteryEnergyAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaBaoMysteryEnergyAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaBaoMysteryEnergyNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaBaoMysteryEnergyNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDabao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDabao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDabao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDabao
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDabao
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDabao(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDabao = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDabao   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dabao.proto", fileDescriptorDabao) }

var fileDescriptorDabao = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x4d, 0x65, 0x15, 0xcf, 0x44, 0x25, 0xe8, 0x28, 0x32, 0xca, 0xc8, 0xd5, 0xae, 0x36,
	0x99, 0xe0, 0xad, 0xac, 0x5a, 0x64, 0x17, 0xee, 0xa2, 0xe8, 0x03, 0xa4, 0x6b, 0xd6, 0x0d, 0xdb,
	0x26, 0x6b, 0xd2, 0x41, 0xdf, 0xc4, 0x47, 0xf2, 0xd2, 0x47, 0x90, 0xfa, 0x22, 0xd2, 0xb4, 0x73,
	0x16, 0xa9, 0x97, 0xdf, 0xcf, 0xf9, 0xce, 0x1f, 0x0e, 0x81, 0x6e, 0x40, 0x7d, 0xca, 0x47, 0x22,
	0xe5, 0x8a, 0x63, 0x43, 0xf8, 0x57, 0x27, 0x0b, 0x1e, 0xc7, 0x3c, 0xa9, 0x12, 0x32, 0x86, 0xb3,
	0x07, 0xea, 0x50, 0xee, 0x6e, 0xb2, 0xb5, 0x78, 0x11, 0x1e, 0xdb, 0xe0, 0x3e, 0x1c, 0xb3, 0x92,
	0x9e, 0x73, 0xc1, 0x2c, 0x34, 0x40, 0xc3, 0x8e, 0xb7, 0x0f, 0xc8, 0x5d, 0x53, 0x98, 0x2e, 0x5e,
	0xff, 0x17, 0xf0, 0x29, 0x18, 0xd1, 0xd6, 0x32, 0x74, 0x6c, 0x44, 0x5b, 0x72, 0x0d, 0x17, 0x6e,
	0xa2, 0x58, 0xaa, 0xb7, 0x3c, 0xe5, 0x52, 0xb1, 0x34, 0x2f, 0x6b, 0x2d, 0x38, 0x92, 0x8a, 0x86,
	0x6c, 0x16, 0xd4, 0x3b, 0x76, 0x48, 0x24, 0x5c, 0x36, 0x87, 0x65, 0x16, 0xa9, 0xb9, 0x5a, 0xb6,
	0x2b, 0xb8, 0x07, 0x66, 0xaa, 0xc7, 0xea, 0xe2, 0x9a, 0xf0, 0x10, 0x3a, 0x21, 0xe7, 0x81, 0xb4,
	0x0e, 0x07, 0x68, 0xd8, 0x9d, 0xe0, 0x91, 0xf0, 0x47, 0x8f, 0x65, 0x70, 0xbf, 0xa2, 0x49, 0xc8,
	0xe6, 0x6a, 0xe9, 0x55, 0x03, 0xe4, 0x16, 0xfa, 0xbf, 0x4b, 0xdd, 0x84, 0xa5, 0x61, 0x3e, 0x53,
	0x2c, 0x76, 0x32, 0xfd, 0xdc, 0x1e, 0x98, 0x72, 0xc5, 0xc5, 0x4f, 0x75, 0x4d, 0x64, 0x02, 0xd6,
	0x5f, 0x6f, 0x1a, 0x04, 0xb5, 0xb3, 0x56, 0x2c, 0xde, 0x3b, 0x15, 0xb5, 0x3a, 0xe5, 0x71, 0xdb,
	0x9c, 0x71, 0xf3, 0x28, 0x95, 0x53, 0x1e, 0xa5, 0x07, 0x26, 0xd3, 0xb0, 0x13, 0x2a, 0x72, 0xce,
	0xdf, 0x0b, 0x1b, 0x7d, 0x14, 0x36, 0xfa, 0x2c, 0x6c, 0xf4, 0xf6, 0x65, 0x1f, 0xf8, 0xa6, 0xfe,
	0x02, 0x37, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0xdb, 0xda, 0x7c, 0x23, 0x02, 0x00, 0x00,
}
