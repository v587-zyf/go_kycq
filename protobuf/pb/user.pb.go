// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnterGameReq struct {
	OpenId   string `protobuf:"bytes,1,opt,name=openId,proto3" json:"openId,omitempty"`
	LoginKey string `protobuf:"bytes,2,opt,name=loginKey,proto3" json:"loginKey,omitempty"`
	Channel  int32  `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`
	ServerId int32  `protobuf:"varint,4,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Origin   string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
	Ip       string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	DeviceId string `protobuf:"bytes,7,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
}

func (m *EnterGameReq) Reset()                    { *m = EnterGameReq{} }
func (m *EnterGameReq) String() string            { return proto.CompactTextString(m) }
func (*EnterGameReq) ProtoMessage()               {}
func (*EnterGameReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *EnterGameReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *EnterGameReq) GetLoginKey() string {
	if m != nil {
		return m.LoginKey
	}
	return ""
}

func (m *EnterGameReq) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *EnterGameReq) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *EnterGameReq) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func (m *EnterGameReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *EnterGameReq) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type EnterGameAck struct {
	User                 *UserLoginInfo             `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Ts                   int32                      `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Version              string                     `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	OpenServerDay        int32                      `protobuf:"varint,4,opt,name=openServerDay,proto3" json:"openServerDay,omitempty"`
	OpenServerTime       int32                      `protobuf:"varint,5,opt,name=openServerTime,proto3" json:"openServerTime,omitempty"`
	RealServerId         int32                      `protobuf:"varint,6,opt,name=realServerId,proto3" json:"realServerId,omitempty"`
	RealServerName       string                     `protobuf:"bytes,7,opt,name=realServerName,proto3" json:"realServerName,omitempty"`
	CloseFuncIds         []int32                    `protobuf:"varint,8,rep,packed,name=closeFuncIds" json:"closeFuncIds,omitempty"`
	MergeOpenServerDay   int32                      `protobuf:"varint,9,opt,name=mergeOpenServerDay,proto3" json:"mergeOpenServerDay,omitempty"`
	MergeOpenServerTime  int32                      `protobuf:"varint,10,opt,name=mergeOpenServerTime,proto3" json:"mergeOpenServerTime,omitempty"`
	CrossBriefServerInfo map[int32]*BriefServerInfo `protobuf:"bytes,11,rep,name=crossBriefServerInfo" json:"crossBriefServerInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EnterGameAck) Reset()                    { *m = EnterGameAck{} }
func (m *EnterGameAck) String() string            { return proto.CompactTextString(m) }
func (*EnterGameAck) ProtoMessage()               {}
func (*EnterGameAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{1} }

func (m *EnterGameAck) GetUser() *UserLoginInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *EnterGameAck) GetTs() int32 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *EnterGameAck) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *EnterGameAck) GetOpenServerDay() int32 {
	if m != nil {
		return m.OpenServerDay
	}
	return 0
}

func (m *EnterGameAck) GetOpenServerTime() int32 {
	if m != nil {
		return m.OpenServerTime
	}
	return 0
}

func (m *EnterGameAck) GetRealServerId() int32 {
	if m != nil {
		return m.RealServerId
	}
	return 0
}

func (m *EnterGameAck) GetRealServerName() string {
	if m != nil {
		return m.RealServerName
	}
	return ""
}

func (m *EnterGameAck) GetCloseFuncIds() []int32 {
	if m != nil {
		return m.CloseFuncIds
	}
	return nil
}

func (m *EnterGameAck) GetMergeOpenServerDay() int32 {
	if m != nil {
		return m.MergeOpenServerDay
	}
	return 0
}

func (m *EnterGameAck) GetMergeOpenServerTime() int32 {
	if m != nil {
		return m.MergeOpenServerTime
	}
	return 0
}

func (m *EnterGameAck) GetCrossBriefServerInfo() map[int32]*BriefServerInfo {
	if m != nil {
		return m.CrossBriefServerInfo
	}
	return nil
}

type CreateUserReq struct {
	Sex      int32  `protobuf:"varint,1,opt,name=sex,proto3" json:"sex,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar   string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Job      int32  `protobuf:"varint,4,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *CreateUserReq) Reset()                    { *m = CreateUserReq{} }
func (m *CreateUserReq) String() string            { return proto.CompactTextString(m) }
func (*CreateUserReq) ProtoMessage()               {}
func (*CreateUserReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{2} }

func (m *CreateUserReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *CreateUserReq) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *CreateUserReq) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *CreateUserReq) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

type CreateUserAck struct {
	User       *UserLoginInfo `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	FailReason string         `protobuf:"bytes,2,opt,name=failReason,proto3" json:"failReason,omitempty"`
}

func (m *CreateUserAck) Reset()                    { *m = CreateUserAck{} }
func (m *CreateUserAck) String() string            { return proto.CompactTextString(m) }
func (*CreateUserAck) ProtoMessage()               {}
func (*CreateUserAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{3} }

func (m *CreateUserAck) GetUser() *UserLoginInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserAck) GetFailReason() string {
	if m != nil {
		return m.FailReason
	}
	return ""
}

type RandNameReq struct {
	Sex int32 `protobuf:"varint,1,opt,name=sex,proto3" json:"sex,omitempty"`
}

func (m *RandNameReq) Reset()                    { *m = RandNameReq{} }
func (m *RandNameReq) String() string            { return proto.CompactTextString(m) }
func (*RandNameReq) ProtoMessage()               {}
func (*RandNameReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{4} }

func (m *RandNameReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type RandNameAck struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *RandNameAck) Reset()                    { *m = RandNameAck{} }
func (m *RandNameAck) String() string            { return proto.CompactTextString(m) }
func (*RandNameAck) ProtoMessage()               {}
func (*RandNameAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{5} }

func (m *RandNameAck) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type CreateHeroReq struct {
	Sex int32 `protobuf:"varint,1,opt,name=sex,proto3" json:"sex,omitempty"`
	Job int32 `protobuf:"varint,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *CreateHeroReq) Reset()                    { *m = CreateHeroReq{} }
func (m *CreateHeroReq) String() string            { return proto.CompactTextString(m) }
func (*CreateHeroReq) ProtoMessage()               {}
func (*CreateHeroReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{6} }

func (m *CreateHeroReq) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *CreateHeroReq) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

type CreateHeroAck struct {
	Hero *HeroInfo `protobuf:"bytes,1,opt,name=hero" json:"hero,omitempty"`
}

func (m *CreateHeroAck) Reset()                    { *m = CreateHeroAck{} }
func (m *CreateHeroAck) String() string            { return proto.CompactTextString(m) }
func (*CreateHeroAck) ProtoMessage()               {}
func (*CreateHeroAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{7} }

func (m *CreateHeroAck) GetHero() *HeroInfo {
	if m != nil {
		return m.Hero
	}
	return nil
}

type KickUserNtf struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *KickUserNtf) Reset()                    { *m = KickUserNtf{} }
func (m *KickUserNtf) String() string            { return proto.CompactTextString(m) }
func (*KickUserNtf) ProtoMessage()               {}
func (*KickUserNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{8} }

func (m *KickUserNtf) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// 玩家武将属性
type UserPropertyNtf struct {
	HeroProps  map[int32]*HeroProp `protobuf:"bytes,1,rep,name=heroProps" json:"heroProps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	UserCombat int64               `protobuf:"varint,2,opt,name=userCombat,proto3" json:"userCombat,omitempty"`
}

func (m *UserPropertyNtf) Reset()                    { *m = UserPropertyNtf{} }
func (m *UserPropertyNtf) String() string            { return proto.CompactTextString(m) }
func (*UserPropertyNtf) ProtoMessage()               {}
func (*UserPropertyNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{9} }

func (m *UserPropertyNtf) GetHeroProps() map[int32]*HeroProp {
	if m != nil {
		return m.HeroProps
	}
	return nil
}

func (m *UserPropertyNtf) GetUserCombat() int64 {
	if m != nil {
		return m.UserCombat
	}
	return 0
}

type DebugAddGoodsReq struct {
	Id    []int32  `protobuf:"varint,1,rep,packed,name=id" json:"id,omitempty"`
	Count []int32  `protobuf:"varint,2,rep,packed,name=count" json:"count,omitempty"`
	Args  []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
}

func (m *DebugAddGoodsReq) Reset()                    { *m = DebugAddGoodsReq{} }
func (m *DebugAddGoodsReq) String() string            { return proto.CompactTextString(m) }
func (*DebugAddGoodsReq) ProtoMessage()               {}
func (*DebugAddGoodsReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{10} }

func (m *DebugAddGoodsReq) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DebugAddGoodsReq) GetCount() []int32 {
	if m != nil {
		return m.Count
	}
	return nil
}

func (m *DebugAddGoodsReq) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type DebugAddGoodsAck struct {
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *DebugAddGoodsAck) Reset()                    { *m = DebugAddGoodsAck{} }
func (m *DebugAddGoodsAck) String() string            { return proto.CompactTextString(m) }
func (*DebugAddGoodsAck) ProtoMessage()               {}
func (*DebugAddGoodsAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{11} }

func (m *DebugAddGoodsAck) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

type ChangeFightModelReq struct {
	FightModel int32 `protobuf:"varint,1,opt,name=fightModel,proto3" json:"fightModel,omitempty"`
}

func (m *ChangeFightModelReq) Reset()                    { *m = ChangeFightModelReq{} }
func (m *ChangeFightModelReq) String() string            { return proto.CompactTextString(m) }
func (*ChangeFightModelReq) ProtoMessage()               {}
func (*ChangeFightModelReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{12} }

func (m *ChangeFightModelReq) GetFightModel() int32 {
	if m != nil {
		return m.FightModel
	}
	return 0
}

type ChangeFightModelAck struct {
	FightModel int32 `protobuf:"varint,1,opt,name=fightModel,proto3" json:"fightModel,omitempty"`
}

func (m *ChangeFightModelAck) Reset()                    { *m = ChangeFightModelAck{} }
func (m *ChangeFightModelAck) String() string            { return proto.CompactTextString(m) }
func (*ChangeFightModelAck) ProtoMessage()               {}
func (*ChangeFightModelAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{13} }

func (m *ChangeFightModelAck) GetFightModel() int32 {
	if m != nil {
		return m.FightModel
	}
	return 0
}

type ChangeHeroNameReq struct {
	HeroIndex int32  `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ChangeHeroNameReq) Reset()                    { *m = ChangeHeroNameReq{} }
func (m *ChangeHeroNameReq) String() string            { return proto.CompactTextString(m) }
func (*ChangeHeroNameReq) ProtoMessage()               {}
func (*ChangeHeroNameReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{14} }

func (m *ChangeHeroNameReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChangeHeroNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ChangeHeroNameAck struct {
	HeroInfo *HeroInfo `protobuf:"bytes,1,opt,name=heroInfo" json:"heroInfo,omitempty"`
}

func (m *ChangeHeroNameAck) Reset()                    { *m = ChangeHeroNameAck{} }
func (m *ChangeHeroNameAck) String() string            { return proto.CompactTextString(m) }
func (*ChangeHeroNameAck) ProtoMessage()               {}
func (*ChangeHeroNameAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{15} }

func (m *ChangeHeroNameAck) GetHeroInfo() *HeroInfo {
	if m != nil {
		return m.HeroInfo
	}
	return nil
}

type UserRechargeNumNtf struct {
	RechargeNum   int32 `protobuf:"varint,1,opt,name=rechargeNum,proto3" json:"rechargeNum,omitempty"`
	RedPacketNum  int32 `protobuf:"varint,2,opt,name=redPacketNum,proto3" json:"redPacketNum,omitempty"`
	DailyRecharge int32 `protobuf:"varint,3,opt,name=dailyRecharge,proto3" json:"dailyRecharge,omitempty"`
}

func (m *UserRechargeNumNtf) Reset()                    { *m = UserRechargeNumNtf{} }
func (m *UserRechargeNumNtf) String() string            { return proto.CompactTextString(m) }
func (*UserRechargeNumNtf) ProtoMessage()               {}
func (*UserRechargeNumNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{16} }

func (m *UserRechargeNumNtf) GetRechargeNum() int32 {
	if m != nil {
		return m.RechargeNum
	}
	return 0
}

func (m *UserRechargeNumNtf) GetRedPacketNum() int32 {
	if m != nil {
		return m.RedPacketNum
	}
	return 0
}

func (m *UserRechargeNumNtf) GetDailyRecharge() int32 {
	if m != nil {
		return m.DailyRecharge
	}
	return 0
}

type UserRedPacketGetNumNtf struct {
	RedPacketGetNum int32 `protobuf:"varint,1,opt,name=redPacketGetNum,proto3" json:"redPacketGetNum,omitempty"`
}

func (m *UserRedPacketGetNumNtf) Reset()                    { *m = UserRedPacketGetNumNtf{} }
func (m *UserRedPacketGetNumNtf) String() string            { return proto.CompactTextString(m) }
func (*UserRedPacketGetNumNtf) ProtoMessage()               {}
func (*UserRedPacketGetNumNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{17} }

func (m *UserRedPacketGetNumNtf) GetRedPacketGetNum() int32 {
	if m != nil {
		return m.RedPacketGetNum
	}
	return 0
}

type UserOnlineNtf struct {
	UserId     int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OnlineTime int64 `protobuf:"varint,2,opt,name=onlineTime,proto3" json:"onlineTime,omitempty"`
}

func (m *UserOnlineNtf) Reset()                    { *m = UserOnlineNtf{} }
func (m *UserOnlineNtf) String() string            { return proto.CompactTextString(m) }
func (*UserOnlineNtf) ProtoMessage()               {}
func (*UserOnlineNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{18} }

func (m *UserOnlineNtf) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserOnlineNtf) GetOnlineTime() int64 {
	if m != nil {
		return m.OnlineTime
	}
	return 0
}

type UserOffLineNtf struct {
	UserId      int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OffLintTime int64 `protobuf:"varint,2,opt,name=offLintTime,proto3" json:"offLintTime,omitempty"`
}

func (m *UserOffLineNtf) Reset()                    { *m = UserOffLineNtf{} }
func (m *UserOffLineNtf) String() string            { return proto.CompactTextString(m) }
func (*UserOffLineNtf) ProtoMessage()               {}
func (*UserOffLineNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{19} }

func (m *UserOffLineNtf) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UserOffLineNtf) GetOffLintTime() int64 {
	if m != nil {
		return m.OffLintTime
	}
	return 0
}

type VipCustomerReq struct {
}

func (m *VipCustomerReq) Reset()                    { *m = VipCustomerReq{} }
func (m *VipCustomerReq) String() string            { return proto.CompactTextString(m) }
func (*VipCustomerReq) ProtoMessage()               {}
func (*VipCustomerReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{20} }

type VipCustomerAck struct {
	Flag bool `protobuf:"varint,1,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *VipCustomerAck) Reset()                    { *m = VipCustomerAck{} }
func (m *VipCustomerAck) String() string            { return proto.CompactTextString(m) }
func (*VipCustomerAck) ProtoMessage()               {}
func (*VipCustomerAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{21} }

func (m *VipCustomerAck) GetFlag() bool {
	if m != nil {
		return m.Flag
	}
	return false
}

type UserInGameOkReq struct {
}

func (m *UserInGameOkReq) Reset()                    { *m = UserInGameOkReq{} }
func (m *UserInGameOkReq) String() string            { return proto.CompactTextString(m) }
func (*UserInGameOkReq) ProtoMessage()               {}
func (*UserInGameOkReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{22} }

type CrossFightOpenNtf struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *CrossFightOpenNtf) Reset()                    { *m = CrossFightOpenNtf{} }
func (m *CrossFightOpenNtf) String() string            { return proto.CompactTextString(m) }
func (*CrossFightOpenNtf) ProtoMessage()               {}
func (*CrossFightOpenNtf) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{23} }

func (m *CrossFightOpenNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type UserSubscribeReq struct {
	SubscribeId int32 `protobuf:"varint,1,opt,name=subscribeId,proto3" json:"subscribeId,omitempty"`
}

func (m *UserSubscribeReq) Reset()                    { *m = UserSubscribeReq{} }
func (m *UserSubscribeReq) String() string            { return proto.CompactTextString(m) }
func (*UserSubscribeReq) ProtoMessage()               {}
func (*UserSubscribeReq) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{24} }

func (m *UserSubscribeReq) GetSubscribeId() int32 {
	if m != nil {
		return m.SubscribeId
	}
	return 0
}

type UserSubscribeAck struct {
	SubscribeId int32 `protobuf:"varint,1,opt,name=subscribeId,proto3" json:"subscribeId,omitempty"`
}

func (m *UserSubscribeAck) Reset()                    { *m = UserSubscribeAck{} }
func (m *UserSubscribeAck) String() string            { return proto.CompactTextString(m) }
func (*UserSubscribeAck) ProtoMessage()               {}
func (*UserSubscribeAck) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{25} }

func (m *UserSubscribeAck) GetSubscribeId() int32 {
	if m != nil {
		return m.SubscribeId
	}
	return 0
}

func init() {
	proto.RegisterType((*EnterGameReq)(nil), "pb.EnterGameReq")
	proto.RegisterType((*EnterGameAck)(nil), "pb.EnterGameAck")
	proto.RegisterType((*CreateUserReq)(nil), "pb.CreateUserReq")
	proto.RegisterType((*CreateUserAck)(nil), "pb.CreateUserAck")
	proto.RegisterType((*RandNameReq)(nil), "pb.RandNameReq")
	proto.RegisterType((*RandNameAck)(nil), "pb.RandNameAck")
	proto.RegisterType((*CreateHeroReq)(nil), "pb.CreateHeroReq")
	proto.RegisterType((*CreateHeroAck)(nil), "pb.CreateHeroAck")
	proto.RegisterType((*KickUserNtf)(nil), "pb.KickUserNtf")
	proto.RegisterType((*UserPropertyNtf)(nil), "pb.UserPropertyNtf")
	proto.RegisterType((*DebugAddGoodsReq)(nil), "pb.DebugAddGoodsReq")
	proto.RegisterType((*DebugAddGoodsAck)(nil), "pb.DebugAddGoodsAck")
	proto.RegisterType((*ChangeFightModelReq)(nil), "pb.ChangeFightModelReq")
	proto.RegisterType((*ChangeFightModelAck)(nil), "pb.ChangeFightModelAck")
	proto.RegisterType((*ChangeHeroNameReq)(nil), "pb.ChangeHeroNameReq")
	proto.RegisterType((*ChangeHeroNameAck)(nil), "pb.ChangeHeroNameAck")
	proto.RegisterType((*UserRechargeNumNtf)(nil), "pb.UserRechargeNumNtf")
	proto.RegisterType((*UserRedPacketGetNumNtf)(nil), "pb.UserRedPacketGetNumNtf")
	proto.RegisterType((*UserOnlineNtf)(nil), "pb.UserOnlineNtf")
	proto.RegisterType((*UserOffLineNtf)(nil), "pb.UserOffLineNtf")
	proto.RegisterType((*VipCustomerReq)(nil), "pb.VipCustomerReq")
	proto.RegisterType((*VipCustomerAck)(nil), "pb.VipCustomerAck")
	proto.RegisterType((*UserInGameOkReq)(nil), "pb.UserInGameOkReq")
	proto.RegisterType((*CrossFightOpenNtf)(nil), "pb.CrossFightOpenNtf")
	proto.RegisterType((*UserSubscribeReq)(nil), "pb.UserSubscribeReq")
	proto.RegisterType((*UserSubscribeAck)(nil), "pb.UserSubscribeAck")
}
func (m *EnterGameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OpenId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if len(m.LoginKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.LoginKey)))
		i += copy(dAtA[i:], m.LoginKey)
	}
	if m.Channel != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Channel))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.ServerId))
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	return i, nil
}

func (m *EnterGameAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGameAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Ts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Ts))
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.OpenServerDay != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.OpenServerDay))
	}
	if m.OpenServerTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.OpenServerTime))
	}
	if m.RealServerId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.RealServerId))
	}
	if len(m.RealServerName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.RealServerName)))
		i += copy(dAtA[i:], m.RealServerName)
	}
	if len(m.CloseFuncIds) > 0 {
		dAtA3 := make([]byte, len(m.CloseFuncIds)*10)
		var j2 int
		for _, num1 := range m.CloseFuncIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintUser(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.MergeOpenServerDay != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.MergeOpenServerDay))
	}
	if m.MergeOpenServerTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.MergeOpenServerTime))
	}
	if len(m.CrossBriefServerInfo) > 0 {
		for k, _ := range m.CrossBriefServerInfo {
			dAtA[i] = 0x5a
			i++
			v := m.CrossBriefServerInfo[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovUser(uint64(msgSize))
			}
			mapSize := 1 + sovUser(uint64(k)) + msgSize
			i = encodeVarintUser(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintUser(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintUser(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *CreateUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.Job != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Job))
	}
	return i, nil
}

func (m *CreateUserAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.User.Size()))
		n5, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.FailReason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.FailReason)))
		i += copy(dAtA[i:], m.FailReason)
	}
	return i, nil
}

func (m *RandNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	}
	return i, nil
}

func (m *RandNameAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RandNameAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *CreateHeroReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHeroReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Sex))
	}
	if m.Job != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Job))
	}
	return i, nil
}

func (m *CreateHeroAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateHeroAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hero != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Hero.Size()))
		n6, err := m.Hero.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *KickUserNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickUserNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UserPropertyNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPropertyNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeroProps) > 0 {
		for k, _ := range m.HeroProps {
			dAtA[i] = 0xa
			i++
			v := m.HeroProps[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovUser(uint64(msgSize))
			}
			mapSize := 1 + sovUser(uint64(k)) + msgSize
			i = encodeVarintUser(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintUser(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintUser(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if m.UserCombat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserCombat))
	}
	return i, nil
}

func (m *DebugAddGoodsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugAddGoodsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA9 := make([]byte, len(m.Id)*10)
		var j8 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if len(m.Count) > 0 {
		dAtA11 := make([]byte, len(m.Count)*10)
		var j10 int
		for _, num1 := range m.Count {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *DebugAddGoodsAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugAddGoodsAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *ChangeFightModelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFightModelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FightModel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.FightModel))
	}
	return i, nil
}

func (m *ChangeFightModelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeFightModelAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FightModel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.FightModel))
	}
	return i, nil
}

func (m *ChangeHeroNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeHeroNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.HeroIndex))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *ChangeHeroNameAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeHeroNameAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.HeroInfo.Size()))
		n12, err := m.HeroInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}

func (m *UserRechargeNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRechargeNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RechargeNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.RechargeNum))
	}
	if m.RedPacketNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.RedPacketNum))
	}
	if m.DailyRecharge != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.DailyRecharge))
	}
	return i, nil
}

func (m *UserRedPacketGetNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRedPacketGetNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RedPacketGetNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.RedPacketGetNum))
	}
	return i, nil
}

func (m *UserOnlineNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOnlineNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
	}
	if m.OnlineTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.OnlineTime))
	}
	return i, nil
}

func (m *UserOffLineNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserOffLineNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.UserId))
	}
	if m.OffLintTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.OffLintTime))
	}
	return i, nil
}

func (m *VipCustomerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipCustomerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *VipCustomerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipCustomerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Flag {
		dAtA[i] = 0x8
		i++
		if m.Flag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UserInGameOkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInGameOkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CrossFightOpenNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossFightOpenNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *UserSubscribeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSubscribeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubscribeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.SubscribeId))
	}
	return i, nil
}

func (m *UserSubscribeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSubscribeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubscribeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.SubscribeId))
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EnterGameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.LoginKey)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Channel != 0 {
		n += 1 + sovUser(uint64(m.Channel))
	}
	if m.ServerId != 0 {
		n += 1 + sovUser(uint64(m.ServerId))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *EnterGameAck) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovUser(uint64(m.Ts))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.OpenServerDay != 0 {
		n += 1 + sovUser(uint64(m.OpenServerDay))
	}
	if m.OpenServerTime != 0 {
		n += 1 + sovUser(uint64(m.OpenServerTime))
	}
	if m.RealServerId != 0 {
		n += 1 + sovUser(uint64(m.RealServerId))
	}
	l = len(m.RealServerName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.CloseFuncIds) > 0 {
		l = 0
		for _, e := range m.CloseFuncIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.MergeOpenServerDay != 0 {
		n += 1 + sovUser(uint64(m.MergeOpenServerDay))
	}
	if m.MergeOpenServerTime != 0 {
		n += 1 + sovUser(uint64(m.MergeOpenServerTime))
	}
	if len(m.CrossBriefServerInfo) > 0 {
		for k, v := range m.CrossBriefServerInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUser(uint64(l))
			}
			mapEntrySize := 1 + sovUser(uint64(k)) + l
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *CreateUserReq) Size() (n int) {
	var l int
	_ = l
	if m.Sex != 0 {
		n += 1 + sovUser(uint64(m.Sex))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Job != 0 {
		n += 1 + sovUser(uint64(m.Job))
	}
	return n
}

func (m *CreateUserAck) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.FailReason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *RandNameReq) Size() (n int) {
	var l int
	_ = l
	if m.Sex != 0 {
		n += 1 + sovUser(uint64(m.Sex))
	}
	return n
}

func (m *RandNameAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *CreateHeroReq) Size() (n int) {
	var l int
	_ = l
	if m.Sex != 0 {
		n += 1 + sovUser(uint64(m.Sex))
	}
	if m.Job != 0 {
		n += 1 + sovUser(uint64(m.Job))
	}
	return n
}

func (m *CreateHeroAck) Size() (n int) {
	var l int
	_ = l
	if m.Hero != nil {
		l = m.Hero.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *KickUserNtf) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserPropertyNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.HeroProps) > 0 {
		for k, v := range m.HeroProps {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovUser(uint64(l))
			}
			mapEntrySize := 1 + sovUser(uint64(k)) + l
			n += mapEntrySize + 1 + sovUser(uint64(mapEntrySize))
		}
	}
	if m.UserCombat != 0 {
		n += 1 + sovUser(uint64(m.UserCombat))
	}
	return n
}

func (m *DebugAddGoodsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.Count) > 0 {
		l = 0
		for _, e := range m.Count {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *DebugAddGoodsAck) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovUser(uint64(m.Result))
	}
	return n
}

func (m *ChangeFightModelReq) Size() (n int) {
	var l int
	_ = l
	if m.FightModel != 0 {
		n += 1 + sovUser(uint64(m.FightModel))
	}
	return n
}

func (m *ChangeFightModelAck) Size() (n int) {
	var l int
	_ = l
	if m.FightModel != 0 {
		n += 1 + sovUser(uint64(m.FightModel))
	}
	return n
}

func (m *ChangeHeroNameReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovUser(uint64(m.HeroIndex))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *ChangeHeroNameAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroInfo != nil {
		l = m.HeroInfo.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserRechargeNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.RechargeNum != 0 {
		n += 1 + sovUser(uint64(m.RechargeNum))
	}
	if m.RedPacketNum != 0 {
		n += 1 + sovUser(uint64(m.RedPacketNum))
	}
	if m.DailyRecharge != 0 {
		n += 1 + sovUser(uint64(m.DailyRecharge))
	}
	return n
}

func (m *UserRedPacketGetNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.RedPacketGetNum != 0 {
		n += 1 + sovUser(uint64(m.RedPacketGetNum))
	}
	return n
}

func (m *UserOnlineNtf) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.OnlineTime != 0 {
		n += 1 + sovUser(uint64(m.OnlineTime))
	}
	return n
}

func (m *UserOffLineNtf) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovUser(uint64(m.UserId))
	}
	if m.OffLintTime != 0 {
		n += 1 + sovUser(uint64(m.OffLintTime))
	}
	return n
}

func (m *VipCustomerReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *VipCustomerAck) Size() (n int) {
	var l int
	_ = l
	if m.Flag {
		n += 2
	}
	return n
}

func (m *UserInGameOkReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CrossFightOpenNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovUser(uint64(m.StageId))
	}
	return n
}

func (m *UserSubscribeReq) Size() (n int) {
	var l int
	_ = l
	if m.SubscribeId != 0 {
		n += 1 + sovUser(uint64(m.SubscribeId))
	}
	return n
}

func (m *UserSubscribeAck) Size() (n int) {
	var l int
	_ = l
	if m.SubscribeId != 0 {
		n += 1 + sovUser(uint64(m.SubscribeId))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnterGameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoginKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterGameAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGameAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGameAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserLoginInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenServerDay", wireType)
			}
			m.OpenServerDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenServerDay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenServerTime", wireType)
			}
			m.OpenServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealServerId", wireType)
			}
			m.RealServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CloseFuncIds = append(m.CloseFuncIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CloseFuncIds = append(m.CloseFuncIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseFuncIds", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeOpenServerDay", wireType)
			}
			m.MergeOpenServerDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MergeOpenServerDay |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeOpenServerTime", wireType)
			}
			m.MergeOpenServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MergeOpenServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossBriefServerInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrossBriefServerInfo == nil {
				m.CrossBriefServerInfo = make(map[int32]*BriefServerInfo)
			}
			var mapkey int32
			var mapvalue *BriefServerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BriefServerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CrossBriefServerInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserLoginInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RandNameAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RandNameAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RandNameAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHeroReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHeroReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHeroReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateHeroAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateHeroAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateHeroAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hero", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hero == nil {
				m.Hero = &HeroInfo{}
			}
			if err := m.Hero.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickUserNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickUserNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickUserNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPropertyNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPropertyNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPropertyNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroProps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeroProps == nil {
				m.HeroProps = make(map[int32]*HeroProp)
			}
			var mapkey int32
			var mapvalue *HeroProp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthUser
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HeroProp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipUser(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthUser
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HeroProps[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCombat", wireType)
			}
			m.UserCombat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCombat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugAddGoodsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugAddGoodsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugAddGoodsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Count = append(m.Count, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Count = append(m.Count, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugAddGoodsAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugAddGoodsAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugAddGoodsAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFightModelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeFightModelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeFightModelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightModel", wireType)
			}
			m.FightModel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightModel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeFightModelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeFightModelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeFightModelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightModel", wireType)
			}
			m.FightModel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightModel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeHeroNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHeroNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHeroNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeHeroNameAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHeroNameAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHeroNameAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeroInfo == nil {
				m.HeroInfo = &HeroInfo{}
			}
			if err := m.HeroInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRechargeNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRechargeNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRechargeNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RechargeNum", wireType)
			}
			m.RechargeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RechargeNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketNum", wireType)
			}
			m.RedPacketNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedPacketNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyRecharge", wireType)
			}
			m.DailyRecharge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyRecharge |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRedPacketGetNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRedPacketGetNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRedPacketGetNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedPacketGetNum", wireType)
			}
			m.RedPacketGetNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedPacketGetNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOnlineNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOnlineNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOnlineNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineTime", wireType)
			}
			m.OnlineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserOffLineNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserOffLineNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserOffLineNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffLintTime", wireType)
			}
			m.OffLintTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffLintTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipCustomerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipCustomerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipCustomerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VipCustomerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipCustomerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipCustomerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInGameOkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInGameOkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInGameOkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossFightOpenNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossFightOpenNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossFightOpenNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSubscribeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSubscribeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSubscribeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribeId", wireType)
			}
			m.SubscribeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscribeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSubscribeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSubscribeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSubscribeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribeId", wireType)
			}
			m.SubscribeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubscribeId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user.proto", fileDescriptorUser) }

var fileDescriptorUser = []byte{
	// 1014 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x66, 0xfd, 0x93, 0x9f, 0xb3, 0x89, 0xeb, 0x4c, 0xaa, 0x6a, 0x89, 0x90, 0xb1, 0x86, 0x16,
	0x99, 0x4a, 0x58, 0x90, 0x82, 0x84, 0x90, 0x90, 0x68, 0xdc, 0x34, 0xb8, 0x0d, 0x49, 0xb5, 0x81,
	0x5e, 0x21, 0xa4, 0xf1, 0xee, 0x78, 0xbd, 0x78, 0x77, 0xc6, 0xcc, 0xac, 0xad, 0xfa, 0x8e, 0xc7,
	0xe0, 0x61, 0x40, 0xdc, 0x72, 0xc9, 0x23, 0xa0, 0xf0, 0x22, 0xe8, 0xcc, 0xce, 0x7a, 0xd7, 0xae,
	0x51, 0xc4, 0xdd, 0x9e, 0x6f, 0xce, 0xdf, 0x77, 0xce, 0x37, 0x63, 0x03, 0xcc, 0x35, 0x57, 0xfd,
	0x99, 0x92, 0x99, 0x24, 0xb5, 0xd9, 0xe8, 0xe4, 0x20, 0x90, 0x69, 0x2a, 0x45, 0x8e, 0xd0, 0xdf,
	0x1c, 0x38, 0x38, 0x17, 0x19, 0x57, 0x17, 0x2c, 0xe5, 0x3e, 0xff, 0x99, 0x3c, 0x80, 0x1d, 0x39,
	0xe3, 0x62, 0x18, 0x7a, 0x4e, 0xd7, 0xe9, 0xed, 0xfb, 0xd6, 0x22, 0x27, 0xb0, 0x97, 0xc8, 0x28,
	0x16, 0x2f, 0xf9, 0xd2, 0xab, 0x99, 0x93, 0x95, 0x4d, 0x3c, 0xd8, 0x0d, 0x26, 0x4c, 0x08, 0x9e,
	0x78, 0xf5, 0xae, 0xd3, 0x6b, 0xfa, 0x85, 0x89, 0x51, 0x9a, 0xab, 0x05, 0x57, 0xc3, 0xd0, 0x6b,
	0x98, 0xa3, 0x95, 0x6d, 0x2a, 0xa9, 0x38, 0x8a, 0x85, 0xd7, 0xb4, 0x95, 0x8c, 0x45, 0x5a, 0x50,
	0x8b, 0x67, 0xde, 0x8e, 0xc1, 0x6a, 0xf1, 0x0c, 0x73, 0x84, 0x7c, 0x11, 0x07, 0x7c, 0x18, 0x7a,
	0xbb, 0x79, 0xe5, 0xc2, 0xa6, 0xbf, 0x37, 0x2a, 0xed, 0x3f, 0x0d, 0xa6, 0xe4, 0x11, 0x34, 0x90,
	0xaf, 0x69, 0xde, 0x3d, 0x3d, 0xea, 0xcf, 0x46, 0xfd, 0xef, 0x35, 0x57, 0x97, 0xd8, 0xea, 0x50,
	0x8c, 0xa5, 0x6f, 0x8e, 0xb1, 0x46, 0xa6, 0x0d, 0x8f, 0xa6, 0x5f, 0xcb, 0x34, 0x32, 0x58, 0x70,
	0xa5, 0x63, 0x29, 0x0c, 0x83, 0x7d, 0xbf, 0x30, 0xc9, 0x43, 0x38, 0xc4, 0x09, 0xdc, 0x98, 0xae,
	0x9f, 0xb1, 0xa5, 0xa5, 0xb1, 0x0e, 0x92, 0x0f, 0xa1, 0x55, 0x02, 0xdf, 0xc5, 0x29, 0x37, 0x9c,
	0x9a, 0xfe, 0x06, 0x4a, 0x28, 0x1c, 0x28, 0xce, 0x92, 0x9b, 0x62, 0x26, 0x3b, 0xc6, 0x6b, 0x0d,
	0xc3, 0x5c, 0xa5, 0x7d, 0xc5, 0x52, 0x6e, 0x59, 0x6f, 0xa0, 0x98, 0x2b, 0x48, 0xa4, 0xe6, 0xcf,
	0xe7, 0x22, 0x18, 0x86, 0xda, 0xdb, 0xeb, 0xd6, 0x31, 0x57, 0x15, 0x23, 0x7d, 0x20, 0x29, 0x57,
	0x11, 0xbf, 0x5e, 0xa3, 0xb0, 0x6f, 0xaa, 0x6e, 0x39, 0x21, 0x9f, 0xc0, 0xf1, 0x06, 0x6a, 0xc8,
	0x80, 0x09, 0xd8, 0x76, 0x44, 0x7e, 0x84, 0xfb, 0x81, 0x92, 0x5a, 0x9f, 0xa9, 0x98, 0x8f, 0x2d,
	0x07, 0x31, 0x96, 0x9e, 0xdb, 0xad, 0xf7, 0xdc, 0xd3, 0xc7, 0xb8, 0x80, 0xea, 0x82, 0xfa, 0x83,
	0x2d, 0xce, 0xe7, 0x22, 0x53, 0x4b, 0x7f, 0x6b, 0x9e, 0x93, 0x1f, 0xe0, 0xdd, 0xff, 0x0c, 0x21,
	0x6d, 0xa8, 0x4f, 0xf9, 0xd2, 0x2c, 0xbb, 0xe9, 0xe3, 0x27, 0xf9, 0x08, 0x9a, 0x0b, 0x96, 0xcc,
	0xb9, 0xd9, 0xad, 0x7b, 0x7a, 0x8c, 0xf5, 0x37, 0x42, 0xfd, 0xdc, 0xe3, 0xcb, 0xda, 0x17, 0x0e,
	0x8d, 0xe0, 0x70, 0xa0, 0x38, 0xcb, 0x38, 0x8a, 0x04, 0xe5, 0xdf, 0x86, 0xba, 0xe6, 0x6f, 0x8a,
	0x8c, 0x9a, 0xbf, 0x41, 0xf9, 0x89, 0x38, 0x98, 0x9a, 0x45, 0x58, 0xe1, 0x17, 0x36, 0x4a, 0x98,
	0x2d, 0x58, 0xc6, 0x94, 0x55, 0x8d, 0xb5, 0x30, 0xcb, 0x4f, 0x72, 0x64, 0xa5, 0x82, 0x9f, 0xf4,
	0x75, 0xb5, 0xd0, 0xff, 0x10, 0x6a, 0x07, 0x60, 0xcc, 0xe2, 0xc4, 0xe7, 0x4c, 0x4b, 0x61, 0xeb,
	0x57, 0x10, 0xfa, 0x3e, 0xb8, 0x3e, 0x13, 0xe1, 0x95, 0xbd, 0xbd, 0x6f, 0xb5, 0x4f, 0x3f, 0x28,
	0x1d, 0xb0, 0xec, 0x7d, 0x68, 0x0a, 0x96, 0x72, 0xed, 0x39, 0xdd, 0x7a, 0x6f, 0xdf, 0xcf, 0x0d,
	0xfa, 0xa4, 0xe8, 0xee, 0x1b, 0xae, 0xe4, 0xf6, 0x31, 0x58, 0x4a, 0xb5, 0x92, 0xd2, 0xa7, 0xd5,
	0x20, 0xcc, 0xdd, 0x85, 0xc6, 0x84, 0x2b, 0x69, 0x29, 0x1d, 0x20, 0x25, 0x3c, 0xca, 0xd9, 0xe0,
	0x09, 0x7d, 0x04, 0xee, 0xcb, 0x38, 0x98, 0x22, 0xd1, 0xab, 0x6c, 0x8c, 0xe3, 0x53, 0x39, 0x31,
	0xfb, 0xd6, 0xe4, 0x16, 0xfd, 0xc3, 0x81, 0x7b, 0xe8, 0xf3, 0x4a, 0xc9, 0x19, 0x57, 0xd9, 0x12,
	0x7d, 0xbf, 0x86, 0x7d, 0x4c, 0x81, 0x50, 0xde, 0xbc, 0x7b, 0x4a, 0x8b, 0xa1, 0x55, 0xfc, 0x4c,
	0x45, 0xe3, 0x94, 0x8b, 0xaa, 0x0c, 0xc2, 0x51, 0xe2, 0x48, 0x07, 0x32, 0x1d, 0xb1, 0xcc, 0x10,
	0xa9, 0xfb, 0x15, 0xe4, 0xe4, 0x05, 0xb4, 0xd6, 0x83, 0xb7, 0xc8, 0x8b, 0xae, 0xcb, 0x6b, 0xc5,
	0x11, 0x83, 0xaa, 0xba, 0xba, 0x84, 0xf6, 0x33, 0x3e, 0x9a, 0x47, 0x4f, 0xc3, 0xf0, 0x42, 0xca,
	0x50, 0xe3, 0x4c, 0xf1, 0x5d, 0x0b, 0x4d, 0xeb, 0x4d, 0xbf, 0x16, 0x87, 0xb8, 0x8a, 0x40, 0xce,
	0x05, 0xb6, 0x82, 0x50, 0x6e, 0x10, 0x02, 0x0d, 0xa6, 0x22, 0xed, 0xd5, 0xcd, 0x7e, 0xcc, 0x37,
	0x7d, 0xbc, 0x91, 0x0d, 0x87, 0x6d, 0x66, 0xa7, 0xe7, 0x49, 0x66, 0xdb, 0xb3, 0x16, 0xfd, 0x1c,
	0x8e, 0x07, 0x13, 0x26, 0x22, 0xfe, 0x3c, 0x8e, 0x26, 0xd9, 0xb7, 0x32, 0xe4, 0x09, 0x16, 0x47,
	0x1d, 0xad, 0x00, 0x1b, 0x52, 0x41, 0xb6, 0x85, 0x61, 0x95, 0xbb, 0xc2, 0xce, 0xe1, 0x28, 0x0f,
	0xc3, 0x21, 0x14, 0x22, 0x7c, 0x2f, 0x5f, 0xd5, 0x50, 0x84, 0x2b, 0x09, 0x95, 0x00, 0x12, 0x14,
	0xe5, 0x5d, 0x32, 0xdf, 0xf4, 0xab, 0xcd, 0x34, 0x58, 0xbb, 0x07, 0x7b, 0x13, 0x2b, 0x9f, 0xad,
	0x92, 0x5a, 0x9d, 0xd2, 0x5f, 0x1c, 0x20, 0xf9, 0x05, 0x0e, 0x26, 0x4c, 0x45, 0xfc, 0x6a, 0x9e,
	0xa2, 0x64, 0xba, 0xe0, 0xaa, 0x12, 0xb1, 0x9d, 0x54, 0xa1, 0xfc, 0x39, 0x0e, 0x5f, 0xb1, 0x60,
	0xca, 0x33, 0x74, 0xa9, 0x15, 0xcf, 0x71, 0x89, 0xe1, 0x0f, 0x40, 0xc8, 0xe2, 0x64, 0x59, 0x24,
	0xb7, 0x3f, 0x71, 0xeb, 0x20, 0x3d, 0x83, 0x07, 0x79, 0x07, 0x36, 0xf2, 0xc2, 0x04, 0x63, 0x17,
	0x3d, 0xb8, 0xa7, 0xd6, 0x51, 0xdb, 0xc9, 0x26, 0x4c, 0x2f, 0xe0, 0x10, 0x73, 0x5c, 0x8b, 0x24,
	0x16, 0xdc, 0xde, 0x0f, 0xd4, 0xa7, 0xfd, 0x2d, 0x6e, 0xfa, 0xd6, 0xc2, 0xad, 0x48, 0xe3, 0x64,
	0x1e, 0x67, 0xab, 0xe4, 0x12, 0xa1, 0x2f, 0xa0, 0x65, 0x12, 0x8d, 0xc7, 0x97, 0x77, 0x64, 0xea,
	0x82, 0x2b, 0x8d, 0x57, 0x56, 0x49, 0x55, 0x85, 0x68, 0x1b, 0x5a, 0xaf, 0xe3, 0xd9, 0x60, 0xae,
	0x33, 0x99, 0x9a, 0x27, 0x92, 0x3e, 0x5c, 0x43, 0x70, 0x53, 0x04, 0x1a, 0xe3, 0x84, 0x45, 0x26,
	0xf7, 0x9e, 0x6f, 0xbe, 0xe9, 0x51, 0x7e, 0x85, 0x87, 0x02, 0x1f, 0xfe, 0xeb, 0x29, 0x06, 0x7e,
	0x0c, 0x47, 0xe6, 0x29, 0x37, 0x12, 0xc3, 0x9f, 0x11, 0xec, 0xcc, 0x83, 0x5d, 0x9d, 0xb1, 0x88,
	0xaf, 0x5a, 0x2b, 0x4c, 0xfa, 0x19, 0xb4, 0x31, 0xc3, 0xcd, 0x7c, 0xa4, 0x03, 0x15, 0x8f, 0x8c,
	0xb4, 0xba, 0xe0, 0xea, 0xc2, 0x5e, 0x45, 0x54, 0xa1, 0xb7, 0xa2, 0xf2, 0x87, 0xe9, 0x8e, 0xa8,
	0xb3, 0xf6, 0x9f, 0xb7, 0x1d, 0xe7, 0xaf, 0xdb, 0x8e, 0xf3, 0xf7, 0x6d, 0xc7, 0xf9, 0xf5, 0x9f,
	0xce, 0x3b, 0xa3, 0x1d, 0xf3, 0xff, 0xe8, 0xc9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x98, 0xbf,
	0x60, 0x7e, 0x3f, 0x09, 0x00, 0x00,
}
