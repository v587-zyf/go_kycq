// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chaunshi.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 传世装备穿戴
type ChuanShiWearReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	BagPos    int32 `protobuf:"varint,2,opt,name=bagPos,proto3" json:"bagPos,omitempty"`
}

func (m *ChuanShiWearReq) Reset()                    { *m = ChuanShiWearReq{} }
func (m *ChuanShiWearReq) String() string            { return proto.CompactTextString(m) }
func (*ChuanShiWearReq) ProtoMessage()               {}
func (*ChuanShiWearReq) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{0} }

func (m *ChuanShiWearReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChuanShiWearReq) GetBagPos() int32 {
	if m != nil {
		return m.BagPos
	}
	return 0
}

type ChuanShiWearAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	EquipId   int32 `protobuf:"varint,3,opt,name=equipId,proto3" json:"equipId,omitempty"`
}

func (m *ChuanShiWearAck) Reset()                    { *m = ChuanShiWearAck{} }
func (m *ChuanShiWearAck) String() string            { return proto.CompactTextString(m) }
func (*ChuanShiWearAck) ProtoMessage()               {}
func (*ChuanShiWearAck) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{1} }

func (m *ChuanShiWearAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChuanShiWearAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *ChuanShiWearAck) GetEquipId() int32 {
	if m != nil {
		return m.EquipId
	}
	return 0
}

// 传世装备卸下
type ChuanShiRemoveReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
}

func (m *ChuanShiRemoveReq) Reset()                    { *m = ChuanShiRemoveReq{} }
func (m *ChuanShiRemoveReq) String() string            { return proto.CompactTextString(m) }
func (*ChuanShiRemoveReq) ProtoMessage()               {}
func (*ChuanShiRemoveReq) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{2} }

func (m *ChuanShiRemoveReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChuanShiRemoveReq) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

type ChuanShiRemoveAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
}

func (m *ChuanShiRemoveAck) Reset()                    { *m = ChuanShiRemoveAck{} }
func (m *ChuanShiRemoveAck) String() string            { return proto.CompactTextString(m) }
func (*ChuanShiRemoveAck) ProtoMessage()               {}
func (*ChuanShiRemoveAck) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{3} }

func (m *ChuanShiRemoveAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChuanShiRemoveAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

// 传世装备分解
type ChuanShiDeComposeReq struct {
	BagPos int32 `protobuf:"varint,1,opt,name=bagPos,proto3" json:"bagPos,omitempty"`
}

func (m *ChuanShiDeComposeReq) Reset()                    { *m = ChuanShiDeComposeReq{} }
func (m *ChuanShiDeComposeReq) String() string            { return proto.CompactTextString(m) }
func (*ChuanShiDeComposeReq) ProtoMessage()               {}
func (*ChuanShiDeComposeReq) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{4} }

func (m *ChuanShiDeComposeReq) GetBagPos() int32 {
	if m != nil {
		return m.BagPos
	}
	return 0
}

type ChuanShiDeComposeAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *ChuanShiDeComposeAck) Reset()                    { *m = ChuanShiDeComposeAck{} }
func (m *ChuanShiDeComposeAck) String() string            { return proto.CompactTextString(m) }
func (*ChuanShiDeComposeAck) ProtoMessage()               {}
func (*ChuanShiDeComposeAck) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{5} }

func (m *ChuanShiDeComposeAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 传世装备强化
type ChuanshiStrengthenReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	Stone     int32 `protobuf:"varint,3,opt,name=stone,proto3" json:"stone,omitempty"`
}

func (m *ChuanshiStrengthenReq) Reset()                    { *m = ChuanshiStrengthenReq{} }
func (m *ChuanshiStrengthenReq) String() string            { return proto.CompactTextString(m) }
func (*ChuanshiStrengthenReq) ProtoMessage()               {}
func (*ChuanshiStrengthenReq) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{6} }

func (m *ChuanshiStrengthenReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChuanshiStrengthenReq) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *ChuanshiStrengthenReq) GetStone() int32 {
	if m != nil {
		return m.Stone
	}
	return 0
}

type ChuanshiStrengthenAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	Lv        int32 `protobuf:"varint,3,opt,name=lv,proto3" json:"lv,omitempty"`
	IsUp      bool  `protobuf:"varint,4,opt,name=isUp,proto3" json:"isUp,omitempty"`
}

func (m *ChuanshiStrengthenAck) Reset()                    { *m = ChuanshiStrengthenAck{} }
func (m *ChuanshiStrengthenAck) String() string            { return proto.CompactTextString(m) }
func (*ChuanshiStrengthenAck) ProtoMessage()               {}
func (*ChuanshiStrengthenAck) Descriptor() ([]byte, []int) { return fileDescriptorChaunshi, []int{7} }

func (m *ChuanshiStrengthenAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ChuanshiStrengthenAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *ChuanshiStrengthenAck) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *ChuanshiStrengthenAck) GetIsUp() bool {
	if m != nil {
		return m.IsUp
	}
	return false
}

func init() {
	proto.RegisterType((*ChuanShiWearReq)(nil), "pb.ChuanShiWearReq")
	proto.RegisterType((*ChuanShiWearAck)(nil), "pb.ChuanShiWearAck")
	proto.RegisterType((*ChuanShiRemoveReq)(nil), "pb.ChuanShiRemoveReq")
	proto.RegisterType((*ChuanShiRemoveAck)(nil), "pb.ChuanShiRemoveAck")
	proto.RegisterType((*ChuanShiDeComposeReq)(nil), "pb.ChuanShiDeComposeReq")
	proto.RegisterType((*ChuanShiDeComposeAck)(nil), "pb.ChuanShiDeComposeAck")
	proto.RegisterType((*ChuanshiStrengthenReq)(nil), "pb.ChuanshiStrengthenReq")
	proto.RegisterType((*ChuanshiStrengthenAck)(nil), "pb.ChuanshiStrengthenAck")
}
func (m *ChuanShiWearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanShiWearReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.HeroIndex))
	}
	if m.BagPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.BagPos))
	}
	return i, nil
}

func (m *ChuanShiWearAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanShiWearAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.EquipPos))
	}
	if m.EquipId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.EquipId))
	}
	return i, nil
}

func (m *ChuanShiRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanShiRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.EquipPos))
	}
	return i, nil
}

func (m *ChuanShiRemoveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanShiRemoveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.EquipPos))
	}
	return i, nil
}

func (m *ChuanShiDeComposeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanShiDeComposeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BagPos != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.BagPos))
	}
	return i, nil
}

func (m *ChuanShiDeComposeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanShiDeComposeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ChuanshiStrengthenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanshiStrengthenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.EquipPos))
	}
	if m.Stone != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.Stone))
	}
	return i, nil
}

func (m *ChuanshiStrengthenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChuanshiStrengthenAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.EquipPos))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChaunshi(dAtA, i, uint64(m.Lv))
	}
	if m.IsUp {
		dAtA[i] = 0x20
		i++
		if m.IsUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintChaunshi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChuanShiWearReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovChaunshi(uint64(m.HeroIndex))
	}
	if m.BagPos != 0 {
		n += 1 + sovChaunshi(uint64(m.BagPos))
	}
	return n
}

func (m *ChuanShiWearAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovChaunshi(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovChaunshi(uint64(m.EquipPos))
	}
	if m.EquipId != 0 {
		n += 1 + sovChaunshi(uint64(m.EquipId))
	}
	return n
}

func (m *ChuanShiRemoveReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovChaunshi(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovChaunshi(uint64(m.EquipPos))
	}
	return n
}

func (m *ChuanShiRemoveAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovChaunshi(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovChaunshi(uint64(m.EquipPos))
	}
	return n
}

func (m *ChuanShiDeComposeReq) Size() (n int) {
	var l int
	_ = l
	if m.BagPos != 0 {
		n += 1 + sovChaunshi(uint64(m.BagPos))
	}
	return n
}

func (m *ChuanShiDeComposeAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovChaunshi(uint64(l))
	}
	return n
}

func (m *ChuanshiStrengthenReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovChaunshi(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovChaunshi(uint64(m.EquipPos))
	}
	if m.Stone != 0 {
		n += 1 + sovChaunshi(uint64(m.Stone))
	}
	return n
}

func (m *ChuanshiStrengthenAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovChaunshi(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovChaunshi(uint64(m.EquipPos))
	}
	if m.Lv != 0 {
		n += 1 + sovChaunshi(uint64(m.Lv))
	}
	if m.IsUp {
		n += 2
	}
	return n
}

func sovChaunshi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChaunshi(x uint64) (n int) {
	return sovChaunshi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChuanShiWearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanShiWearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanShiWearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagPos", wireType)
			}
			m.BagPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanShiWearAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanShiWearAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanShiWearAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipId", wireType)
			}
			m.EquipId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanShiRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanShiRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanShiRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanShiRemoveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanShiRemoveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanShiRemoveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanShiDeComposeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanShiDeComposeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanShiDeComposeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagPos", wireType)
			}
			m.BagPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanShiDeComposeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanShiDeComposeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanShiDeComposeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChaunshi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanshiStrengthenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanshiStrengthenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanshiStrengthenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stone", wireType)
			}
			m.Stone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stone |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChuanshiStrengthenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChuanshiStrengthenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChuanshiStrengthenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChaunshi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChaunshi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChaunshi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChaunshi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChaunshi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChaunshi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChaunshi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChaunshi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChaunshi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChaunshi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("chaunshi.proto", fileDescriptorChaunshi) }

var fileDescriptorChaunshi = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x7d, 0xd3, 0x07, 0x88, 0x57, 0x83, 0x3a, 0x41, 0xd3, 0x10, 0xd3, 0x90, 0x59, 0xb1, 0xea,
	0x42, 0x7f, 0x40, 0xc5, 0x84, 0xb0, 0xd0, 0x98, 0x12, 0xe3, 0xba, 0x85, 0x6b, 0xa7, 0x91, 0xce,
	0x1d, 0x3a, 0x2d, 0xf1, 0x53, 0xfc, 0x24, 0x97, 0x7e, 0x82, 0xc1, 0x1f, 0x31, 0x4c, 0x41, 0x42,
	0x24, 0xb2, 0x60, 0x77, 0xcf, 0xbd, 0x27, 0xe7, 0x9c, 0x9c, 0x19, 0x68, 0x0c, 0x65, 0x58, 0x28,
	0x23, 0x13, 0x5f, 0x67, 0x94, 0x13, 0x77, 0x74, 0xd4, 0x3a, 0x1c, 0x52, 0x9a, 0x92, 0x2a, 0x37,
	0xa2, 0x07, 0x47, 0x5d, 0x59, 0x84, 0x6a, 0x20, 0x93, 0x27, 0x0c, 0xb3, 0x00, 0x27, 0xfc, 0x1c,
	0xf6, 0x25, 0x66, 0xd4, 0x57, 0x23, 0x7c, 0x75, 0x59, 0x9b, 0x75, 0xaa, 0xc1, 0x6a, 0xc1, 0xcf,
	0xa0, 0x16, 0x85, 0xf1, 0x03, 0x19, 0xd7, 0xb1, 0xa7, 0x05, 0x12, 0xb8, 0x2e, 0x74, 0x3d, 0x7c,
	0xd9, 0x22, 0xd4, 0x82, 0x3a, 0x4e, 0x8a, 0x44, 0xaf, 0xa4, 0x7e, 0x30, 0x77, 0x61, 0xcf, 0xce,
	0xfd, 0x91, 0xfb, 0xdf, 0x9e, 0x96, 0x50, 0xdc, 0xc1, 0xc9, 0xd2, 0x26, 0xc0, 0x94, 0xa6, 0xb8,
	0x3d, 0xf1, 0x1f, 0x46, 0xbf, 0xe5, 0x76, 0xca, 0x2d, 0x7c, 0x68, 0x2e, 0xe5, 0x6e, 0xb1, 0x4b,
	0xa9, 0x26, 0x63, 0x03, 0xae, 0x4a, 0x63, 0x6b, 0xa5, 0x5d, 0x6d, 0xe0, 0xcf, 0x13, 0x74, 0xa0,
	0x1a, 0x13, 0x8d, 0x4a, 0xfa, 0xc1, 0x05, 0xf7, 0x75, 0xe4, 0xf7, 0xe6, 0x8b, 0xae, 0x0c, 0x55,
	0x8c, 0xf7, 0xf9, 0x73, 0x50, 0x12, 0x44, 0x0c, 0xa7, 0x56, 0xc1, 0xc8, 0x64, 0x90, 0x67, 0xa8,
	0xe2, 0x5c, 0xa2, 0xda, 0xa9, 0x13, 0xde, 0x84, 0xaa, 0xc9, 0x49, 0xe1, 0xa2, 0xfa, 0x12, 0x88,
	0x62, 0x93, 0xd1, 0x6e, 0xaf, 0xdc, 0x00, 0x67, 0x3c, 0x5d, 0xb8, 0x38, 0xe3, 0x29, 0xe7, 0x50,
	0x49, 0xcc, 0xa3, 0x76, 0x2b, 0x6d, 0xd6, 0xa9, 0x07, 0x76, 0xbe, 0x39, 0x7e, 0x9f, 0x79, 0xec,
	0x63, 0xe6, 0xb1, 0xcf, 0x99, 0xc7, 0xde, 0xbe, 0xbc, 0x7f, 0x51, 0xcd, 0x7e, 0xdc, 0xcb, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xaa, 0x6a, 0x5d, 0xdc, 0x02, 0x00, 0x00,
}
