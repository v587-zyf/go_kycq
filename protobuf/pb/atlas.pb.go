// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: atlas.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 图鉴激活
type AtlasActiveReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AtlasActiveReq) Reset()                    { *m = AtlasActiveReq{} }
func (m *AtlasActiveReq) String() string            { return proto.CompactTextString(m) }
func (*AtlasActiveReq) ProtoMessage()               {}
func (*AtlasActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{0} }

func (m *AtlasActiveReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AtlasActiveAck struct {
	Atlas *Atlas `protobuf:"bytes,1,opt,name=atlas" json:"atlas,omitempty"`
}

func (m *AtlasActiveAck) Reset()                    { *m = AtlasActiveAck{} }
func (m *AtlasActiveAck) String() string            { return proto.CompactTextString(m) }
func (*AtlasActiveAck) ProtoMessage()               {}
func (*AtlasActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{1} }

func (m *AtlasActiveAck) GetAtlas() *Atlas {
	if m != nil {
		return m.Atlas
	}
	return nil
}

// 图鉴升星
type AtlasUpStarReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AtlasUpStarReq) Reset()                    { *m = AtlasUpStarReq{} }
func (m *AtlasUpStarReq) String() string            { return proto.CompactTextString(m) }
func (*AtlasUpStarReq) ProtoMessage()               {}
func (*AtlasUpStarReq) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{2} }

func (m *AtlasUpStarReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AtlasUpStarAck struct {
	Atlas *Atlas `protobuf:"bytes,1,opt,name=atlas" json:"atlas,omitempty"`
}

func (m *AtlasUpStarAck) Reset()                    { *m = AtlasUpStarAck{} }
func (m *AtlasUpStarAck) String() string            { return proto.CompactTextString(m) }
func (*AtlasUpStarAck) ProtoMessage()               {}
func (*AtlasUpStarAck) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{3} }

func (m *AtlasUpStarAck) GetAtlas() *Atlas {
	if m != nil {
		return m.Atlas
	}
	return nil
}

// 图鉴集合激活
type AtlasGatherActiveReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AtlasGatherActiveReq) Reset()                    { *m = AtlasGatherActiveReq{} }
func (m *AtlasGatherActiveReq) String() string            { return proto.CompactTextString(m) }
func (*AtlasGatherActiveReq) ProtoMessage()               {}
func (*AtlasGatherActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{4} }

func (m *AtlasGatherActiveReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AtlasGatherActiveAck struct {
	AtlasGather *AtlasGather `protobuf:"bytes,1,opt,name=atlasGather" json:"atlasGather,omitempty"`
}

func (m *AtlasGatherActiveAck) Reset()                    { *m = AtlasGatherActiveAck{} }
func (m *AtlasGatherActiveAck) String() string            { return proto.CompactTextString(m) }
func (*AtlasGatherActiveAck) ProtoMessage()               {}
func (*AtlasGatherActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{5} }

func (m *AtlasGatherActiveAck) GetAtlasGather() *AtlasGather {
	if m != nil {
		return m.AtlasGather
	}
	return nil
}

// 图鉴集合升星
type AtlasGatherUpStarReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AtlasGatherUpStarReq) Reset()                    { *m = AtlasGatherUpStarReq{} }
func (m *AtlasGatherUpStarReq) String() string            { return proto.CompactTextString(m) }
func (*AtlasGatherUpStarReq) ProtoMessage()               {}
func (*AtlasGatherUpStarReq) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{6} }

func (m *AtlasGatherUpStarReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AtlasGatherUpStarAck struct {
	AtlasGather *AtlasGather `protobuf:"bytes,1,opt,name=atlasGather" json:"atlasGather,omitempty"`
}

func (m *AtlasGatherUpStarAck) Reset()                    { *m = AtlasGatherUpStarAck{} }
func (m *AtlasGatherUpStarAck) String() string            { return proto.CompactTextString(m) }
func (*AtlasGatherUpStarAck) ProtoMessage()               {}
func (*AtlasGatherUpStarAck) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{7} }

func (m *AtlasGatherUpStarAck) GetAtlasGather() *AtlasGather {
	if m != nil {
		return m.AtlasGather
	}
	return nil
}

// 图鉴穿戴、卸下
type AtlasWearChangeReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *AtlasWearChangeReq) Reset()                    { *m = AtlasWearChangeReq{} }
func (m *AtlasWearChangeReq) String() string            { return proto.CompactTextString(m) }
func (*AtlasWearChangeReq) ProtoMessage()               {}
func (*AtlasWearChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{8} }

func (m *AtlasWearChangeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *AtlasWearChangeReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AtlasWearChangeAck struct {
	HeroIndex int32   `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	RemoveId  int32   `protobuf:"varint,2,opt,name=removeId,proto3" json:"removeId,omitempty"`
	AtlasWear []int32 `protobuf:"varint,3,rep,packed,name=atlasWear" json:"atlasWear,omitempty"`
}

func (m *AtlasWearChangeAck) Reset()                    { *m = AtlasWearChangeAck{} }
func (m *AtlasWearChangeAck) String() string            { return proto.CompactTextString(m) }
func (*AtlasWearChangeAck) ProtoMessage()               {}
func (*AtlasWearChangeAck) Descriptor() ([]byte, []int) { return fileDescriptorAtlas, []int{9} }

func (m *AtlasWearChangeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *AtlasWearChangeAck) GetRemoveId() int32 {
	if m != nil {
		return m.RemoveId
	}
	return 0
}

func (m *AtlasWearChangeAck) GetAtlasWear() []int32 {
	if m != nil {
		return m.AtlasWear
	}
	return nil
}

func init() {
	proto.RegisterType((*AtlasActiveReq)(nil), "pb.AtlasActiveReq")
	proto.RegisterType((*AtlasActiveAck)(nil), "pb.AtlasActiveAck")
	proto.RegisterType((*AtlasUpStarReq)(nil), "pb.AtlasUpStarReq")
	proto.RegisterType((*AtlasUpStarAck)(nil), "pb.AtlasUpStarAck")
	proto.RegisterType((*AtlasGatherActiveReq)(nil), "pb.AtlasGatherActiveReq")
	proto.RegisterType((*AtlasGatherActiveAck)(nil), "pb.AtlasGatherActiveAck")
	proto.RegisterType((*AtlasGatherUpStarReq)(nil), "pb.AtlasGatherUpStarReq")
	proto.RegisterType((*AtlasGatherUpStarAck)(nil), "pb.AtlasGatherUpStarAck")
	proto.RegisterType((*AtlasWearChangeReq)(nil), "pb.AtlasWearChangeReq")
	proto.RegisterType((*AtlasWearChangeAck)(nil), "pb.AtlasWearChangeAck")
}
func (m *AtlasActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *AtlasActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Atlas != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Atlas.Size()))
		n1, err := m.Atlas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AtlasUpStarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasUpStarReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *AtlasUpStarAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasUpStarAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Atlas != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Atlas.Size()))
		n2, err := m.Atlas.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AtlasGatherActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasGatherActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *AtlasGatherActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasGatherActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AtlasGather != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.AtlasGather.Size()))
		n3, err := m.AtlasGather.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AtlasGatherUpStarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasGatherUpStarReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *AtlasGatherUpStarAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasGatherUpStarAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AtlasGather != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.AtlasGather.Size()))
		n4, err := m.AtlasGather.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *AtlasWearChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasWearChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *AtlasWearChangeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AtlasWearChangeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.HeroIndex))
	}
	if m.RemoveId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(m.RemoveId))
	}
	if len(m.AtlasWear) > 0 {
		dAtA6 := make([]byte, len(m.AtlasWear)*10)
		var j5 int
		for _, num1 := range m.AtlasWear {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAtlas(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func encodeVarintAtlas(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AtlasActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	return n
}

func (m *AtlasActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Atlas != nil {
		l = m.Atlas.Size()
		n += 1 + l + sovAtlas(uint64(l))
	}
	return n
}

func (m *AtlasUpStarReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	return n
}

func (m *AtlasUpStarAck) Size() (n int) {
	var l int
	_ = l
	if m.Atlas != nil {
		l = m.Atlas.Size()
		n += 1 + l + sovAtlas(uint64(l))
	}
	return n
}

func (m *AtlasGatherActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	return n
}

func (m *AtlasGatherActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.AtlasGather != nil {
		l = m.AtlasGather.Size()
		n += 1 + l + sovAtlas(uint64(l))
	}
	return n
}

func (m *AtlasGatherUpStarReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	return n
}

func (m *AtlasGatherUpStarAck) Size() (n int) {
	var l int
	_ = l
	if m.AtlasGather != nil {
		l = m.AtlasGather.Size()
		n += 1 + l + sovAtlas(uint64(l))
	}
	return n
}

func (m *AtlasWearChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAtlas(uint64(m.HeroIndex))
	}
	if m.Id != 0 {
		n += 1 + sovAtlas(uint64(m.Id))
	}
	return n
}

func (m *AtlasWearChangeAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAtlas(uint64(m.HeroIndex))
	}
	if m.RemoveId != 0 {
		n += 1 + sovAtlas(uint64(m.RemoveId))
	}
	if len(m.AtlasWear) > 0 {
		l = 0
		for _, e := range m.AtlasWear {
			l += sovAtlas(uint64(e))
		}
		n += 1 + sovAtlas(uint64(l)) + l
	}
	return n
}

func sovAtlas(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAtlas(x uint64) (n int) {
	return sovAtlas(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AtlasActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atlas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Atlas == nil {
				m.Atlas = &Atlas{}
			}
			if err := m.Atlas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasUpStarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasUpStarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasUpStarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasUpStarAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasUpStarAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasUpStarAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Atlas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Atlas == nil {
				m.Atlas = &Atlas{}
			}
			if err := m.Atlas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasGatherActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasGatherActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasGatherActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasGatherActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasGatherActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasGatherActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtlasGather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AtlasGather == nil {
				m.AtlasGather = &AtlasGather{}
			}
			if err := m.AtlasGather.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasGatherUpStarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasGatherUpStarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasGatherUpStarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasGatherUpStarAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasGatherUpStarAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasGatherUpStarAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtlasGather", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAtlas
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AtlasGather == nil {
				m.AtlasGather = &AtlasGather{}
			}
			if err := m.AtlasGather.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasWearChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasWearChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasWearChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AtlasWearChangeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AtlasWearChangeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AtlasWearChangeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveId", wireType)
			}
			m.RemoveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoveId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAtlas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AtlasWear = append(m.AtlasWear, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAtlas
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAtlas
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAtlas
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AtlasWear = append(m.AtlasWear, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AtlasWear", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAtlas(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAtlas
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAtlas(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAtlas
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAtlas
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAtlas
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAtlas
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAtlas(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAtlas = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAtlas   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("atlas.proto", fileDescriptorAtlas) }

var fileDescriptorAtlas = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x2c, 0xc9, 0x49,
	0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf,
	0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x29, 0x70, 0xf1, 0x39, 0x82, 0x14, 0x38, 0x26, 0x97, 0x64,
	0x96, 0xa5, 0x06, 0xa5, 0x16, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0x31, 0x65, 0xa6, 0x28, 0x19, 0xa2, 0xa8, 0x70, 0x4c, 0xce, 0x16, 0x92, 0xe7, 0x62,
	0x05, 0x1b, 0x0a, 0x56, 0xc4, 0x6d, 0xc4, 0xa9, 0x57, 0x90, 0xa4, 0x07, 0x56, 0x12, 0x04, 0x11,
	0x87, 0x1b, 0x1a, 0x5a, 0x10, 0x5c, 0x92, 0x58, 0x84, 0xcf, 0x50, 0x88, 0x0a, 0xa2, 0x0c, 0x55,
	0xe3, 0x12, 0x01, 0xf3, 0xdd, 0x13, 0x4b, 0x32, 0x52, 0x8b, 0x70, 0xbb, 0xd7, 0x13, 0x8b, 0x3a,
	0x90, 0x05, 0x86, 0xd0, 0xa0, 0x80, 0x88, 0x43, 0xad, 0xe1, 0x87, 0x5b, 0x03, 0x11, 0x0e, 0x42,
	0x56, 0x83, 0x66, 0x25, 0x6e, 0xdf, 0x78, 0x62, 0x51, 0x47, 0xa6, 0x95, 0x4e, 0x5c, 0x42, 0x60,
	0xb9, 0xf0, 0xd4, 0xc4, 0x22, 0xe7, 0x8c, 0xc4, 0xbc, 0x74, 0xb0, 0x1f, 0x65, 0xb8, 0x38, 0x33,
	0x52, 0x8b, 0xf2, 0x3d, 0xf3, 0x52, 0x52, 0x2b, 0xa0, 0xf6, 0x22, 0x04, 0xa0, 0xce, 0x61, 0x82,
	0x3b, 0x27, 0x07, 0xc3, 0x0c, 0x90, 0x63, 0xf0, 0x9b, 0x21, 0xc5, 0xc5, 0x51, 0x94, 0x9a, 0x9b,
	0x5f, 0x96, 0xea, 0x09, 0x33, 0x09, 0xce, 0x07, 0xe9, 0x4c, 0x84, 0x99, 0x27, 0xc1, 0xac, 0xc0,
	0x0c, 0xd2, 0x09, 0x17, 0x70, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x27, 0x2d, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x67, 0x01, 0xf3, 0x6c, 0x7b, 0x02, 0x00, 0x00,
}
