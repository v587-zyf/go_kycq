// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: personBoss.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入个人boss列表请求
type PersonBossLoadReq struct {
}

func (m *PersonBossLoadReq) Reset()                    { *m = PersonBossLoadReq{} }
func (m *PersonBossLoadReq) String() string            { return proto.CompactTextString(m) }
func (*PersonBossLoadReq) ProtoMessage()               {}
func (*PersonBossLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorPersonBoss, []int{0} }

type PersonBossLoadAck struct {
	PersonBoss map[int32]int32 `protobuf:"bytes,1,rep,name=PersonBoss" json:"PersonBoss,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *PersonBossLoadAck) Reset()                    { *m = PersonBossLoadAck{} }
func (m *PersonBossLoadAck) String() string            { return proto.CompactTextString(m) }
func (*PersonBossLoadAck) ProtoMessage()               {}
func (*PersonBossLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorPersonBoss, []int{1} }

func (m *PersonBossLoadAck) GetPersonBoss() map[int32]int32 {
	if m != nil {
		return m.PersonBoss
	}
	return nil
}

// 战斗
type EnterPersonBossFightReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterPersonBossFightReq) Reset()         { *m = EnterPersonBossFightReq{} }
func (m *EnterPersonBossFightReq) String() string { return proto.CompactTextString(m) }
func (*EnterPersonBossFightReq) ProtoMessage()    {}
func (*EnterPersonBossFightReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPersonBoss, []int{2}
}

func (m *EnterPersonBossFightReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type EnterPersonBossFightAck struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	DareNum int32 `protobuf:"varint,2,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
}

func (m *EnterPersonBossFightAck) Reset()         { *m = EnterPersonBossFightAck{} }
func (m *EnterPersonBossFightAck) String() string { return proto.CompactTextString(m) }
func (*EnterPersonBossFightAck) ProtoMessage()    {}
func (*EnterPersonBossFightAck) Descriptor() ([]byte, []int) {
	return fileDescriptorPersonBoss, []int{3}
}

func (m *EnterPersonBossFightAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *EnterPersonBossFightAck) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

type PersonBossFightResultNtf struct {
	StageId int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	DareNum int32           `protobuf:"varint,2,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
	Result  int32           `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *PersonBossFightResultNtf) Reset()         { *m = PersonBossFightResultNtf{} }
func (m *PersonBossFightResultNtf) String() string { return proto.CompactTextString(m) }
func (*PersonBossFightResultNtf) ProtoMessage()    {}
func (*PersonBossFightResultNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorPersonBoss, []int{4}
}

func (m *PersonBossFightResultNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *PersonBossFightResultNtf) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func (m *PersonBossFightResultNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *PersonBossFightResultNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 扫荡
type PersonBossSweepReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *PersonBossSweepReq) Reset()                    { *m = PersonBossSweepReq{} }
func (m *PersonBossSweepReq) String() string            { return proto.CompactTextString(m) }
func (*PersonBossSweepReq) ProtoMessage()               {}
func (*PersonBossSweepReq) Descriptor() ([]byte, []int) { return fileDescriptorPersonBoss, []int{5} }

func (m *PersonBossSweepReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type PersonBossSweepAck struct {
	StageId   int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	DareNum   int32           `protobuf:"varint,2,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
	IsBagFull int32           `protobuf:"varint,4,opt,name=isBagFull,proto3" json:"isBagFull,omitempty"`
}

func (m *PersonBossSweepAck) Reset()                    { *m = PersonBossSweepAck{} }
func (m *PersonBossSweepAck) String() string            { return proto.CompactTextString(m) }
func (*PersonBossSweepAck) ProtoMessage()               {}
func (*PersonBossSweepAck) Descriptor() ([]byte, []int) { return fileDescriptorPersonBoss, []int{6} }

func (m *PersonBossSweepAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *PersonBossSweepAck) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func (m *PersonBossSweepAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *PersonBossSweepAck) GetIsBagFull() int32 {
	if m != nil {
		return m.IsBagFull
	}
	return 0
}

type PersonBossDareNumNtf struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	DareNum int32 `protobuf:"varint,2,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
}

func (m *PersonBossDareNumNtf) Reset()                    { *m = PersonBossDareNumNtf{} }
func (m *PersonBossDareNumNtf) String() string            { return proto.CompactTextString(m) }
func (*PersonBossDareNumNtf) ProtoMessage()               {}
func (*PersonBossDareNumNtf) Descriptor() ([]byte, []int) { return fileDescriptorPersonBoss, []int{7} }

func (m *PersonBossDareNumNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *PersonBossDareNumNtf) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func init() {
	proto.RegisterType((*PersonBossLoadReq)(nil), "pb.PersonBossLoadReq")
	proto.RegisterType((*PersonBossLoadAck)(nil), "pb.PersonBossLoadAck")
	proto.RegisterType((*EnterPersonBossFightReq)(nil), "pb.EnterPersonBossFightReq")
	proto.RegisterType((*EnterPersonBossFightAck)(nil), "pb.EnterPersonBossFightAck")
	proto.RegisterType((*PersonBossFightResultNtf)(nil), "pb.PersonBossFightResultNtf")
	proto.RegisterType((*PersonBossSweepReq)(nil), "pb.PersonBossSweepReq")
	proto.RegisterType((*PersonBossSweepAck)(nil), "pb.PersonBossSweepAck")
	proto.RegisterType((*PersonBossDareNumNtf)(nil), "pb.PersonBossDareNumNtf")
}
func (m *PersonBossLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonBossLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PersonBossLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonBossLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PersonBoss) > 0 {
		for k, _ := range m.PersonBoss {
			dAtA[i] = 0xa
			i++
			v := m.PersonBoss[k]
			mapSize := 1 + sovPersonBoss(uint64(k)) + 1 + sovPersonBoss(uint64(v))
			i = encodeVarintPersonBoss(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintPersonBoss(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintPersonBoss(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *EnterPersonBossFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterPersonBossFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *EnterPersonBossFightAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterPersonBossFightAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.StageId))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.DareNum))
	}
	return i, nil
}

func (m *PersonBossFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonBossFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.StageId))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.DareNum))
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.Result))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PersonBossSweepReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonBossSweepReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *PersonBossSweepAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonBossSweepAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.StageId))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.DareNum))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsBagFull != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.IsBagFull))
	}
	return i, nil
}

func (m *PersonBossDareNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersonBossDareNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.StageId))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPersonBoss(dAtA, i, uint64(m.DareNum))
	}
	return i, nil
}

func encodeVarintPersonBoss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PersonBossLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PersonBossLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.PersonBoss) > 0 {
		for k, v := range m.PersonBoss {
			_ = k
			_ = v
			mapEntrySize := 1 + sovPersonBoss(uint64(k)) + 1 + sovPersonBoss(uint64(v))
			n += mapEntrySize + 1 + sovPersonBoss(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EnterPersonBossFightReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovPersonBoss(uint64(m.StageId))
	}
	return n
}

func (m *EnterPersonBossFightAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovPersonBoss(uint64(m.StageId))
	}
	if m.DareNum != 0 {
		n += 1 + sovPersonBoss(uint64(m.DareNum))
	}
	return n
}

func (m *PersonBossFightResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovPersonBoss(uint64(m.StageId))
	}
	if m.DareNum != 0 {
		n += 1 + sovPersonBoss(uint64(m.DareNum))
	}
	if m.Result != 0 {
		n += 1 + sovPersonBoss(uint64(m.Result))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovPersonBoss(uint64(l))
	}
	return n
}

func (m *PersonBossSweepReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovPersonBoss(uint64(m.StageId))
	}
	return n
}

func (m *PersonBossSweepAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovPersonBoss(uint64(m.StageId))
	}
	if m.DareNum != 0 {
		n += 1 + sovPersonBoss(uint64(m.DareNum))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovPersonBoss(uint64(l))
	}
	if m.IsBagFull != 0 {
		n += 1 + sovPersonBoss(uint64(m.IsBagFull))
	}
	return n
}

func (m *PersonBossDareNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovPersonBoss(uint64(m.StageId))
	}
	if m.DareNum != 0 {
		n += 1 + sovPersonBoss(uint64(m.DareNum))
	}
	return n
}

func sovPersonBoss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPersonBoss(x uint64) (n int) {
	return sovPersonBoss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PersonBossLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonBossLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonBossLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonBossLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonBossLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonBossLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PersonBoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PersonBoss == nil {
				m.PersonBoss = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPersonBoss
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPersonBoss
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPersonBoss(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPersonBoss
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PersonBoss[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterPersonBossFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterPersonBossFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterPersonBossFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterPersonBossFightAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterPersonBossFightAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterPersonBossFightAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonBossFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonBossFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonBossFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonBossSweepReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonBossSweepReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonBossSweepReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonBossSweepAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonBossSweepAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonBossSweepAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPersonBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBagFull", wireType)
			}
			m.IsBagFull = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBagFull |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersonBossDareNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersonBossDareNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersonBossDareNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPersonBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPersonBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPersonBoss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPersonBoss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPersonBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPersonBoss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPersonBoss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPersonBoss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPersonBoss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPersonBoss   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("personBoss.proto", fileDescriptorPersonBoss) }

var fileDescriptorPersonBoss = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xfd, 0x86, 0x7e, 0xc5, 0x78, 0x31, 0x11, 0x47, 0xa2, 0x13, 0x62, 0x1a, 0x32, 0x89, 0x49,
	0x57, 0x5d, 0xc0, 0xc6, 0x98, 0xb8, 0x10, 0x05, 0xa3, 0x51, 0x62, 0xea, 0x13, 0x14, 0x3a, 0x14,
	0x42, 0xe9, 0x94, 0xce, 0x54, 0xc3, 0x5b, 0xb0, 0xd4, 0x37, 0x72, 0xe9, 0x23, 0x18, 0x7c, 0x11,
	0xd3, 0x16, 0x1c, 0x02, 0xfe, 0x24, 0xdd, 0xf5, 0x9c, 0x7b, 0xcf, 0xe9, 0xb9, 0x27, 0x03, 0xe5,
	0x90, 0x45, 0x82, 0x07, 0x4d, 0x2e, 0x84, 0x15, 0x46, 0x5c, 0x72, 0x5c, 0x08, 0xbb, 0xd5, 0x9d,
	0x1e, 0x1f, 0x8f, 0x79, 0x90, 0x31, 0x74, 0x1f, 0xf6, 0xee, 0xbf, 0xb6, 0x6e, 0xb9, 0xe3, 0xda,
	0x6c, 0x42, 0x5f, 0xd0, 0x3a, 0x7b, 0xde, 0x1b, 0xe1, 0x16, 0x80, 0x22, 0x09, 0xaa, 0x69, 0x66,
	0xa9, 0x7e, 0x6c, 0x85, 0x5d, 0x6b, 0x63, 0x75, 0x85, 0x69, 0x05, 0x32, 0x9a, 0xda, 0x2b, 0xc2,
	0xea, 0x19, 0xec, 0xae, 0x8d, 0x71, 0x19, 0xb4, 0x11, 0x9b, 0x12, 0x54, 0x43, 0xa6, 0x6e, 0x27,
	0x9f, 0xb8, 0x02, 0xfa, 0xa3, 0xe3, 0xc7, 0x8c, 0x14, 0x52, 0x2e, 0x03, 0xa7, 0x85, 0x13, 0x44,
	0x1b, 0x70, 0xd8, 0x0a, 0x24, 0x8b, 0x94, 0x47, 0x7b, 0xe8, 0x0d, 0xa4, 0xcd, 0x26, 0x98, 0xc0,
	0x96, 0x90, 0x8e, 0xc7, 0xae, 0xdd, 0x85, 0xd5, 0x12, 0xd2, 0xbb, 0xef, 0x45, 0xc9, 0x55, 0x3f,
	0x8a, 0x92, 0x89, 0xeb, 0x44, 0xac, 0x13, 0x8f, 0x17, 0x29, 0x96, 0x90, 0xce, 0x10, 0x90, 0x8d,
	0xff, 0x8b, 0xd8, 0x97, 0x1d, 0xd9, 0xcf, 0x63, 0x88, 0x0f, 0xa0, 0x18, 0xa5, 0x06, 0x44, 0x4b,
	0x07, 0x0b, 0x84, 0x4d, 0xd0, 0x3d, 0xce, 0x5d, 0x41, 0xfe, 0xd7, 0x90, 0x59, 0xaa, 0xe3, 0xa4,
	0xed, 0xab, 0x84, 0xb8, 0x18, 0x38, 0x81, 0xc7, 0x3a, 0xb2, 0x6f, 0x67, 0x0b, 0xd4, 0x02, 0xac,
	0x12, 0x3d, 0x3c, 0x31, 0x16, 0xfe, 0xde, 0xc8, 0x0c, 0x6d, 0x08, 0x72, 0xb6, 0xa1, 0x42, 0x6a,
	0x7f, 0x84, 0xc4, 0x47, 0xb0, 0x3d, 0x14, 0x4d, 0xc7, 0x6b, 0xc7, 0xbe, 0x9f, 0x9e, 0xa4, 0xdb,
	0x8a, 0xa0, 0x37, 0x50, 0x51, 0x89, 0x2e, 0x33, 0xf3, 0x9c, 0x85, 0x36, 0xcb, 0xaf, 0x73, 0x03,
	0xbd, 0xcd, 0x0d, 0xf4, 0x3e, 0x37, 0xd0, 0xf3, 0x87, 0xf1, 0xaf, 0x5b, 0x4c, 0xdf, 0x7b, 0xe3,
	0x33, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x12, 0x4a, 0x58, 0x15, 0x03, 0x00, 0x00,
}
