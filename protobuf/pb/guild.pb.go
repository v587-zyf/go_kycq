// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guild.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GuildLoadInfoReq struct {
}

func (m *GuildLoadInfoReq) Reset()                    { *m = GuildLoadInfoReq{} }
func (m *GuildLoadInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GuildLoadInfoReq) ProtoMessage()               {}
func (*GuildLoadInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{0} }

type GuildLoadInfoAck struct {
	GuildInfo *GuildInfo `protobuf:"bytes,1,opt,name=guildInfo" json:"guildInfo,omitempty"`
}

func (m *GuildLoadInfoAck) Reset()                    { *m = GuildLoadInfoAck{} }
func (m *GuildLoadInfoAck) String() string            { return proto.CompactTextString(m) }
func (*GuildLoadInfoAck) ProtoMessage()               {}
func (*GuildLoadInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{1} }

func (m *GuildLoadInfoAck) GetGuildInfo() *GuildInfo {
	if m != nil {
		return m.GuildInfo
	}
	return nil
}

// 创建工会
type CreateGuildReq struct {
	GuildName string `protobuf:"bytes,1,opt,name=GuildName,proto3" json:"GuildName,omitempty"`
	GuildIcon string `protobuf:"bytes,2,opt,name=GuildIcon,proto3" json:"GuildIcon,omitempty"`
	Notice    string `protobuf:"bytes,3,opt,name=Notice,proto3" json:"Notice,omitempty"`
}

func (m *CreateGuildReq) Reset()                    { *m = CreateGuildReq{} }
func (m *CreateGuildReq) String() string            { return proto.CompactTextString(m) }
func (*CreateGuildReq) ProtoMessage()               {}
func (*CreateGuildReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{2} }

func (m *CreateGuildReq) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *CreateGuildReq) GetGuildIcon() string {
	if m != nil {
		return m.GuildIcon
	}
	return ""
}

func (m *CreateGuildReq) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

type CreateGuildAck struct {
	GuildInfo *GuildInfo `protobuf:"bytes,1,opt,name=guildInfo" json:"guildInfo,omitempty"`
	Success   bool       `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *CreateGuildAck) Reset()                    { *m = CreateGuildAck{} }
func (m *CreateGuildAck) String() string            { return proto.CompactTextString(m) }
func (*CreateGuildAck) ProtoMessage()               {}
func (*CreateGuildAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{3} }

func (m *CreateGuildAck) GetGuildInfo() *GuildInfo {
	if m != nil {
		return m.GuildInfo
	}
	return nil
}

func (m *CreateGuildAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 申请加入门派的战力限制
type JoinGuildCombatLimitReq struct {
	Combat  int64 `protobuf:"varint,1,opt,name=combat,proto3" json:"combat,omitempty"`
	IsAgree int32 `protobuf:"varint,2,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
}

func (m *JoinGuildCombatLimitReq) Reset()                    { *m = JoinGuildCombatLimitReq{} }
func (m *JoinGuildCombatLimitReq) String() string            { return proto.CompactTextString(m) }
func (*JoinGuildCombatLimitReq) ProtoMessage()               {}
func (*JoinGuildCombatLimitReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{4} }

func (m *JoinGuildCombatLimitReq) GetCombat() int64 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *JoinGuildCombatLimitReq) GetIsAgree() int32 {
	if m != nil {
		return m.IsAgree
	}
	return 0
}

type JoinGuildCombatLimitAck struct {
	Success     bool  `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	LimitCombat int64 `protobuf:"varint,2,opt,name=limitCombat,proto3" json:"limitCombat,omitempty"`
	IsAgree     int32 `protobuf:"varint,3,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
}

func (m *JoinGuildCombatLimitAck) Reset()                    { *m = JoinGuildCombatLimitAck{} }
func (m *JoinGuildCombatLimitAck) String() string            { return proto.CompactTextString(m) }
func (*JoinGuildCombatLimitAck) ProtoMessage()               {}
func (*JoinGuildCombatLimitAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{5} }

func (m *JoinGuildCombatLimitAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *JoinGuildCombatLimitAck) GetLimitCombat() int64 {
	if m != nil {
		return m.LimitCombat
	}
	return 0
}

func (m *JoinGuildCombatLimitAck) GetIsAgree() int32 {
	if m != nil {
		return m.IsAgree
	}
	return 0
}

// 修改公告
type ModifyBulletinReq struct {
	Content string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ModifyBulletinReq) Reset()                    { *m = ModifyBulletinReq{} }
func (m *ModifyBulletinReq) String() string            { return proto.CompactTextString(m) }
func (*ModifyBulletinReq) ProtoMessage()               {}
func (*ModifyBulletinReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{6} }

func (m *ModifyBulletinReq) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ModifyBulletinAck struct {
	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ModifyBulletinAck) Reset()                    { *m = ModifyBulletinAck{} }
func (m *ModifyBulletinAck) String() string            { return proto.CompactTextString(m) }
func (*ModifyBulletinAck) ProtoMessage()               {}
func (*ModifyBulletinAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{7} }

func (m *ModifyBulletinAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ModifyBulletinAck) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// 退出工会
type QuitGuildReq struct {
}

func (m *QuitGuildReq) Reset()                    { *m = QuitGuildReq{} }
func (m *QuitGuildReq) String() string            { return proto.CompactTextString(m) }
func (*QuitGuildReq) ProtoMessage()               {}
func (*QuitGuildReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{8} }

type QuitGuildAck struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *QuitGuildAck) Reset()                    { *m = QuitGuildAck{} }
func (m *QuitGuildAck) String() string            { return proto.CompactTextString(m) }
func (*QuitGuildAck) ProtoMessage()               {}
func (*QuitGuildAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{9} }

func (m *QuitGuildAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 踢出工会
type KickOutReq struct {
	KickUserId int32 `protobuf:"varint,1,opt,name=kickUserId,proto3" json:"kickUserId,omitempty"`
}

func (m *KickOutReq) Reset()                    { *m = KickOutReq{} }
func (m *KickOutReq) String() string            { return proto.CompactTextString(m) }
func (*KickOutReq) ProtoMessage()               {}
func (*KickOutReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{10} }

func (m *KickOutReq) GetKickUserId() int32 {
	if m != nil {
		return m.KickUserId
	}
	return 0
}

type KickOutAck struct {
	JoinCd     int32 `protobuf:"varint,1,opt,name=joinCd,proto3" json:"joinCd,omitempty"`
	KickUserId int32 `protobuf:"varint,2,opt,name=kickUserId,proto3" json:"kickUserId,omitempty"`
}

func (m *KickOutAck) Reset()                    { *m = KickOutAck{} }
func (m *KickOutAck) String() string            { return proto.CompactTextString(m) }
func (*KickOutAck) ProtoMessage()               {}
func (*KickOutAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{11} }

func (m *KickOutAck) GetJoinCd() int32 {
	if m != nil {
		return m.JoinCd
	}
	return 0
}

func (m *KickOutAck) GetKickUserId() int32 {
	if m != nil {
		return m.KickUserId
	}
	return 0
}

// 弹劾会长
type ImpeachPresidentReq struct {
}

func (m *ImpeachPresidentReq) Reset()                    { *m = ImpeachPresidentReq{} }
func (m *ImpeachPresidentReq) String() string            { return proto.CompactTextString(m) }
func (*ImpeachPresidentReq) ProtoMessage()               {}
func (*ImpeachPresidentReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{12} }

type ImpeachPresidentAck struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *ImpeachPresidentAck) Reset()                    { *m = ImpeachPresidentAck{} }
func (m *ImpeachPresidentAck) String() string            { return proto.CompactTextString(m) }
func (*ImpeachPresidentAck) ProtoMessage()               {}
func (*ImpeachPresidentAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{13} }

func (m *ImpeachPresidentAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 查看信息
type GuildCheckMemberInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *GuildCheckMemberInfoReq) Reset()                    { *m = GuildCheckMemberInfoReq{} }
func (m *GuildCheckMemberInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GuildCheckMemberInfoReq) ProtoMessage()               {}
func (*GuildCheckMemberInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{14} }

func (m *GuildCheckMemberInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GuildCheckMemberInfoAck struct {
	GuildInfo *GuildInfo `protobuf:"bytes,1,opt,name=guildInfo" json:"guildInfo,omitempty"`
}

func (m *GuildCheckMemberInfoAck) Reset()                    { *m = GuildCheckMemberInfoAck{} }
func (m *GuildCheckMemberInfoAck) String() string            { return proto.CompactTextString(m) }
func (*GuildCheckMemberInfoAck) ProtoMessage()               {}
func (*GuildCheckMemberInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{15} }

func (m *GuildCheckMemberInfoAck) GetGuildInfo() *GuildInfo {
	if m != nil {
		return m.GuildInfo
	}
	return nil
}

// 申请加工会
type ApplyJoinGuildReq struct {
	GuildId int32 `protobuf:"varint,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
}

func (m *ApplyJoinGuildReq) Reset()                    { *m = ApplyJoinGuildReq{} }
func (m *ApplyJoinGuildReq) String() string            { return proto.CompactTextString(m) }
func (*ApplyJoinGuildReq) ProtoMessage()               {}
func (*ApplyJoinGuildReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{16} }

func (m *ApplyJoinGuildReq) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

type ApplyJoinGuildAck struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *ApplyJoinGuildAck) Reset()                    { *m = ApplyJoinGuildAck{} }
func (m *ApplyJoinGuildAck) String() string            { return proto.CompactTextString(m) }
func (*ApplyJoinGuildAck) ProtoMessage()               {}
func (*ApplyJoinGuildAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{17} }

func (m *ApplyJoinGuildAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 任命
type GuildAssignReq struct {
	Id       int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Position int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *GuildAssignReq) Reset()                    { *m = GuildAssignReq{} }
func (m *GuildAssignReq) String() string            { return proto.CompactTextString(m) }
func (*GuildAssignReq) ProtoMessage()               {}
func (*GuildAssignReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{18} }

func (m *GuildAssignReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuildAssignReq) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type GuildAssignAck struct {
	Success       bool            `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	AssignUserId  int32           `protobuf:"varint,2,opt,name=assignUserId,proto3" json:"assignUserId,omitempty"`
	NowPosition   int32           `protobuf:"varint,3,opt,name=nowPosition,proto3" json:"nowPosition,omitempty"`
	PositionCount map[int32]int32 `protobuf:"bytes,4,rep,name=positionCount" json:"positionCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GuildAssignAck) Reset()                    { *m = GuildAssignAck{} }
func (m *GuildAssignAck) String() string            { return proto.CompactTextString(m) }
func (*GuildAssignAck) ProtoMessage()               {}
func (*GuildAssignAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{19} }

func (m *GuildAssignAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GuildAssignAck) GetAssignUserId() int32 {
	if m != nil {
		return m.AssignUserId
	}
	return 0
}

func (m *GuildAssignAck) GetNowPosition() int32 {
	if m != nil {
		return m.NowPosition
	}
	return 0
}

func (m *GuildAssignAck) GetPositionCount() map[int32]int32 {
	if m != nil {
		return m.PositionCount
	}
	return nil
}

// 工会列表
type AllGuildInfosReq struct {
}

func (m *AllGuildInfosReq) Reset()                    { *m = AllGuildInfosReq{} }
func (m *AllGuildInfosReq) String() string            { return proto.CompactTextString(m) }
func (*AllGuildInfosReq) ProtoMessage()               {}
func (*AllGuildInfosReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{20} }

type AllGuildInfosAck struct {
	GuildInfo []*GuildInfo `protobuf:"bytes,1,rep,name=guildInfo" json:"guildInfo,omitempty"`
}

func (m *AllGuildInfosAck) Reset()                    { *m = AllGuildInfosAck{} }
func (m *AllGuildInfosAck) String() string            { return proto.CompactTextString(m) }
func (*AllGuildInfosAck) ProtoMessage()               {}
func (*AllGuildInfosAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{21} }

func (m *AllGuildInfosAck) GetGuildInfo() []*GuildInfo {
	if m != nil {
		return m.GuildInfo
	}
	return nil
}

// 解散工会
type DissolveGuildReq struct {
}

func (m *DissolveGuildReq) Reset()                    { *m = DissolveGuildReq{} }
func (m *DissolveGuildReq) String() string            { return proto.CompactTextString(m) }
func (*DissolveGuildReq) ProtoMessage()               {}
func (*DissolveGuildReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{22} }

type DissolveGuildAck struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *DissolveGuildAck) Reset()                    { *m = DissolveGuildAck{} }
func (m *DissolveGuildAck) String() string            { return proto.CompactTextString(m) }
func (*DissolveGuildAck) ProtoMessage()               {}
func (*DissolveGuildAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{23} }

func (m *DissolveGuildAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 处理申请列表是否同意玩家加入门派
type JoinGuildDisposeReq struct {
	IsAgree     bool  `protobuf:"varint,1,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
	ApplyUserId int32 `protobuf:"varint,2,opt,name=applyUserId,proto3" json:"applyUserId,omitempty"`
}

func (m *JoinGuildDisposeReq) Reset()                    { *m = JoinGuildDisposeReq{} }
func (m *JoinGuildDisposeReq) String() string            { return proto.CompactTextString(m) }
func (*JoinGuildDisposeReq) ProtoMessage()               {}
func (*JoinGuildDisposeReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{24} }

func (m *JoinGuildDisposeReq) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

func (m *JoinGuildDisposeReq) GetApplyUserId() int32 {
	if m != nil {
		return m.ApplyUserId
	}
	return 0
}

type JoinGuildDisposeAck struct {
	Success         bool             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ApplyUserInfo   []*BriefUserInfo `protobuf:"bytes,2,rep,name=applyUserInfo" json:"applyUserInfo,omitempty"`
	IsHaveJoinGuild bool             `protobuf:"varint,3,opt,name=isHaveJoinGuild,proto3" json:"isHaveJoinGuild,omitempty"`
}

func (m *JoinGuildDisposeAck) Reset()                    { *m = JoinGuildDisposeAck{} }
func (m *JoinGuildDisposeAck) String() string            { return proto.CompactTextString(m) }
func (*JoinGuildDisposeAck) ProtoMessage()               {}
func (*JoinGuildDisposeAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{25} }

func (m *JoinGuildDisposeAck) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *JoinGuildDisposeAck) GetApplyUserInfo() []*BriefUserInfo {
	if m != nil {
		return m.ApplyUserInfo
	}
	return nil
}

func (m *JoinGuildDisposeAck) GetIsHaveJoinGuild() bool {
	if m != nil {
		return m.IsHaveJoinGuild
	}
	return false
}

// 门派申请加入列表
type GetApplyUserListReq struct {
}

func (m *GetApplyUserListReq) Reset()                    { *m = GetApplyUserListReq{} }
func (m *GetApplyUserListReq) String() string            { return proto.CompactTextString(m) }
func (*GetApplyUserListReq) ProtoMessage()               {}
func (*GetApplyUserListReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{26} }

type GetApplyUserListAck struct {
	ApplyUserInfo []*BriefUserInfo `protobuf:"bytes,1,rep,name=applyUserInfo" json:"applyUserInfo,omitempty"`
}

func (m *GetApplyUserListAck) Reset()                    { *m = GetApplyUserListAck{} }
func (m *GetApplyUserListAck) String() string            { return proto.CompactTextString(m) }
func (*GetApplyUserListAck) ProtoMessage()               {}
func (*GetApplyUserListAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{27} }

func (m *GetApplyUserListAck) GetApplyUserInfo() []*BriefUserInfo {
	if m != nil {
		return m.ApplyUserInfo
	}
	return nil
}

type GuildInfo struct {
	GuildId                int32              `protobuf:"varint,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	GuildName              string             `protobuf:"bytes,2,opt,name=GuildName,proto3" json:"GuildName,omitempty"`
	GuildLv                int32              `protobuf:"varint,3,opt,name=guildLv,proto3" json:"guildLv,omitempty"`
	JoinCd                 int32              `protobuf:"varint,4,opt,name=joinCd,proto3" json:"joinCd,omitempty"`
	GuildMenberInfo        []*GuildMenberInfo `protobuf:"bytes,5,rep,name=guildMenberInfo" json:"guildMenberInfo,omitempty"`
	Notice                 string             `protobuf:"bytes,6,opt,name=notice,proto3" json:"notice,omitempty"`
	Combat                 int64              `protobuf:"varint,8,opt,name=combat,proto3" json:"combat,omitempty"`
	IsAutoAgree            int32              `protobuf:"varint,9,opt,name=isAutoAgree,proto3" json:"isAutoAgree,omitempty"`
	PositionCount          map[int32]int32    `protobuf:"bytes,10,rep,name=positionCount" json:"positionCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	OnlineUser             int32              `protobuf:"varint,11,opt,name=onlineUser,proto3" json:"onlineUser,omitempty"`
	GuildContributionValue int32              `protobuf:"varint,12,opt,name=GuildContributionValue,proto3" json:"GuildContributionValue,omitempty"`
	ServerId               int32              `protobuf:"varint,13,opt,name=serverId,proto3" json:"serverId,omitempty"`
	GuildPeopleNum         int32              `protobuf:"varint,14,opt,name=guildPeopleNum,proto3" json:"guildPeopleNum,omitempty"`
	HuiZhangLv             int32              `protobuf:"varint,15,opt,name=huiZhangLv,proto3" json:"huiZhangLv,omitempty"`
	HuiZhangName           string             `protobuf:"bytes,16,opt,name=huiZhangName,proto3" json:"huiZhangName,omitempty"`
}

func (m *GuildInfo) Reset()                    { *m = GuildInfo{} }
func (m *GuildInfo) String() string            { return proto.CompactTextString(m) }
func (*GuildInfo) ProtoMessage()               {}
func (*GuildInfo) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{28} }

func (m *GuildInfo) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *GuildInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *GuildInfo) GetGuildLv() int32 {
	if m != nil {
		return m.GuildLv
	}
	return 0
}

func (m *GuildInfo) GetJoinCd() int32 {
	if m != nil {
		return m.JoinCd
	}
	return 0
}

func (m *GuildInfo) GetGuildMenberInfo() []*GuildMenberInfo {
	if m != nil {
		return m.GuildMenberInfo
	}
	return nil
}

func (m *GuildInfo) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

func (m *GuildInfo) GetCombat() int64 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *GuildInfo) GetIsAutoAgree() int32 {
	if m != nil {
		return m.IsAutoAgree
	}
	return 0
}

func (m *GuildInfo) GetPositionCount() map[int32]int32 {
	if m != nil {
		return m.PositionCount
	}
	return nil
}

func (m *GuildInfo) GetOnlineUser() int32 {
	if m != nil {
		return m.OnlineUser
	}
	return 0
}

func (m *GuildInfo) GetGuildContributionValue() int32 {
	if m != nil {
		return m.GuildContributionValue
	}
	return 0
}

func (m *GuildInfo) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GuildInfo) GetGuildPeopleNum() int32 {
	if m != nil {
		return m.GuildPeopleNum
	}
	return 0
}

func (m *GuildInfo) GetHuiZhangLv() int32 {
	if m != nil {
		return m.HuiZhangLv
	}
	return 0
}

func (m *GuildInfo) GetHuiZhangName() string {
	if m != nil {
		return m.HuiZhangName
	}
	return ""
}

type GuildMenberInfo struct {
	UserId            int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Position          int32  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	OfflineTime       int32  `protobuf:"varint,3,opt,name=offlineTime,proto3" json:"offlineTime,omitempty"`
	GuildCapital      int32  `protobuf:"varint,4,opt,name=guildCapital,proto3" json:"guildCapital,omitempty"`
	GuildContribution int32  `protobuf:"varint,5,opt,name=guildContribution,proto3" json:"guildContribution,omitempty"`
	NickName          string `protobuf:"bytes,6,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Avatar            string `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Lv                int32  `protobuf:"varint,8,opt,name=lv,proto3" json:"lv,omitempty"`
	Combat            int32  `protobuf:"varint,9,opt,name=combat,proto3" json:"combat,omitempty"`
	Job               int32  `protobuf:"varint,10,opt,name=job,proto3" json:"job,omitempty"`
	Sex               int32  `protobuf:"varint,11,opt,name=sex,proto3" json:"sex,omitempty"`
}

func (m *GuildMenberInfo) Reset()                    { *m = GuildMenberInfo{} }
func (m *GuildMenberInfo) String() string            { return proto.CompactTextString(m) }
func (*GuildMenberInfo) ProtoMessage()               {}
func (*GuildMenberInfo) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{29} }

func (m *GuildMenberInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GuildMenberInfo) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *GuildMenberInfo) GetOfflineTime() int32 {
	if m != nil {
		return m.OfflineTime
	}
	return 0
}

func (m *GuildMenberInfo) GetGuildCapital() int32 {
	if m != nil {
		return m.GuildCapital
	}
	return 0
}

func (m *GuildMenberInfo) GetGuildContribution() int32 {
	if m != nil {
		return m.GuildContribution
	}
	return 0
}

func (m *GuildMenberInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *GuildMenberInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *GuildMenberInfo) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *GuildMenberInfo) GetCombat() int32 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *GuildMenberInfo) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

func (m *GuildMenberInfo) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

type JoinGuildSuccessNtf struct {
	UserId  int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	GuildId int32 `protobuf:"varint,2,opt,name=guildId,proto3" json:"guildId,omitempty"`
	Success bool  `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *JoinGuildSuccessNtf) Reset()                    { *m = JoinGuildSuccessNtf{} }
func (m *JoinGuildSuccessNtf) String() string            { return proto.CompactTextString(m) }
func (*JoinGuildSuccessNtf) ProtoMessage()               {}
func (*JoinGuildSuccessNtf) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{30} }

func (m *JoinGuildSuccessNtf) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *JoinGuildSuccessNtf) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *JoinGuildSuccessNtf) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 一键处理申请列表是否同意玩家加入门派
type AllJoinGuildDisposeReq struct {
	IsAgree bool `protobuf:"varint,1,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
}

func (m *AllJoinGuildDisposeReq) Reset()                    { *m = AllJoinGuildDisposeReq{} }
func (m *AllJoinGuildDisposeReq) String() string            { return proto.CompactTextString(m) }
func (*AllJoinGuildDisposeReq) ProtoMessage()               {}
func (*AllJoinGuildDisposeReq) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{31} }

func (m *AllJoinGuildDisposeReq) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

type AllJoinGuildDisposeAck struct {
	ApplyUserInfo []*BriefUserInfo `protobuf:"bytes,2,rep,name=applyUserInfo" json:"applyUserInfo,omitempty"`
	IsFullState   bool             `protobuf:"varint,3,opt,name=isFullState,proto3" json:"isFullState,omitempty"`
}

func (m *AllJoinGuildDisposeAck) Reset()                    { *m = AllJoinGuildDisposeAck{} }
func (m *AllJoinGuildDisposeAck) String() string            { return proto.CompactTextString(m) }
func (*AllJoinGuildDisposeAck) ProtoMessage()               {}
func (*AllJoinGuildDisposeAck) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{32} }

func (m *AllJoinGuildDisposeAck) GetApplyUserInfo() []*BriefUserInfo {
	if m != nil {
		return m.ApplyUserInfo
	}
	return nil
}

func (m *AllJoinGuildDisposeAck) GetIsFullState() bool {
	if m != nil {
		return m.IsFullState
	}
	return false
}

type ApplyJoinGuildReDotNtf struct {
}

func (m *ApplyJoinGuildReDotNtf) Reset()                    { *m = ApplyJoinGuildReDotNtf{} }
func (m *ApplyJoinGuildReDotNtf) String() string            { return proto.CompactTextString(m) }
func (*ApplyJoinGuildReDotNtf) ProtoMessage()               {}
func (*ApplyJoinGuildReDotNtf) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{33} }

// 弹劾会长成功后广播
type ImpeachPresidentNtf struct {
	NewHuiZhangUserId int32 `protobuf:"varint,1,opt,name=newHuiZhangUserId,proto3" json:"newHuiZhangUserId,omitempty"`
	NowPosition       int32 `protobuf:"varint,2,opt,name=nowPosition,proto3" json:"nowPosition,omitempty"`
	OldHuiZhangUserId int32 `protobuf:"varint,3,opt,name=oldHuiZhangUserId,proto3" json:"oldHuiZhangUserId,omitempty"`
	NowPosition1      int32 `protobuf:"varint,4,opt,name=nowPosition1,proto3" json:"nowPosition1,omitempty"`
}

func (m *ImpeachPresidentNtf) Reset()                    { *m = ImpeachPresidentNtf{} }
func (m *ImpeachPresidentNtf) String() string            { return proto.CompactTextString(m) }
func (*ImpeachPresidentNtf) ProtoMessage()               {}
func (*ImpeachPresidentNtf) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{34} }

func (m *ImpeachPresidentNtf) GetNewHuiZhangUserId() int32 {
	if m != nil {
		return m.NewHuiZhangUserId
	}
	return 0
}

func (m *ImpeachPresidentNtf) GetNowPosition() int32 {
	if m != nil {
		return m.NowPosition
	}
	return 0
}

func (m *ImpeachPresidentNtf) GetOldHuiZhangUserId() int32 {
	if m != nil {
		return m.OldHuiZhangUserId
	}
	return 0
}

func (m *ImpeachPresidentNtf) GetNowPosition1() int32 {
	if m != nil {
		return m.NowPosition1
	}
	return 0
}

type BroadcastGuildChangeNtf struct {
	Types           int32              `protobuf:"varint,1,opt,name=types,proto3" json:"types,omitempty"`
	UserInfos       []int32            `protobuf:"varint,2,rep,packed,name=userInfos" json:"userInfos,omitempty"`
	PositionCount   map[int32]int32    `protobuf:"bytes,4,rep,name=positionCount" json:"positionCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GuildMenberInfo []*GuildMenberInfo `protobuf:"bytes,5,rep,name=guildMenberInfo" json:"guildMenberInfo,omitempty"`
}

func (m *BroadcastGuildChangeNtf) Reset()                    { *m = BroadcastGuildChangeNtf{} }
func (m *BroadcastGuildChangeNtf) String() string            { return proto.CompactTextString(m) }
func (*BroadcastGuildChangeNtf) ProtoMessage()               {}
func (*BroadcastGuildChangeNtf) Descriptor() ([]byte, []int) { return fileDescriptorGuild, []int{35} }

func (m *BroadcastGuildChangeNtf) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *BroadcastGuildChangeNtf) GetUserInfos() []int32 {
	if m != nil {
		return m.UserInfos
	}
	return nil
}

func (m *BroadcastGuildChangeNtf) GetPositionCount() map[int32]int32 {
	if m != nil {
		return m.PositionCount
	}
	return nil
}

func (m *BroadcastGuildChangeNtf) GetGuildMenberInfo() []*GuildMenberInfo {
	if m != nil {
		return m.GuildMenberInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*GuildLoadInfoReq)(nil), "pb.GuildLoadInfoReq")
	proto.RegisterType((*GuildLoadInfoAck)(nil), "pb.GuildLoadInfoAck")
	proto.RegisterType((*CreateGuildReq)(nil), "pb.CreateGuildReq")
	proto.RegisterType((*CreateGuildAck)(nil), "pb.CreateGuildAck")
	proto.RegisterType((*JoinGuildCombatLimitReq)(nil), "pb.JoinGuildCombatLimitReq")
	proto.RegisterType((*JoinGuildCombatLimitAck)(nil), "pb.JoinGuildCombatLimitAck")
	proto.RegisterType((*ModifyBulletinReq)(nil), "pb.ModifyBulletinReq")
	proto.RegisterType((*ModifyBulletinAck)(nil), "pb.ModifyBulletinAck")
	proto.RegisterType((*QuitGuildReq)(nil), "pb.QuitGuildReq")
	proto.RegisterType((*QuitGuildAck)(nil), "pb.QuitGuildAck")
	proto.RegisterType((*KickOutReq)(nil), "pb.KickOutReq")
	proto.RegisterType((*KickOutAck)(nil), "pb.KickOutAck")
	proto.RegisterType((*ImpeachPresidentReq)(nil), "pb.ImpeachPresidentReq")
	proto.RegisterType((*ImpeachPresidentAck)(nil), "pb.ImpeachPresidentAck")
	proto.RegisterType((*GuildCheckMemberInfoReq)(nil), "pb.GuildCheckMemberInfoReq")
	proto.RegisterType((*GuildCheckMemberInfoAck)(nil), "pb.GuildCheckMemberInfoAck")
	proto.RegisterType((*ApplyJoinGuildReq)(nil), "pb.ApplyJoinGuildReq")
	proto.RegisterType((*ApplyJoinGuildAck)(nil), "pb.ApplyJoinGuildAck")
	proto.RegisterType((*GuildAssignReq)(nil), "pb.GuildAssignReq")
	proto.RegisterType((*GuildAssignAck)(nil), "pb.GuildAssignAck")
	proto.RegisterType((*AllGuildInfosReq)(nil), "pb.AllGuildInfosReq")
	proto.RegisterType((*AllGuildInfosAck)(nil), "pb.AllGuildInfosAck")
	proto.RegisterType((*DissolveGuildReq)(nil), "pb.DissolveGuildReq")
	proto.RegisterType((*DissolveGuildAck)(nil), "pb.DissolveGuildAck")
	proto.RegisterType((*JoinGuildDisposeReq)(nil), "pb.JoinGuildDisposeReq")
	proto.RegisterType((*JoinGuildDisposeAck)(nil), "pb.JoinGuildDisposeAck")
	proto.RegisterType((*GetApplyUserListReq)(nil), "pb.GetApplyUserListReq")
	proto.RegisterType((*GetApplyUserListAck)(nil), "pb.GetApplyUserListAck")
	proto.RegisterType((*GuildInfo)(nil), "pb.GuildInfo")
	proto.RegisterType((*GuildMenberInfo)(nil), "pb.GuildMenberInfo")
	proto.RegisterType((*JoinGuildSuccessNtf)(nil), "pb.JoinGuildSuccessNtf")
	proto.RegisterType((*AllJoinGuildDisposeReq)(nil), "pb.AllJoinGuildDisposeReq")
	proto.RegisterType((*AllJoinGuildDisposeAck)(nil), "pb.AllJoinGuildDisposeAck")
	proto.RegisterType((*ApplyJoinGuildReDotNtf)(nil), "pb.ApplyJoinGuildReDotNtf")
	proto.RegisterType((*ImpeachPresidentNtf)(nil), "pb.ImpeachPresidentNtf")
	proto.RegisterType((*BroadcastGuildChangeNtf)(nil), "pb.BroadcastGuildChangeNtf")
}
func (m *GuildLoadInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildLoadInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GuildLoadInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildLoadInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildInfo.Size()))
		n1, err := m.GuildInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CreateGuildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuildReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if len(m.GuildIcon) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildIcon)))
		i += copy(dAtA[i:], m.GuildIcon)
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	return i, nil
}

func (m *CreateGuildAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuildAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildInfo.Size()))
		n2, err := m.GuildInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Success {
		dAtA[i] = 0x10
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JoinGuildCombatLimitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildCombatLimitReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Combat != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Combat))
	}
	if m.IsAgree != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.IsAgree))
	}
	return i, nil
}

func (m *JoinGuildCombatLimitAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildCombatLimitAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LimitCombat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.LimitCombat))
	}
	if m.IsAgree != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.IsAgree))
	}
	return i, nil
}

func (m *ModifyBulletinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyBulletinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *ModifyBulletinAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyBulletinAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *QuitGuildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuitGuildReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QuitGuildAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuitGuildAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KickOutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOutReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KickUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.KickUserId))
	}
	return i, nil
}

func (m *KickOutAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KickOutAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JoinCd != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.JoinCd))
	}
	if m.KickUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.KickUserId))
	}
	return i, nil
}

func (m *ImpeachPresidentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpeachPresidentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ImpeachPresidentAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpeachPresidentAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GuildCheckMemberInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildCheckMemberInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *GuildCheckMemberInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildCheckMemberInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildInfo.Size()))
		n3, err := m.GuildInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ApplyJoinGuildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyJoinGuildReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildId))
	}
	return i, nil
}

func (m *ApplyJoinGuildAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyJoinGuildAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GuildAssignReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildAssignReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Id))
	}
	if m.Position != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Position))
	}
	return i, nil
}

func (m *GuildAssignAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildAssignAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AssignUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.AssignUserId))
	}
	if m.NowPosition != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NowPosition))
	}
	if len(m.PositionCount) > 0 {
		for k, _ := range m.PositionCount {
			dAtA[i] = 0x22
			i++
			v := m.PositionCount[k]
			mapSize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *AllGuildInfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGuildInfosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AllGuildInfosAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGuildInfosAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GuildInfo) > 0 {
		for _, msg := range m.GuildInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DissolveGuildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DissolveGuildReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DissolveGuildAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DissolveGuildAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *JoinGuildDisposeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildDisposeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAgree {
		dAtA[i] = 0x8
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ApplyUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ApplyUserId))
	}
	return i, nil
}

func (m *JoinGuildDisposeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildDisposeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ApplyUserInfo) > 0 {
		for _, msg := range m.ApplyUserInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsHaveJoinGuild {
		dAtA[i] = 0x18
		i++
		if m.IsHaveJoinGuild {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetApplyUserListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplyUserListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetApplyUserListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetApplyUserListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, msg := range m.ApplyUserInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuildInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildId))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if m.GuildLv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildLv))
	}
	if m.JoinCd != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.JoinCd))
	}
	if len(m.GuildMenberInfo) > 0 {
		for _, msg := range m.GuildMenberInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Notice) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Notice)))
		i += copy(dAtA[i:], m.Notice)
	}
	if m.Combat != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Combat))
	}
	if m.IsAutoAgree != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.IsAutoAgree))
	}
	if len(m.PositionCount) > 0 {
		for k, _ := range m.PositionCount {
			dAtA[i] = 0x52
			i++
			v := m.PositionCount[k]
			mapSize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(v))
		}
	}
	if m.OnlineUser != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.OnlineUser))
	}
	if m.GuildContributionValue != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildContributionValue))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.ServerId))
	}
	if m.GuildPeopleNum != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildPeopleNum))
	}
	if m.HuiZhangLv != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.HuiZhangLv))
	}
	if len(m.HuiZhangName) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.HuiZhangName)))
		i += copy(dAtA[i:], m.HuiZhangName)
	}
	return i, nil
}

func (m *GuildMenberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildMenberInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UserId))
	}
	if m.Position != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Position))
	}
	if m.OfflineTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.OfflineTime))
	}
	if m.GuildCapital != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildCapital))
	}
	if m.GuildContribution != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildContribution))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGuild(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.Lv != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Lv))
	}
	if m.Combat != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Combat))
	}
	if m.Job != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Job))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Sex))
	}
	return i, nil
}

func (m *JoinGuildSuccessNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinGuildSuccessNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.UserId))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.GuildId))
	}
	if m.Success {
		dAtA[i] = 0x18
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AllJoinGuildDisposeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllJoinGuildDisposeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAgree {
		dAtA[i] = 0x8
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *AllJoinGuildDisposeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllJoinGuildDisposeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, msg := range m.ApplyUserInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsFullState {
		dAtA[i] = 0x18
		i++
		if m.IsFullState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ApplyJoinGuildReDotNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyJoinGuildReDotNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ImpeachPresidentNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImpeachPresidentNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NewHuiZhangUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NewHuiZhangUserId))
	}
	if m.NowPosition != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NowPosition))
	}
	if m.OldHuiZhangUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.OldHuiZhangUserId))
	}
	if m.NowPosition1 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.NowPosition1))
	}
	return i, nil
}

func (m *BroadcastGuildChangeNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastGuildChangeNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Types != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuild(dAtA, i, uint64(m.Types))
	}
	if len(m.UserInfos) > 0 {
		dAtA5 := make([]byte, len(m.UserInfos)*10)
		var j4 int
		for _, num1 := range m.UserInfos {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuild(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.PositionCount) > 0 {
		for k, _ := range m.PositionCount {
			dAtA[i] = 0x22
			i++
			v := m.PositionCount[k]
			mapSize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			i = encodeVarintGuild(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGuild(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGuild(dAtA, i, uint64(v))
		}
	}
	if len(m.GuildMenberInfo) > 0 {
		for _, msg := range m.GuildMenberInfo {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintGuild(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintGuild(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GuildLoadInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GuildLoadInfoAck) Size() (n int) {
	var l int
	_ = l
	if m.GuildInfo != nil {
		l = m.GuildInfo.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *CreateGuildReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.GuildIcon)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *CreateGuildAck) Size() (n int) {
	var l int
	_ = l
	if m.GuildInfo != nil {
		l = m.GuildInfo.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *JoinGuildCombatLimitReq) Size() (n int) {
	var l int
	_ = l
	if m.Combat != 0 {
		n += 1 + sovGuild(uint64(m.Combat))
	}
	if m.IsAgree != 0 {
		n += 1 + sovGuild(uint64(m.IsAgree))
	}
	return n
}

func (m *JoinGuildCombatLimitAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.LimitCombat != 0 {
		n += 1 + sovGuild(uint64(m.LimitCombat))
	}
	if m.IsAgree != 0 {
		n += 1 + sovGuild(uint64(m.IsAgree))
	}
	return n
}

func (m *ModifyBulletinReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *ModifyBulletinAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *QuitGuildReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QuitGuildAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *KickOutReq) Size() (n int) {
	var l int
	_ = l
	if m.KickUserId != 0 {
		n += 1 + sovGuild(uint64(m.KickUserId))
	}
	return n
}

func (m *KickOutAck) Size() (n int) {
	var l int
	_ = l
	if m.JoinCd != 0 {
		n += 1 + sovGuild(uint64(m.JoinCd))
	}
	if m.KickUserId != 0 {
		n += 1 + sovGuild(uint64(m.KickUserId))
	}
	return n
}

func (m *ImpeachPresidentReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ImpeachPresidentAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *GuildCheckMemberInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovGuild(uint64(m.UserId))
	}
	return n
}

func (m *GuildCheckMemberInfoAck) Size() (n int) {
	var l int
	_ = l
	if m.GuildInfo != nil {
		l = m.GuildInfo.Size()
		n += 1 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *ApplyJoinGuildReq) Size() (n int) {
	var l int
	_ = l
	if m.GuildId != 0 {
		n += 1 + sovGuild(uint64(m.GuildId))
	}
	return n
}

func (m *ApplyJoinGuildAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *GuildAssignReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuild(uint64(m.Id))
	}
	if m.Position != 0 {
		n += 1 + sovGuild(uint64(m.Position))
	}
	return n
}

func (m *GuildAssignAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.AssignUserId != 0 {
		n += 1 + sovGuild(uint64(m.AssignUserId))
	}
	if m.NowPosition != 0 {
		n += 1 + sovGuild(uint64(m.NowPosition))
	}
	if len(m.PositionCount) > 0 {
		for k, v := range m.PositionCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AllGuildInfosReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AllGuildInfosAck) Size() (n int) {
	var l int
	_ = l
	if len(m.GuildInfo) > 0 {
		for _, e := range m.GuildInfo {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *DissolveGuildReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DissolveGuildAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *JoinGuildDisposeReq) Size() (n int) {
	var l int
	_ = l
	if m.IsAgree {
		n += 2
	}
	if m.ApplyUserId != 0 {
		n += 1 + sovGuild(uint64(m.ApplyUserId))
	}
	return n
}

func (m *JoinGuildDisposeAck) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if len(m.ApplyUserInfo) > 0 {
		for _, e := range m.ApplyUserInfo {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.IsHaveJoinGuild {
		n += 2
	}
	return n
}

func (m *GetApplyUserListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetApplyUserListAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, e := range m.ApplyUserInfo {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func (m *GuildInfo) Size() (n int) {
	var l int
	_ = l
	if m.GuildId != 0 {
		n += 1 + sovGuild(uint64(m.GuildId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.GuildLv != 0 {
		n += 1 + sovGuild(uint64(m.GuildLv))
	}
	if m.JoinCd != 0 {
		n += 1 + sovGuild(uint64(m.JoinCd))
	}
	if len(m.GuildMenberInfo) > 0 {
		for _, e := range m.GuildMenberInfo {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	l = len(m.Notice)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Combat != 0 {
		n += 1 + sovGuild(uint64(m.Combat))
	}
	if m.IsAutoAgree != 0 {
		n += 1 + sovGuild(uint64(m.IsAutoAgree))
	}
	if len(m.PositionCount) > 0 {
		for k, v := range m.PositionCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if m.OnlineUser != 0 {
		n += 1 + sovGuild(uint64(m.OnlineUser))
	}
	if m.GuildContributionValue != 0 {
		n += 1 + sovGuild(uint64(m.GuildContributionValue))
	}
	if m.ServerId != 0 {
		n += 1 + sovGuild(uint64(m.ServerId))
	}
	if m.GuildPeopleNum != 0 {
		n += 1 + sovGuild(uint64(m.GuildPeopleNum))
	}
	if m.HuiZhangLv != 0 {
		n += 1 + sovGuild(uint64(m.HuiZhangLv))
	}
	l = len(m.HuiZhangName)
	if l > 0 {
		n += 2 + l + sovGuild(uint64(l))
	}
	return n
}

func (m *GuildMenberInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovGuild(uint64(m.UserId))
	}
	if m.Position != 0 {
		n += 1 + sovGuild(uint64(m.Position))
	}
	if m.OfflineTime != 0 {
		n += 1 + sovGuild(uint64(m.OfflineTime))
	}
	if m.GuildCapital != 0 {
		n += 1 + sovGuild(uint64(m.GuildCapital))
	}
	if m.GuildContribution != 0 {
		n += 1 + sovGuild(uint64(m.GuildContribution))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovGuild(uint64(l))
	}
	if m.Lv != 0 {
		n += 1 + sovGuild(uint64(m.Lv))
	}
	if m.Combat != 0 {
		n += 1 + sovGuild(uint64(m.Combat))
	}
	if m.Job != 0 {
		n += 1 + sovGuild(uint64(m.Job))
	}
	if m.Sex != 0 {
		n += 1 + sovGuild(uint64(m.Sex))
	}
	return n
}

func (m *JoinGuildSuccessNtf) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovGuild(uint64(m.UserId))
	}
	if m.GuildId != 0 {
		n += 1 + sovGuild(uint64(m.GuildId))
	}
	if m.Success {
		n += 2
	}
	return n
}

func (m *AllJoinGuildDisposeReq) Size() (n int) {
	var l int
	_ = l
	if m.IsAgree {
		n += 2
	}
	return n
}

func (m *AllJoinGuildDisposeAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, e := range m.ApplyUserInfo {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	if m.IsFullState {
		n += 2
	}
	return n
}

func (m *ApplyJoinGuildReDotNtf) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ImpeachPresidentNtf) Size() (n int) {
	var l int
	_ = l
	if m.NewHuiZhangUserId != 0 {
		n += 1 + sovGuild(uint64(m.NewHuiZhangUserId))
	}
	if m.NowPosition != 0 {
		n += 1 + sovGuild(uint64(m.NowPosition))
	}
	if m.OldHuiZhangUserId != 0 {
		n += 1 + sovGuild(uint64(m.OldHuiZhangUserId))
	}
	if m.NowPosition1 != 0 {
		n += 1 + sovGuild(uint64(m.NowPosition1))
	}
	return n
}

func (m *BroadcastGuildChangeNtf) Size() (n int) {
	var l int
	_ = l
	if m.Types != 0 {
		n += 1 + sovGuild(uint64(m.Types))
	}
	if len(m.UserInfos) > 0 {
		l = 0
		for _, e := range m.UserInfos {
			l += sovGuild(uint64(e))
		}
		n += 1 + sovGuild(uint64(l)) + l
	}
	if len(m.PositionCount) > 0 {
		for k, v := range m.PositionCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGuild(uint64(k)) + 1 + sovGuild(uint64(v))
			n += mapEntrySize + 1 + sovGuild(uint64(mapEntrySize))
		}
	}
	if len(m.GuildMenberInfo) > 0 {
		for _, e := range m.GuildMenberInfo {
			l = e.Size()
			n += 1 + l + sovGuild(uint64(l))
		}
	}
	return n
}

func sovGuild(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuild(x uint64) (n int) {
	return sovGuild(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildLoadInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildLoadInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildLoadInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildLoadInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildLoadInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildLoadInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuildInfo == nil {
				m.GuildInfo = &GuildInfo{}
			}
			if err := m.GuildInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildIcon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildIcon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuildAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuildAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuildAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuildInfo == nil {
				m.GuildInfo = &GuildInfo{}
			}
			if err := m.GuildInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildCombatLimitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildCombatLimitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildCombatLimitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			m.IsAgree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAgree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildCombatLimitAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildCombatLimitAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildCombatLimitAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitCombat", wireType)
			}
			m.LimitCombat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitCombat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			m.IsAgree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAgree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyBulletinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyBulletinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyBulletinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyBulletinAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyBulletinAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyBulletinAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuitGuildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitGuildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitGuildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuitGuildAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuitGuildAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuitGuildAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickOutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickUserId", wireType)
			}
			m.KickUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KickOutAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KickOutAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KickOutAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinCd", wireType)
			}
			m.JoinCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KickUserId", wireType)
			}
			m.KickUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KickUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpeachPresidentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpeachPresidentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpeachPresidentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpeachPresidentAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpeachPresidentAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpeachPresidentAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildCheckMemberInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildCheckMemberInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildCheckMemberInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildCheckMemberInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildCheckMemberInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildCheckMemberInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuildInfo == nil {
				m.GuildInfo = &GuildInfo{}
			}
			if err := m.GuildInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyJoinGuildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyJoinGuildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyJoinGuildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyJoinGuildAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyJoinGuildAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyJoinGuildAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildAssignReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildAssignReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildAssignReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildAssignAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildAssignAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildAssignAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignUserId", wireType)
			}
			m.AssignUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowPosition", wireType)
			}
			m.NowPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionCount == nil {
				m.PositionCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PositionCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllGuildInfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGuildInfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGuildInfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllGuildInfosAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGuildInfosAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGuildInfosAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildInfo = append(m.GuildInfo, &GuildInfo{})
			if err := m.GuildInfo[len(m.GuildInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DissolveGuildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DissolveGuildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DissolveGuildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DissolveGuildAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DissolveGuildAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DissolveGuildAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildDisposeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildDisposeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildDisposeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserId", wireType)
			}
			m.ApplyUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildDisposeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildDisposeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildDisposeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyUserInfo = append(m.ApplyUserInfo, &BriefUserInfo{})
			if err := m.ApplyUserInfo[len(m.ApplyUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHaveJoinGuild", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHaveJoinGuild = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplyUserListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplyUserListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplyUserListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetApplyUserListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetApplyUserListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetApplyUserListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyUserInfo = append(m.ApplyUserInfo, &BriefUserInfo{})
			if err := m.ApplyUserInfo[len(m.ApplyUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildLv", wireType)
			}
			m.GuildLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinCd", wireType)
			}
			m.JoinCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMenberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildMenberInfo = append(m.GuildMenberInfo, &GuildMenberInfo{})
			if err := m.GuildMenberInfo[len(m.GuildMenberInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoAgree", wireType)
			}
			m.IsAutoAgree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAutoAgree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionCount == nil {
				m.PositionCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PositionCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlineUser", wireType)
			}
			m.OnlineUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnlineUser |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildContributionValue", wireType)
			}
			m.GuildContributionValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildContributionValue |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildPeopleNum", wireType)
			}
			m.GuildPeopleNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildPeopleNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HuiZhangLv", wireType)
			}
			m.HuiZhangLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HuiZhangLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HuiZhangName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HuiZhangName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildMenberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildMenberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildMenberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTime", wireType)
			}
			m.OfflineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildCapital", wireType)
			}
			m.GuildCapital = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildCapital |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildContribution", wireType)
			}
			m.GuildContribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildContribution |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinGuildSuccessNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinGuildSuccessNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinGuildSuccessNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllJoinGuildDisposeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllJoinGuildDisposeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllJoinGuildDisposeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllJoinGuildDisposeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllJoinGuildDisposeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllJoinGuildDisposeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyUserInfo = append(m.ApplyUserInfo, &BriefUserInfo{})
			if err := m.ApplyUserInfo[len(m.ApplyUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFullState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFullState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyJoinGuildReDotNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyJoinGuildReDotNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyJoinGuildReDotNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImpeachPresidentNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImpeachPresidentNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImpeachPresidentNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewHuiZhangUserId", wireType)
			}
			m.NewHuiZhangUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewHuiZhangUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowPosition", wireType)
			}
			m.NowPosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowPosition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldHuiZhangUserId", wireType)
			}
			m.OldHuiZhangUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldHuiZhangUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowPosition1", wireType)
			}
			m.NowPosition1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowPosition1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastGuildChangeNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastGuildChangeNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastGuildChangeNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserInfos = append(m.UserInfos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuild
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserInfos = append(m.UserInfos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfos", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PositionCount == nil {
				m.PositionCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuild
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuild(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGuild
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PositionCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildMenberInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuild
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildMenberInfo = append(m.GuildMenberInfo, &GuildMenberInfo{})
			if err := m.GuildMenberInfo[len(m.GuildMenberInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuild(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuild
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuild(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuild
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuild
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuild
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuild
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuild(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuild = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuild   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("guild.proto", fileDescriptorGuild) }

var fileDescriptorGuild = []byte{
	// 1187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x26, 0x4e, 0xd3, 0x9f, 0x93, 0x36, 0x4d, 0xdc, 0x25, 0xb5, 0x2a, 0x54, 0x55, 0x96, 0x40,
	0x95, 0xe8, 0x16, 0x6d, 0x91, 0x00, 0x21, 0x10, 0xa4, 0x2d, 0xed, 0x96, 0xb6, 0xa1, 0xeb, 0x5d,
	0x40, 0xe2, 0xce, 0x71, 0x26, 0xe9, 0x34, 0x8e, 0xc7, 0xeb, 0x19, 0x67, 0xe9, 0x6b, 0x70, 0xc5,
	0x03, 0xf0, 0x0e, 0x88, 0x37, 0xe0, 0x92, 0x47, 0x40, 0xe5, 0x05, 0x78, 0x03, 0xd0, 0xfc, 0x39,
	0x63, 0x3b, 0x1b, 0x5a, 0x2d, 0x77, 0x39, 0xdf, 0x9c, 0x39, 0x73, 0xe6, 0xcc, 0x77, 0xbe, 0xe3,
	0x40, 0x7d, 0x98, 0xe2, 0xb0, 0xbf, 0x1f, 0x27, 0x84, 0x11, 0xdb, 0x8a, 0x7b, 0x5b, 0xab, 0x01,
	0x19, 0x8f, 0x49, 0x24, 0x11, 0xd7, 0x86, 0xe6, 0x29, 0x77, 0xb8, 0x20, 0x7e, 0xff, 0x2c, 0x1a,
	0x10, 0x0f, 0xbd, 0x74, 0xbf, 0x28, 0x60, 0x9d, 0x60, 0x64, 0xbf, 0x0f, 0x2b, 0x22, 0x10, 0xb7,
	0x9d, 0xca, 0x4e, 0x65, 0xb7, 0x7e, 0xb0, 0xb6, 0x1f, 0xf7, 0xf6, 0x4f, 0x35, 0xe8, 0x4d, 0xd7,
	0xdd, 0x3e, 0x34, 0x8e, 0x12, 0xe4, 0x33, 0x24, 0x56, 0x3d, 0xf4, 0xd2, 0x7e, 0x07, 0x56, 0xc4,
	0xef, 0xae, 0x3f, 0x46, 0x62, 0xfb, 0x8a, 0x37, 0x05, 0xb2, 0xd5, 0xb3, 0x80, 0x44, 0x8e, 0x65,
	0xac, 0x72, 0xc0, 0x6e, 0xc3, 0x62, 0x97, 0x30, 0x1c, 0x20, 0xa7, 0x2a, 0x96, 0x94, 0xe5, 0x7e,
	0x9f, 0x3b, 0xe5, 0xa1, 0x49, 0xda, 0x0e, 0x2c, 0xd1, 0x34, 0x08, 0x10, 0xa5, 0xe2, 0xc8, 0x65,
	0x4f, 0x9b, 0xee, 0x39, 0x6c, 0x7e, 0x4d, 0x70, 0x24, 0x76, 0x1d, 0x91, 0x71, 0xcf, 0x67, 0x17,
	0x78, 0x8c, 0x19, 0xbf, 0x47, 0x1b, 0x16, 0x03, 0x81, 0x88, 0xf0, 0x55, 0x4f, 0x59, 0x3c, 0x18,
	0xa6, 0x9d, 0x61, 0x82, 0x90, 0x08, 0x56, 0xf3, 0xb4, 0xe9, 0x92, 0xd9, 0xc1, 0x78, 0xba, 0x46,
	0x06, 0x95, 0x5c, 0x06, 0xf6, 0x0e, 0xd4, 0x43, 0xee, 0x25, 0x37, 0x88, 0x90, 0x55, 0xcf, 0x84,
	0xcc, 0x03, 0xab, 0xf9, 0x03, 0x1f, 0x43, 0xeb, 0x92, 0xf4, 0xf1, 0xe0, 0xf6, 0x30, 0x0d, 0x43,
	0xc4, 0x70, 0xc4, 0xf3, 0x76, 0x60, 0x29, 0x20, 0x11, 0x43, 0x11, 0x53, 0xd5, 0xd7, 0xa6, 0x7b,
	0x5a, 0x74, 0x9f, 0x9f, 0x99, 0x11, 0xc8, 0xca, 0x07, 0x6a, 0xc0, 0xea, 0xb3, 0x14, 0x33, 0xfd,
	0xe4, 0xee, 0xae, 0x61, 0xcf, 0x8d, 0xe9, 0xee, 0x01, 0x9c, 0xe3, 0x60, 0xf4, 0x4d, 0x2a, 0x4a,
	0xbc, 0x0d, 0x30, 0xc2, 0xc1, 0xe8, 0x5b, 0x8a, 0x92, 0xb3, 0xbe, 0x70, 0xad, 0x79, 0x06, 0xe2,
	0x1e, 0x67, 0xde, 0x3c, 0x6a, 0x1b, 0x16, 0x6f, 0x08, 0x8e, 0x8e, 0xb4, 0xa7, 0xb2, 0x0a, 0x51,
	0xac, 0x52, 0x94, 0xb7, 0x61, 0xe3, 0x6c, 0x1c, 0x23, 0x3f, 0xb8, 0xbe, 0x4a, 0x10, 0xc5, 0x7d,
	0x14, 0xf1, 0xc3, 0xdd, 0x0f, 0xca, 0xf0, 0xfc, 0xdc, 0x9f, 0xc0, 0xa6, 0x7c, 0xda, 0x6b, 0x14,
	0x8c, 0x2e, 0xd1, 0xb8, 0x87, 0x12, 0xd5, 0x46, 0x3c, 0xb5, 0xd4, 0xbc, 0x84, 0xb2, 0xdc, 0x93,
	0xd9, 0x5b, 0x1e, 0xdc, 0x65, 0x8f, 0xa1, 0xd5, 0x89, 0xe3, 0xf0, 0x36, 0xa3, 0x97, 0x7a, 0x68,
	0xe9, 0xa1, 0x4f, 0xd5, 0x66, 0xd9, 0x7d, 0xfe, 0xc5, 0x3e, 0x83, 0x86, 0xf4, 0xa2, 0x14, 0x0f,
	0x05, 0x87, 0x1a, 0x60, 0x61, 0x1d, 0xd5, 0xc2, 0x7d, 0x7b, 0x0b, 0x96, 0x63, 0x42, 0x31, 0xc3,
	0xaa, 0x69, 0x6b, 0x5e, 0x66, 0xbb, 0xff, 0x54, 0x72, 0xdb, 0xe7, 0x73, 0xca, 0x85, 0x55, 0x5f,
	0xb8, 0xe5, 0x5e, 0x2b, 0x87, 0xf1, 0x8e, 0x88, 0xc8, 0xab, 0x2b, 0x7d, 0x9e, 0xe4, 0xbc, 0x09,
	0xd9, 0xe7, 0xb0, 0xa6, 0x8f, 0x3f, 0x22, 0x69, 0xc4, 0x9c, 0x85, 0x9d, 0xea, 0x6e, 0xfd, 0xe0,
	0xdd, 0xac, 0x7e, 0x59, 0x2a, 0xfb, 0x57, 0xa6, 0xdf, 0x57, 0x11, 0x4b, 0x6e, 0xbd, 0xfc, 0xde,
	0xad, 0x2f, 0xc1, 0x2e, 0x3b, 0xd9, 0x4d, 0xa8, 0x8e, 0xd0, 0xad, 0x2a, 0x01, 0xff, 0x69, 0x3f,
	0x82, 0xda, 0xc4, 0x0f, 0x53, 0xdd, 0xf5, 0xd2, 0xf8, 0xd4, 0xfa, 0xa4, 0xc2, 0x85, 0xb5, 0x13,
	0x86, 0xd9, 0xc3, 0x51, 0x25, 0xac, 0x39, 0x6c, 0xc6, 0x93, 0x57, 0xe7, 0x3e, 0xb9, 0x0d, 0xcd,
	0x63, 0x4c, 0x29, 0x09, 0x27, 0x99, 0xb4, 0xba, 0x7b, 0x05, 0x6c, 0xfe, 0xb3, 0x3e, 0x83, 0x8d,
	0x8c, 0x00, 0xc7, 0x98, 0xc6, 0x84, 0x22, 0x45, 0x1b, 0x2d, 0x27, 0x6a, 0x83, 0x32, 0x79, 0xe1,
	0x7d, 0x4e, 0x9b, 0xdc, 0xdb, 0x98, 0x90, 0xfb, 0x53, 0xa5, 0x1c, 0x73, 0xfe, 0x83, 0x7f, 0x0c,
	0x6b, 0xd3, 0x00, 0xfc, 0xde, 0x96, 0xb8, 0x77, 0x8b, 0xdf, 0xfb, 0x30, 0xc1, 0x68, 0xa0, 0x17,
	0xbc, 0xbc, 0x9f, 0xbd, 0x0b, 0xeb, 0x98, 0x3e, 0xf5, 0x27, 0x28, 0x3b, 0x4f, 0x30, 0x61, 0xd9,
	0x2b, 0xc2, 0xbc, 0xbf, 0x4f, 0x11, 0xeb, 0xe8, 0xdd, 0x17, 0x98, 0x8a, 0xfe, 0xee, 0x96, 0x61,
	0x9e, 0x6a, 0x29, 0xa1, 0xca, 0xfd, 0x12, 0x72, 0xff, 0x5e, 0xd0, 0xa3, 0x4b, 0x8d, 0x94, 0xd9,
	0xcd, 0x97, 0x9f, 0x7f, 0x56, 0x71, 0xfe, 0xe9, 0x7d, 0x17, 0x13, 0x2d, 0xe6, 0xca, 0x34, 0xe4,
	0x6d, 0x21, 0x27, 0x6f, 0x9f, 0xc3, 0xba, 0x70, 0xb9, 0x44, 0x91, 0x92, 0x0f, 0xa7, 0x26, 0x52,
	0xde, 0xc8, 0xb8, 0x33, 0x5d, 0xf2, 0x8a, 0xbe, 0x3c, 0x6c, 0x24, 0x47, 0xea, 0xa2, 0x1c, 0xa9,
	0xd2, 0x32, 0xc6, 0xdb, 0x72, 0x6e, 0xbc, 0xed, 0x40, 0x1d, 0xd3, 0x4e, 0xca, 0x88, 0xa4, 0xc8,
	0x8a, 0x24, 0x81, 0x01, 0xd9, 0x27, 0xc5, 0xee, 0x03, 0x91, 0xce, 0x4e, 0x8e, 0xca, 0xff, 0xdd,
	0x78, 0x5c, 0xb7, 0x49, 0x14, 0xe2, 0x08, 0xf1, 0x12, 0x3b, 0x75, 0xa9, 0xdb, 0x53, 0xc4, 0xfe,
	0x08, 0xda, 0x6a, 0x94, 0x46, 0x2c, 0xc1, 0xbd, 0x94, 0xef, 0xfc, 0x4e, 0x74, 0xe0, 0xaa, 0xf0,
	0x7d, 0xcd, 0x2a, 0x17, 0x2b, 0x8a, 0x92, 0x89, 0xe0, 0xf0, 0x9a, 0x14, 0x2b, 0x6d, 0xdb, 0xef,
	0x41, 0x43, 0x14, 0xe8, 0x0a, 0x91, 0x38, 0x44, 0xdd, 0x74, 0xec, 0x34, 0x84, 0x47, 0x01, 0xe5,
	0xb9, 0x5d, 0xa7, 0xf8, 0x87, 0x6b, 0x3f, 0x1a, 0x5e, 0x4c, 0x9c, 0x75, 0x99, 0xdb, 0x14, 0xe1,
	0x3a, 0xa6, 0x2d, 0xf1, 0xce, 0x4d, 0x51, 0xdb, 0x1c, 0xf6, 0x3f, 0x08, 0xcb, 0x6f, 0x16, 0xac,
	0x9f, 0x96, 0xdf, 0x73, 0xd6, 0xa8, 0x99, 0x27, 0xd1, 0xfc, 0x4d, 0xc9, 0x60, 0xc0, 0x0b, 0xfb,
	0x02, 0x8f, 0xf5, 0x57, 0x84, 0x09, 0xf1, 0xfb, 0x88, 0x0a, 0x1c, 0xf9, 0x31, 0x66, 0x7e, 0xa8,
	0x28, 0x98, 0xc3, 0xec, 0x3d, 0x68, 0x0d, 0x8b, 0x15, 0x77, 0x6a, 0xc2, 0xb1, 0xbc, 0xc0, 0xf3,
	0x89, 0x70, 0x30, 0x12, 0xd5, 0x91, 0xcc, 0xcb, 0x6c, 0x7e, 0x07, 0x7f, 0xe2, 0x33, 0x3f, 0x71,
	0x96, 0x24, 0x27, 0xa5, 0xc5, 0xc7, 0x4e, 0x38, 0x11, 0x7c, 0xac, 0x79, 0x56, 0x38, 0x31, 0x38,
	0x2a, 0x69, 0xa8, 0x39, 0xda, 0x84, 0xea, 0x0d, 0xe9, 0x39, 0x20, 0x6b, 0x78, 0x43, 0x7a, 0x1c,
	0xa1, 0xe8, 0x47, 0x45, 0x22, 0xfe, 0xd3, 0xf5, 0x0d, 0xa5, 0x7a, 0x2e, 0xc5, 0xa8, 0xcb, 0x06,
	0xaf, 0x2d, 0x9f, 0xd1, 0xcf, 0x56, 0xbe, 0x9f, 0x0d, 0x6d, 0xab, 0xe6, 0x05, 0xf6, 0x00, 0xda,
	0x9d, 0x30, 0x7c, 0x90, 0xc6, 0xba, 0x74, 0xe6, 0x9e, 0x99, 0xc2, 0x74, 0x5f, 0xa5, 0x14, 0x1d,
	0x7b, 0x92, 0x86, 0xe1, 0x73, 0xe6, 0x33, 0xa4, 0x92, 0x34, 0x21, 0xd7, 0x81, 0x76, 0xf1, 0xf3,
	0xe1, 0x98, 0xb0, 0x2e, 0x1b, 0xb8, 0xbf, 0x56, 0xca, 0x5f, 0x41, 0xbc, 0x4c, 0x7b, 0xd0, 0x8a,
	0xd0, 0xab, 0xa7, 0x8a, 0xce, 0xb9, 0x0f, 0xb4, 0xf2, 0x42, 0x71, 0x62, 0x5b, 0xe5, 0x89, 0xbd,
	0x07, 0x2d, 0x12, 0xf6, 0x0b, 0xf1, 0x24, 0x0f, 0xcb, 0x0b, 0x9c, 0x8d, 0xc6, 0xe6, 0x27, 0x9a,
	0x8d, 0x26, 0xe6, 0xfe, 0x62, 0xc1, 0xe6, 0x61, 0x42, 0xfc, 0x7e, 0xe0, 0x53, 0xa6, 0x3e, 0xb2,
	0xfc, 0x68, 0x88, 0x78, 0xf6, 0x8f, 0xa0, 0xc6, 0x6e, 0x63, 0x44, 0x55, 0xc6, 0xd2, 0xe0, 0xc2,
	0x9c, 0xaa, 0x9a, 0x51, 0x51, 0xdc, 0x9a, 0x37, 0x05, 0xec, 0x17, 0xb3, 0xbf, 0x29, 0xf6, 0x65,
	0xf9, 0x67, 0x9e, 0x73, 0x0f, 0x8d, 0x7b, 0x33, 0xf1, 0x7e, 0x73, 0x09, 0x39, 0x6c, 0xfe, 0x7e,
	0xb7, 0x5d, 0xf9, 0xe3, 0x6e, 0xbb, 0xf2, 0xe7, 0xdd, 0x76, 0xe5, 0xe7, 0xbf, 0xb6, 0xdf, 0xea,
	0x2d, 0x8a, 0x7f, 0x83, 0x1f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x8c, 0x2a, 0x0b, 0x2e,
	0x0e, 0x00, 0x00,
}
