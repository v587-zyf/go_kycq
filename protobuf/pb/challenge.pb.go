// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: challenge.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChallengeInfoReq struct {
}

func (m *ChallengeInfoReq) Reset()                    { *m = ChallengeInfoReq{} }
func (m *ChallengeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*ChallengeInfoReq) ProtoMessage()               {}
func (*ChallengeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{0} }

type ChallengeInfoAck struct {
	ChallengePeopleInfo map[int32]*PeopleInfos `protobuf:"bytes,1,rep,name=challengePeopleInfo" json:"challengePeopleInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	BottomUserInfo      []*PeopleInfo          `protobuf:"bytes,2,rep,name=BottomUserInfo" json:"BottomUserInfo,omitempty"`
	ApplyUserInfo       []*PeopleInfo          `protobuf:"bytes,3,rep,name=ApplyUserInfo" json:"ApplyUserInfo,omitempty"`
	FirstPlayer         []*PeopleInfo          `protobuf:"bytes,4,rep,name=FirstPlayer" json:"FirstPlayer,omitempty"`
	JoinServer          []int32                `protobuf:"varint,5,rep,packed,name=JoinServer" json:"JoinServer,omitempty"`
}

func (m *ChallengeInfoAck) Reset()                    { *m = ChallengeInfoAck{} }
func (m *ChallengeInfoAck) String() string            { return proto.CompactTextString(m) }
func (*ChallengeInfoAck) ProtoMessage()               {}
func (*ChallengeInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{1} }

func (m *ChallengeInfoAck) GetChallengePeopleInfo() map[int32]*PeopleInfos {
	if m != nil {
		return m.ChallengePeopleInfo
	}
	return nil
}

func (m *ChallengeInfoAck) GetBottomUserInfo() []*PeopleInfo {
	if m != nil {
		return m.BottomUserInfo
	}
	return nil
}

func (m *ChallengeInfoAck) GetApplyUserInfo() []*PeopleInfo {
	if m != nil {
		return m.ApplyUserInfo
	}
	return nil
}

func (m *ChallengeInfoAck) GetFirstPlayer() []*PeopleInfo {
	if m != nil {
		return m.FirstPlayer
	}
	return nil
}

func (m *ChallengeInfoAck) GetJoinServer() []int32 {
	if m != nil {
		return m.JoinServer
	}
	return nil
}

// 跨服擂台赛报名
type ApplyChallengeReq struct {
}

func (m *ApplyChallengeReq) Reset()                    { *m = ApplyChallengeReq{} }
func (m *ApplyChallengeReq) String() string            { return proto.CompactTextString(m) }
func (*ApplyChallengeReq) ProtoMessage()               {}
func (*ApplyChallengeReq) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{2} }

type ApplyChallengeAck struct {
	ApplyUserInfo []*PeopleInfo `protobuf:"bytes,1,rep,name=ApplyUserInfo" json:"ApplyUserInfo,omitempty"`
}

func (m *ApplyChallengeAck) Reset()                    { *m = ApplyChallengeAck{} }
func (m *ApplyChallengeAck) String() string            { return proto.CompactTextString(m) }
func (*ApplyChallengeAck) ProtoMessage()               {}
func (*ApplyChallengeAck) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{3} }

func (m *ApplyChallengeAck) GetApplyUserInfo() []*PeopleInfo {
	if m != nil {
		return m.ApplyUserInfo
	}
	return nil
}

// 当前轮比赛人员信息
type ChallengeEachRoundPeopleReq struct {
}

func (m *ChallengeEachRoundPeopleReq) Reset()         { *m = ChallengeEachRoundPeopleReq{} }
func (m *ChallengeEachRoundPeopleReq) String() string { return proto.CompactTextString(m) }
func (*ChallengeEachRoundPeopleReq) ProtoMessage()    {}
func (*ChallengeEachRoundPeopleReq) Descriptor() ([]byte, []int) {
	return fileDescriptorChallenge, []int{4}
}

type ChallengeEachRoundPeopleAck struct {
	NowRound            int32         `protobuf:"varint,1,opt,name=nowRound,proto3" json:"nowRound,omitempty"`
	ChallengePeopleInfo []*PeopleInfo `protobuf:"bytes,2,rep,name=challengePeopleInfo" json:"challengePeopleInfo,omitempty"`
	BottomUserInfo      []*PeopleInfo `protobuf:"bytes,3,rep,name=BottomUserInfo" json:"BottomUserInfo,omitempty"`
}

func (m *ChallengeEachRoundPeopleAck) Reset()         { *m = ChallengeEachRoundPeopleAck{} }
func (m *ChallengeEachRoundPeopleAck) String() string { return proto.CompactTextString(m) }
func (*ChallengeEachRoundPeopleAck) ProtoMessage()    {}
func (*ChallengeEachRoundPeopleAck) Descriptor() ([]byte, []int) {
	return fileDescriptorChallenge, []int{5}
}

func (m *ChallengeEachRoundPeopleAck) GetNowRound() int32 {
	if m != nil {
		return m.NowRound
	}
	return 0
}

func (m *ChallengeEachRoundPeopleAck) GetChallengePeopleInfo() []*PeopleInfo {
	if m != nil {
		return m.ChallengePeopleInfo
	}
	return nil
}

func (m *ChallengeEachRoundPeopleAck) GetBottomUserInfo() []*PeopleInfo {
	if m != nil {
		return m.BottomUserInfo
	}
	return nil
}

type PeopleInfos struct {
	PeopleInfo []*PeopleInfo `protobuf:"bytes,1,rep,name=peopleInfo" json:"peopleInfo,omitempty"`
}

func (m *PeopleInfos) Reset()                    { *m = PeopleInfos{} }
func (m *PeopleInfos) String() string            { return proto.CompactTextString(m) }
func (*PeopleInfos) ProtoMessage()               {}
func (*PeopleInfos) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{6} }

func (m *PeopleInfos) GetPeopleInfo() []*PeopleInfo {
	if m != nil {
		return m.PeopleInfo
	}
	return nil
}

// 下注
type BottomPourReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *BottomPourReq) Reset()                    { *m = BottomPourReq{} }
func (m *BottomPourReq) String() string            { return proto.CompactTextString(m) }
func (*BottomPourReq) ProtoMessage()               {}
func (*BottomPourReq) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{7} }

func (m *BottomPourReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type BottomPourAck struct {
	State          bool          `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
	BottomUserInfo []*PeopleInfo `protobuf:"bytes,2,rep,name=BottomUserInfo" json:"BottomUserInfo,omitempty"`
}

func (m *BottomPourAck) Reset()                    { *m = BottomPourAck{} }
func (m *BottomPourAck) String() string            { return proto.CompactTextString(m) }
func (*BottomPourAck) ProtoMessage()               {}
func (*BottomPourAck) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{8} }

func (m *BottomPourAck) GetState() bool {
	if m != nil {
		return m.State
	}
	return false
}

func (m *BottomPourAck) GetBottomUserInfo() []*PeopleInfo {
	if m != nil {
		return m.BottomUserInfo
	}
	return nil
}

type PeopleInfo struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avatar    string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	ServerId  int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	Combat    int64  `protobuf:"varint,4,opt,name=combat,proto3" json:"combat,omitempty"`
	UserId    int32  `protobuf:"varint,5,opt,name=userId,proto3" json:"userId,omitempty"`
	GuildName string `protobuf:"bytes,6,opt,name=guildName,proto3" json:"guildName,omitempty"`
}

func (m *PeopleInfo) Reset()                    { *m = PeopleInfo{} }
func (m *PeopleInfo) String() string            { return proto.CompactTextString(m) }
func (*PeopleInfo) ProtoMessage()               {}
func (*PeopleInfo) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{9} }

func (m *PeopleInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PeopleInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *PeopleInfo) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *PeopleInfo) GetCombat() int64 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *PeopleInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PeopleInfo) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

type ChallengeOpenNtf struct {
	IsOpen bool `protobuf:"varint,1,opt,name=isOpen,proto3" json:"isOpen,omitempty"`
}

func (m *ChallengeOpenNtf) Reset()                    { *m = ChallengeOpenNtf{} }
func (m *ChallengeOpenNtf) String() string            { return proto.CompactTextString(m) }
func (*ChallengeOpenNtf) ProtoMessage()               {}
func (*ChallengeOpenNtf) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{10} }

func (m *ChallengeOpenNtf) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

type ChallengeRoundEndNtf struct {
}

func (m *ChallengeRoundEndNtf) Reset()                    { *m = ChallengeRoundEndNtf{} }
func (m *ChallengeRoundEndNtf) String() string            { return proto.CompactTextString(m) }
func (*ChallengeRoundEndNtf) ProtoMessage()               {}
func (*ChallengeRoundEndNtf) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{11} }

type ChallengeApplyUserInfoNtf struct {
	ApplyUserInfo []*PeopleInfo `protobuf:"bytes,3,rep,name=ApplyUserInfo" json:"ApplyUserInfo,omitempty"`
}

func (m *ChallengeApplyUserInfoNtf) Reset()         { *m = ChallengeApplyUserInfoNtf{} }
func (m *ChallengeApplyUserInfoNtf) String() string { return proto.CompactTextString(m) }
func (*ChallengeApplyUserInfoNtf) ProtoMessage()    {}
func (*ChallengeApplyUserInfoNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorChallenge, []int{12}
}

func (m *ChallengeApplyUserInfoNtf) GetApplyUserInfo() []*PeopleInfo {
	if m != nil {
		return m.ApplyUserInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ChallengeInfoReq)(nil), "pb.ChallengeInfoReq")
	proto.RegisterType((*ChallengeInfoAck)(nil), "pb.ChallengeInfoAck")
	proto.RegisterType((*ApplyChallengeReq)(nil), "pb.ApplyChallengeReq")
	proto.RegisterType((*ApplyChallengeAck)(nil), "pb.ApplyChallengeAck")
	proto.RegisterType((*ChallengeEachRoundPeopleReq)(nil), "pb.ChallengeEachRoundPeopleReq")
	proto.RegisterType((*ChallengeEachRoundPeopleAck)(nil), "pb.ChallengeEachRoundPeopleAck")
	proto.RegisterType((*PeopleInfos)(nil), "pb.peopleInfos")
	proto.RegisterType((*BottomPourReq)(nil), "pb.BottomPourReq")
	proto.RegisterType((*BottomPourAck)(nil), "pb.BottomPourAck")
	proto.RegisterType((*PeopleInfo)(nil), "pb.PeopleInfo")
	proto.RegisterType((*ChallengeOpenNtf)(nil), "pb.ChallengeOpenNtf")
	proto.RegisterType((*ChallengeRoundEndNtf)(nil), "pb.ChallengeRoundEndNtf")
	proto.RegisterType((*ChallengeApplyUserInfoNtf)(nil), "pb.ChallengeApplyUserInfoNtf")
}
func (m *ChallengeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChallengeInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ChallengePeopleInfo) > 0 {
		for k, _ := range m.ChallengePeopleInfo {
			dAtA[i] = 0xa
			i++
			v := m.ChallengePeopleInfo[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovChallenge(uint64(msgSize))
			}
			mapSize := 1 + sovChallenge(uint64(k)) + msgSize
			i = encodeVarintChallenge(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintChallenge(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if len(m.BottomUserInfo) > 0 {
		for _, msg := range m.BottomUserInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ApplyUserInfo) > 0 {
		for _, msg := range m.ApplyUserInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FirstPlayer) > 0 {
		for _, msg := range m.FirstPlayer {
			dAtA[i] = 0x22
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.JoinServer) > 0 {
		dAtA3 := make([]byte, len(m.JoinServer)*10)
		var j2 int
		for _, num1 := range m.JoinServer {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *ApplyChallengeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyChallengeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ApplyChallengeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ApplyChallengeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, msg := range m.ApplyUserInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChallengeEachRoundPeopleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeEachRoundPeopleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChallengeEachRoundPeopleAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeEachRoundPeopleAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NowRound != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.NowRound))
	}
	if len(m.ChallengePeopleInfo) > 0 {
		for _, msg := range m.ChallengePeopleInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.BottomUserInfo) > 0 {
		for _, msg := range m.BottomUserInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PeopleInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeopleInfos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PeopleInfo) > 0 {
		for _, msg := range m.PeopleInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BottomPourReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BottomPourReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *BottomPourAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BottomPourAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State {
		dAtA[i] = 0x8
		i++
		if m.State {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.BottomUserInfo) > 0 {
		for _, msg := range m.BottomUserInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PeopleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeopleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.ServerId))
	}
	if m.Combat != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.Combat))
	}
	if m.UserId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.UserId))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	return i, nil
}

func (m *ChallengeOpenNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeOpenNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		dAtA[i] = 0x8
		i++
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ChallengeRoundEndNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeRoundEndNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChallengeApplyUserInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeApplyUserInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, msg := range m.ApplyUserInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintChallenge(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintChallenge(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChallengeInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChallengeInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ChallengePeopleInfo) > 0 {
		for k, v := range m.ChallengePeopleInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChallenge(uint64(l))
			}
			mapEntrySize := 1 + sovChallenge(uint64(k)) + l
			n += mapEntrySize + 1 + sovChallenge(uint64(mapEntrySize))
		}
	}
	if len(m.BottomUserInfo) > 0 {
		for _, e := range m.BottomUserInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	if len(m.ApplyUserInfo) > 0 {
		for _, e := range m.ApplyUserInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	if len(m.FirstPlayer) > 0 {
		for _, e := range m.FirstPlayer {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	if len(m.JoinServer) > 0 {
		l = 0
		for _, e := range m.JoinServer {
			l += sovChallenge(uint64(e))
		}
		n += 1 + sovChallenge(uint64(l)) + l
	}
	return n
}

func (m *ApplyChallengeReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ApplyChallengeAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, e := range m.ApplyUserInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	return n
}

func (m *ChallengeEachRoundPeopleReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChallengeEachRoundPeopleAck) Size() (n int) {
	var l int
	_ = l
	if m.NowRound != 0 {
		n += 1 + sovChallenge(uint64(m.NowRound))
	}
	if len(m.ChallengePeopleInfo) > 0 {
		for _, e := range m.ChallengePeopleInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	if len(m.BottomUserInfo) > 0 {
		for _, e := range m.BottomUserInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	return n
}

func (m *PeopleInfos) Size() (n int) {
	var l int
	_ = l
	if len(m.PeopleInfo) > 0 {
		for _, e := range m.PeopleInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	return n
}

func (m *BottomPourReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovChallenge(uint64(m.UserId))
	}
	return n
}

func (m *BottomPourAck) Size() (n int) {
	var l int
	_ = l
	if m.State {
		n += 2
	}
	if len(m.BottomUserInfo) > 0 {
		for _, e := range m.BottomUserInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	return n
}

func (m *PeopleInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChallenge(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovChallenge(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovChallenge(uint64(m.ServerId))
	}
	if m.Combat != 0 {
		n += 1 + sovChallenge(uint64(m.Combat))
	}
	if m.UserId != 0 {
		n += 1 + sovChallenge(uint64(m.UserId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovChallenge(uint64(l))
	}
	return n
}

func (m *ChallengeOpenNtf) Size() (n int) {
	var l int
	_ = l
	if m.IsOpen {
		n += 2
	}
	return n
}

func (m *ChallengeRoundEndNtf) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChallengeApplyUserInfoNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.ApplyUserInfo) > 0 {
		for _, e := range m.ApplyUserInfo {
			l = e.Size()
			n += 1 + l + sovChallenge(uint64(l))
		}
	}
	return n
}

func sovChallenge(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChallenge(x uint64) (n int) {
	return sovChallenge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChallengeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengePeopleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengePeopleInfo == nil {
				m.ChallengePeopleInfo = make(map[int32]*PeopleInfos)
			}
			var mapkey int32
			var mapvalue *PeopleInfos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChallenge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChallenge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChallenge
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthChallenge
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PeopleInfos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChallenge(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChallenge
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChallengePeopleInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BottomUserInfo = append(m.BottomUserInfo, &PeopleInfo{})
			if err := m.BottomUserInfo[len(m.BottomUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyUserInfo = append(m.ApplyUserInfo, &PeopleInfo{})
			if err := m.ApplyUserInfo[len(m.ApplyUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstPlayer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstPlayer = append(m.FirstPlayer, &PeopleInfo{})
			if err := m.FirstPlayer[len(m.FirstPlayer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.JoinServer = append(m.JoinServer, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChallenge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChallenge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.JoinServer = append(m.JoinServer, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinServer", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyChallengeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyChallengeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyChallengeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ApplyChallengeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApplyChallengeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApplyChallengeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyUserInfo = append(m.ApplyUserInfo, &PeopleInfo{})
			if err := m.ApplyUserInfo[len(m.ApplyUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeEachRoundPeopleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeEachRoundPeopleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeEachRoundPeopleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeEachRoundPeopleAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeEachRoundPeopleAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeEachRoundPeopleAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowRound", wireType)
			}
			m.NowRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowRound |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengePeopleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengePeopleInfo = append(m.ChallengePeopleInfo, &PeopleInfo{})
			if err := m.ChallengePeopleInfo[len(m.ChallengePeopleInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BottomUserInfo = append(m.BottomUserInfo, &PeopleInfo{})
			if err := m.BottomUserInfo[len(m.BottomUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeopleInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: peopleInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: peopleInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeopleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeopleInfo = append(m.PeopleInfo, &PeopleInfo{})
			if err := m.PeopleInfo[len(m.PeopleInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BottomPourReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BottomPourReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BottomPourReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BottomPourAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BottomPourAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BottomPourAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.State = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BottomUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BottomUserInfo = append(m.BottomUserInfo, &PeopleInfo{})
			if err := m.BottomUserInfo[len(m.BottomUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeopleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeopleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeopleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeOpenNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeOpenNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeOpenNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeRoundEndNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeRoundEndNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeRoundEndNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeApplyUserInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeApplyUserInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeApplyUserInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChallenge
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyUserInfo = append(m.ApplyUserInfo, &PeopleInfo{})
			if err := m.ApplyUserInfo[len(m.ApplyUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChallenge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChallenge
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChallenge(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChallenge = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChallenge   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("challenge.proto", fileDescriptorChallenge) }

var fileDescriptorChallenge = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xd1, 0x8a, 0xd3, 0x40,
	0x14, 0x75, 0x9a, 0x4d, 0xd9, 0xde, 0xb2, 0xbb, 0x75, 0x76, 0x59, 0xe2, 0xaa, 0x21, 0x0c, 0x88,
	0x41, 0xb0, 0xc8, 0x2a, 0x22, 0x82, 0xe0, 0xae, 0x54, 0xa8, 0x0f, 0xb5, 0x8e, 0x88, 0x4f, 0x22,
	0xd3, 0x76, 0xba, 0x5b, 0x36, 0xcd, 0x64, 0x93, 0x49, 0xa5, 0xff, 0xe0, 0x07, 0xf8, 0xec, 0x2f,
	0xf8, 0x13, 0x3e, 0xfa, 0x09, 0x52, 0x7f, 0x44, 0x66, 0x92, 0x26, 0x63, 0xcc, 0x42, 0xd9, 0xb7,
	0x9c, 0x3b, 0xe7, 0x9e, 0x3b, 0xf7, 0xde, 0x93, 0x81, 0xbd, 0xf1, 0x39, 0x0b, 0x02, 0x1e, 0x9e,
	0xf1, 0x6e, 0x14, 0x0b, 0x29, 0x70, 0x23, 0x1a, 0x11, 0x0c, 0x9d, 0x57, 0xeb, 0x70, 0x3f, 0x9c,
	0x0a, 0xca, 0x2f, 0xc9, 0x57, 0xab, 0x12, 0x3c, 0x19, 0x5f, 0xe0, 0xcf, 0xb0, 0x5f, 0xe4, 0x0f,
	0xb9, 0x88, 0x02, 0x7d, 0xe2, 0x20, 0xcf, 0xf2, 0xdb, 0xc7, 0x0f, 0xbb, 0xd1, 0xa8, 0x5b, 0x4d,
	0x29, 0x03, 0x25, 0xbf, 0x17, 0xca, 0x78, 0x49, 0xeb, 0x94, 0xf0, 0x53, 0xd8, 0x3d, 0x15, 0x52,
	0x8a, 0xf9, 0x87, 0x84, 0xc7, 0x5a, 0xbb, 0xa1, 0xb5, 0x77, 0x95, 0x76, 0xc9, 0xa3, 0x15, 0x16,
	0x7e, 0x02, 0x3b, 0x27, 0x51, 0x14, 0x2c, 0x8b, 0x34, 0xab, 0x36, 0xed, 0x5f, 0x12, 0x7e, 0x04,
	0xed, 0xd7, 0xb3, 0x38, 0x91, 0xc3, 0x80, 0x2d, 0x79, 0xec, 0x6c, 0xd5, 0xe6, 0x98, 0x14, 0xec,
	0x02, 0xbc, 0x11, 0xb3, 0xf0, 0x3d, 0x8f, 0x17, 0x3c, 0x76, 0x6c, 0xcf, 0xf2, 0x6d, 0x6a, 0x44,
	0x8e, 0x3e, 0x82, 0x73, 0x55, 0xc3, 0xb8, 0x03, 0xd6, 0x05, 0x5f, 0x3a, 0xc8, 0x43, 0xbe, 0x4d,
	0xd5, 0x27, 0xbe, 0x07, 0xf6, 0x82, 0x05, 0x29, 0x77, 0x1a, 0x1e, 0xf2, 0xdb, 0xc7, 0x7b, 0xaa,
	0x72, 0x54, 0x64, 0x25, 0x34, 0x3b, 0x7d, 0xde, 0x78, 0x86, 0xc8, 0x3e, 0xdc, 0xd4, 0x77, 0x2f,
	0xd4, 0xd5, 0x8e, 0xfa, 0xd5, 0xa0, 0xda, 0xd1, 0x7f, 0xa3, 0x40, 0x1b, 0x8c, 0x82, 0xdc, 0x85,
	0xdb, 0x85, 0x4a, 0x8f, 0x8d, 0xcf, 0xa9, 0x48, 0xc3, 0x49, 0x46, 0x57, 0x95, 0x7e, 0xa0, 0xab,
	0xcf, 0x55, 0xd1, 0x23, 0xd8, 0x0e, 0xc5, 0x17, 0x1d, 0xcc, 0x1b, 0x2c, 0x30, 0x7e, 0x59, 0x6f,
	0x9a, 0xfa, 0xc5, 0x6e, 0xe8, 0x0a, 0x6b, 0x13, 0x57, 0x90, 0x17, 0xd0, 0x36, 0xc6, 0x89, 0xbb,
	0x00, 0x51, 0xd5, 0xb4, 0x55, 0x09, 0x83, 0x41, 0xee, 0xc3, 0x4e, 0x26, 0x38, 0x14, 0x69, 0x4c,
	0xf9, 0x25, 0x3e, 0x84, 0x66, 0xaa, 0xb4, 0xd7, 0x3d, 0xe6, 0x88, 0x7c, 0x32, 0x89, 0x6a, 0x1c,
	0x07, 0x60, 0x27, 0x92, 0x49, 0xae, 0x79, 0xdb, 0x34, 0x03, 0xd7, 0x35, 0x37, 0xf9, 0x8e, 0x00,
	0x8c, 0x69, 0x60, 0xd8, 0x0a, 0xd9, 0x3c, 0xd3, 0x6e, 0x51, 0xfd, 0xad, 0x6e, 0xc6, 0x16, 0x4c,
	0xb2, 0x58, 0x5b, 0xa9, 0x45, 0x73, 0xa4, 0xf6, 0x92, 0x68, 0x67, 0xf6, 0x27, 0x8e, 0x95, 0xed,
	0x65, 0x8d, 0x55, 0xce, 0x58, 0xcc, 0x47, 0x4c, 0x3a, 0x5b, 0x1e, 0xf2, 0x2d, 0x9a, 0x23, 0xa3,
	0x4b, 0xdb, 0xec, 0x12, 0xdf, 0x81, 0xd6, 0x59, 0x3a, 0x0b, 0x26, 0x03, 0x55, 0xbc, 0xa9, 0xcb,
	0x94, 0x01, 0xf2, 0xc0, 0x78, 0x2e, 0xde, 0x46, 0x3c, 0x1c, 0xc8, 0xa9, 0x52, 0x9a, 0x25, 0x0a,
	0xe4, 0x73, 0xc8, 0x11, 0x39, 0x84, 0x83, 0xd2, 0xc7, 0xca, 0x23, 0xbd, 0x70, 0x32, 0x90, 0x53,
	0xf2, 0x0e, 0x6e, 0x95, 0x56, 0x36, 0xed, 0xa9, 0xc4, 0xae, 0xf5, 0x8b, 0x9f, 0x76, 0x7e, 0xae,
	0x5c, 0xf4, 0x6b, 0xe5, 0xa2, 0xdf, 0x2b, 0x17, 0x7d, 0xfb, 0xe3, 0xde, 0x18, 0x35, 0xf5, 0xbb,
	0xf7, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x15, 0x62, 0xfd, 0x0a, 0x05, 0x00, 0x00,
}
