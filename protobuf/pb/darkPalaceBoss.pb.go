// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: darkPalaceBoss.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 加载boss信息
type DarkPalaceLoadReq struct {
	Floor int32 `protobuf:"varint,1,opt,name=floor,proto3" json:"floor,omitempty"`
}

func (m *DarkPalaceLoadReq) Reset()                    { *m = DarkPalaceLoadReq{} }
func (m *DarkPalaceLoadReq) String() string            { return proto.CompactTextString(m) }
func (*DarkPalaceLoadReq) ProtoMessage()               {}
func (*DarkPalaceLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorDarkPalaceBoss, []int{0} }

func (m *DarkPalaceLoadReq) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

type DarkPalaceLoadAck struct {
	DarkPalaceBoss []*DarkPalaceBossNtf `protobuf:"bytes,1,rep,name=darkPalaceBoss" json:"darkPalaceBoss,omitempty"`
}

func (m *DarkPalaceLoadAck) Reset()                    { *m = DarkPalaceLoadAck{} }
func (m *DarkPalaceLoadAck) String() string            { return proto.CompactTextString(m) }
func (*DarkPalaceLoadAck) ProtoMessage()               {}
func (*DarkPalaceLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorDarkPalaceBoss, []int{1} }

func (m *DarkPalaceLoadAck) GetDarkPalaceBoss() []*DarkPalaceBossNtf {
	if m != nil {
		return m.DarkPalaceBoss
	}
	return nil
}

// 进入战斗
type EnterDarkPalaceFightReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterDarkPalaceFightReq) Reset()         { *m = EnterDarkPalaceFightReq{} }
func (m *EnterDarkPalaceFightReq) String() string { return proto.CompactTextString(m) }
func (*EnterDarkPalaceFightReq) ProtoMessage()    {}
func (*EnterDarkPalaceFightReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{2}
}

func (m *EnterDarkPalaceFightReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type DarkPalaceFightResultNtf struct {
	StageId  int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Result   int32           `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	DareNum  int32           `protobuf:"varint,3,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
	Goods    *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
	Winner   *BriefUserInfo  `protobuf:"bytes,5,opt,name=winner" json:"winner,omitempty"`
	IsHelper bool            `protobuf:"varint,6,opt,name=isHelper,proto3" json:"isHelper,omitempty"`
	HelpNum  int32           `protobuf:"varint,7,opt,name=helpNum,proto3" json:"helpNum,omitempty"`
}

func (m *DarkPalaceFightResultNtf) Reset()         { *m = DarkPalaceFightResultNtf{} }
func (m *DarkPalaceFightResultNtf) String() string { return proto.CompactTextString(m) }
func (*DarkPalaceFightResultNtf) ProtoMessage()    {}
func (*DarkPalaceFightResultNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{3}
}

func (m *DarkPalaceFightResultNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *DarkPalaceFightResultNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *DarkPalaceFightResultNtf) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func (m *DarkPalaceFightResultNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *DarkPalaceFightResultNtf) GetWinner() *BriefUserInfo {
	if m != nil {
		return m.Winner
	}
	return nil
}

func (m *DarkPalaceFightResultNtf) GetIsHelper() bool {
	if m != nil {
		return m.IsHelper
	}
	return false
}

func (m *DarkPalaceFightResultNtf) GetHelpNum() int32 {
	if m != nil {
		return m.HelpNum
	}
	return 0
}

// 购买次数
type DarkPalaceBuyNumReq struct {
	Use    bool  `protobuf:"varint,1,opt,name=use,proto3" json:"use,omitempty"`
	BuyNum int32 `protobuf:"varint,2,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
}

func (m *DarkPalaceBuyNumReq) Reset()         { *m = DarkPalaceBuyNumReq{} }
func (m *DarkPalaceBuyNumReq) String() string { return proto.CompactTextString(m) }
func (*DarkPalaceBuyNumReq) ProtoMessage()    {}
func (*DarkPalaceBuyNumReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{4}
}

func (m *DarkPalaceBuyNumReq) GetUse() bool {
	if m != nil {
		return m.Use
	}
	return false
}

func (m *DarkPalaceBuyNumReq) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

type DarkPalaceBuyNumAck struct {
	BuyNum int32 `protobuf:"varint,1,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
}

func (m *DarkPalaceBuyNumAck) Reset()         { *m = DarkPalaceBuyNumAck{} }
func (m *DarkPalaceBuyNumAck) String() string { return proto.CompactTextString(m) }
func (*DarkPalaceBuyNumAck) ProtoMessage()    {}
func (*DarkPalaceBuyNumAck) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{5}
}

func (m *DarkPalaceBuyNumAck) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

// 推送boss状态
type DarkPalaceBossNtf struct {
	StageId    int32   `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Blood      float32 `protobuf:"fixed32,2,opt,name=blood,proto3" json:"blood,omitempty"`
	ReliveTime int64   `protobuf:"varint,3,opt,name=reliveTime,proto3" json:"reliveTime,omitempty"`
}

func (m *DarkPalaceBossNtf) Reset()                    { *m = DarkPalaceBossNtf{} }
func (m *DarkPalaceBossNtf) String() string            { return proto.CompactTextString(m) }
func (*DarkPalaceBossNtf) ProtoMessage()               {}
func (*DarkPalaceBossNtf) Descriptor() ([]byte, []int) { return fileDescriptorDarkPalaceBoss, []int{6} }

func (m *DarkPalaceBossNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *DarkPalaceBossNtf) GetBlood() float32 {
	if m != nil {
		return m.Blood
	}
	return 0
}

func (m *DarkPalaceBossNtf) GetReliveTime() int64 {
	if m != nil {
		return m.ReliveTime
	}
	return 0
}

// 协助
type EnterDarkPalaceHelpFightReq struct {
}

func (m *EnterDarkPalaceHelpFightReq) Reset()         { *m = EnterDarkPalaceHelpFightReq{} }
func (m *EnterDarkPalaceHelpFightReq) String() string { return proto.CompactTextString(m) }
func (*EnterDarkPalaceHelpFightReq) ProtoMessage()    {}
func (*EnterDarkPalaceHelpFightReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{7}
}

type DarkPalaceHelpFightResultNtf struct {
}

func (m *DarkPalaceHelpFightResultNtf) Reset()         { *m = DarkPalaceHelpFightResultNtf{} }
func (m *DarkPalaceHelpFightResultNtf) String() string { return proto.CompactTextString(m) }
func (*DarkPalaceHelpFightResultNtf) ProtoMessage()    {}
func (*DarkPalaceHelpFightResultNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{8}
}

// 推送暗殿boss挑战次数
type DarkPalaceDareNumNtf struct {
	DareNum int32 `protobuf:"varint,1,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
}

func (m *DarkPalaceDareNumNtf) Reset()         { *m = DarkPalaceDareNumNtf{} }
func (m *DarkPalaceDareNumNtf) String() string { return proto.CompactTextString(m) }
func (*DarkPalaceDareNumNtf) ProtoMessage()    {}
func (*DarkPalaceDareNumNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorDarkPalaceBoss, []int{9}
}

func (m *DarkPalaceDareNumNtf) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func init() {
	proto.RegisterType((*DarkPalaceLoadReq)(nil), "pb.DarkPalaceLoadReq")
	proto.RegisterType((*DarkPalaceLoadAck)(nil), "pb.DarkPalaceLoadAck")
	proto.RegisterType((*EnterDarkPalaceFightReq)(nil), "pb.EnterDarkPalaceFightReq")
	proto.RegisterType((*DarkPalaceFightResultNtf)(nil), "pb.DarkPalaceFightResultNtf")
	proto.RegisterType((*DarkPalaceBuyNumReq)(nil), "pb.DarkPalaceBuyNumReq")
	proto.RegisterType((*DarkPalaceBuyNumAck)(nil), "pb.DarkPalaceBuyNumAck")
	proto.RegisterType((*DarkPalaceBossNtf)(nil), "pb.DarkPalaceBossNtf")
	proto.RegisterType((*EnterDarkPalaceHelpFightReq)(nil), "pb.EnterDarkPalaceHelpFightReq")
	proto.RegisterType((*DarkPalaceHelpFightResultNtf)(nil), "pb.DarkPalaceHelpFightResultNtf")
	proto.RegisterType((*DarkPalaceDareNumNtf)(nil), "pb.DarkPalaceDareNumNtf")
}
func (m *DarkPalaceLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Floor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.Floor))
	}
	return i, nil
}

func (m *DarkPalaceLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DarkPalaceBoss) > 0 {
		for _, msg := range m.DarkPalaceBoss {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *EnterDarkPalaceFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDarkPalaceFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *DarkPalaceFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.StageId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.Result))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.DareNum))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Winner != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.Winner.Size()))
		n2, err := m.Winner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsHelper {
		dAtA[i] = 0x30
		i++
		if m.IsHelper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HelpNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.HelpNum))
	}
	return i, nil
}

func (m *DarkPalaceBuyNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceBuyNumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Use {
		dAtA[i] = 0x8
		i++
		if m.Use {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BuyNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.BuyNum))
	}
	return i, nil
}

func (m *DarkPalaceBuyNumAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceBuyNumAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BuyNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.BuyNum))
	}
	return i, nil
}

func (m *DarkPalaceBossNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceBossNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.StageId))
	}
	if m.Blood != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Blood))))
		i += 4
	}
	if m.ReliveTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.ReliveTime))
	}
	return i, nil
}

func (m *EnterDarkPalaceHelpFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDarkPalaceHelpFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DarkPalaceHelpFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceHelpFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DarkPalaceDareNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DarkPalaceDareNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DareNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDarkPalaceBoss(dAtA, i, uint64(m.DareNum))
	}
	return i, nil
}

func encodeVarintDarkPalaceBoss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DarkPalaceLoadReq) Size() (n int) {
	var l int
	_ = l
	if m.Floor != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.Floor))
	}
	return n
}

func (m *DarkPalaceLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.DarkPalaceBoss) > 0 {
		for _, e := range m.DarkPalaceBoss {
			l = e.Size()
			n += 1 + l + sovDarkPalaceBoss(uint64(l))
		}
	}
	return n
}

func (m *EnterDarkPalaceFightReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.StageId))
	}
	return n
}

func (m *DarkPalaceFightResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.StageId))
	}
	if m.Result != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.Result))
	}
	if m.DareNum != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.DareNum))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovDarkPalaceBoss(uint64(l))
	}
	if m.Winner != nil {
		l = m.Winner.Size()
		n += 1 + l + sovDarkPalaceBoss(uint64(l))
	}
	if m.IsHelper {
		n += 2
	}
	if m.HelpNum != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.HelpNum))
	}
	return n
}

func (m *DarkPalaceBuyNumReq) Size() (n int) {
	var l int
	_ = l
	if m.Use {
		n += 2
	}
	if m.BuyNum != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.BuyNum))
	}
	return n
}

func (m *DarkPalaceBuyNumAck) Size() (n int) {
	var l int
	_ = l
	if m.BuyNum != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.BuyNum))
	}
	return n
}

func (m *DarkPalaceBossNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.StageId))
	}
	if m.Blood != 0 {
		n += 5
	}
	if m.ReliveTime != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.ReliveTime))
	}
	return n
}

func (m *EnterDarkPalaceHelpFightReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DarkPalaceHelpFightResultNtf) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DarkPalaceDareNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.DareNum != 0 {
		n += 1 + sovDarkPalaceBoss(uint64(m.DareNum))
	}
	return n
}

func sovDarkPalaceBoss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDarkPalaceBoss(x uint64) (n int) {
	return sovDarkPalaceBoss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DarkPalaceLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Floor", wireType)
			}
			m.Floor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Floor |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DarkPalaceBoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DarkPalaceBoss = append(m.DarkPalaceBoss, &DarkPalaceBossNtf{})
			if err := m.DarkPalaceBoss[len(m.DarkPalaceBoss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterDarkPalaceFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDarkPalaceFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDarkPalaceFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Winner == nil {
				m.Winner = &BriefUserInfo{}
			}
			if err := m.Winner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHelper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHelper = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpNum", wireType)
			}
			m.HelpNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceBuyNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceBuyNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceBuyNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Use = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceBuyNumAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceBuyNumAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceBuyNumAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceBossNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceBossNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceBossNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blood", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Blood = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReliveTime", wireType)
			}
			m.ReliveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReliveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterDarkPalaceHelpFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDarkPalaceHelpFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDarkPalaceHelpFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceHelpFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceHelpFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceHelpFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DarkPalaceDareNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DarkPalaceDareNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DarkPalaceDareNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDarkPalaceBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDarkPalaceBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDarkPalaceBoss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDarkPalaceBoss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDarkPalaceBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDarkPalaceBoss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDarkPalaceBoss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDarkPalaceBoss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDarkPalaceBoss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDarkPalaceBoss   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("darkPalaceBoss.proto", fileDescriptorDarkPalaceBoss) }

var fileDescriptorDarkPalaceBoss = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x5f, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xd9, 0x04, 0xa7, 0xd1, 0x14, 0xa1, 0x76, 0x09, 0xb0, 0x2a, 0x60, 0x45, 0xfb, 0xe4,
	0x3e, 0x10, 0xa1, 0xf6, 0x19, 0x21, 0x42, 0xf8, 0x53, 0x09, 0x45, 0x68, 0x05, 0x07, 0xb0, 0xe3,
	0x71, 0x62, 0xd5, 0xf6, 0x9a, 0x5d, 0x1b, 0xc4, 0x4d, 0x38, 0x12, 0x8f, 0x1c, 0x01, 0x85, 0x13,
	0x70, 0x03, 0xb4, 0x7f, 0xd2, 0xc4, 0x29, 0xf4, 0xcd, 0xdf, 0xce, 0x6f, 0xbc, 0xdf, 0xcc, 0x67,
	0xc3, 0x28, 0x8d, 0xd5, 0xe5, 0x87, 0xb8, 0x88, 0x17, 0x38, 0x95, 0x5a, 0x4f, 0x6a, 0x25, 0x1b,
	0x49, 0x7b, 0x75, 0x72, 0x72, 0x67, 0x21, 0xcb, 0x52, 0x56, 0xee, 0x84, 0x9f, 0xc2, 0xf1, 0xec,
	0x8a, 0x7c, 0x2f, 0xe3, 0x54, 0xe0, 0x67, 0x3a, 0x82, 0x20, 0x2b, 0xa4, 0x54, 0x8c, 0x8c, 0x49,
	0x14, 0x08, 0x27, 0xb8, 0xd8, 0x47, 0x5f, 0x2e, 0x2e, 0xe9, 0x73, 0xb8, 0xdb, 0xbd, 0x89, 0x91,
	0x71, 0x3f, 0x3a, 0x3c, 0xbb, 0x3f, 0xa9, 0x93, 0xc9, 0xac, 0x53, 0x99, 0x37, 0x99, 0xd8, 0x83,
	0xf9, 0x39, 0x3c, 0x7c, 0x5d, 0x35, 0xa8, 0xb6, 0xe4, 0x9b, 0x7c, 0xb9, 0x6a, 0x8c, 0x09, 0x06,
	0x07, 0xba, 0x89, 0x97, 0x78, 0x91, 0x7a, 0x1b, 0x1b, 0xc9, 0xff, 0x10, 0x60, 0xd7, 0x1a, 0x74,
	0x5b, 0x34, 0xf3, 0x26, 0xfb, 0x7f, 0x1b, 0x7d, 0x00, 0x03, 0x65, 0x31, 0xd6, 0xb3, 0x05, 0xaf,
	0x4c, 0x47, 0x1a, 0x2b, 0x9c, 0xb7, 0x25, 0xeb, 0xbb, 0x0e, 0x2f, 0x69, 0x04, 0xc1, 0x52, 0xca,
	0x54, 0xb3, 0xdb, 0x63, 0x12, 0x1d, 0x9e, 0x51, 0x33, 0xd3, 0x5b, 0x73, 0xf0, 0x6a, 0x15, 0x57,
	0x4b, 0x34, 0x03, 0x39, 0x80, 0x9e, 0xc2, 0xe0, 0x6b, 0x5e, 0x55, 0xa8, 0x58, 0x60, 0xd1, 0x63,
	0x83, 0x4e, 0x55, 0x8e, 0xd9, 0x27, 0x8d, 0xea, 0xa2, 0xca, 0xa4, 0xf0, 0x00, 0x3d, 0x81, 0x61,
	0xae, 0xdf, 0x61, 0x51, 0xa3, 0x62, 0x83, 0x31, 0x89, 0x86, 0xe2, 0x4a, 0x1b, 0x2b, 0x2b, 0x2c,
	0x6a, 0x63, 0xe5, 0xc0, 0x59, 0xf1, 0x92, 0xbf, 0x80, 0x7b, 0x3b, 0xdb, 0x6c, 0xbf, 0xcd, 0xdb,
	0xd2, 0x2c, 0xe9, 0x08, 0xfa, 0xad, 0x46, 0x3b, 0xe9, 0x50, 0x98, 0x47, 0x33, 0x65, 0x62, 0xcb,
	0x9b, 0x29, 0x9d, 0xe2, 0x4f, 0xaf, 0xbf, 0xc0, 0xe4, 0xb7, 0xc5, 0x49, 0x07, 0x5f, 0xec, 0x86,
	0xed, 0xd3, 0xbb, 0x61, 0xb7, 0x23, 0x08, 0x92, 0x42, 0xca, 0xd4, 0x5e, 0xda, 0x13, 0x4e, 0xd0,
	0x10, 0x40, 0x61, 0x91, 0x7f, 0xc1, 0x8f, 0x79, 0x89, 0x76, 0xb9, 0x7d, 0xb1, 0x73, 0xc2, 0x9f,
	0xc0, 0xa3, 0xbd, 0xf4, 0xcd, 0x1e, 0x36, 0x5f, 0x00, 0x0f, 0xe1, 0xf1, 0x3f, 0x2b, 0x3e, 0x6a,
	0xfe, 0x0c, 0x46, 0xdb, 0xfa, 0xcc, 0x65, 0xe6, 0x6d, 0x6e, 0x02, 0x25, 0x9d, 0x40, 0xa7, 0x47,
	0x3f, 0xd6, 0x21, 0xf9, 0xb9, 0x0e, 0xc9, 0xaf, 0x75, 0x48, 0xbe, 0xff, 0x0e, 0x6f, 0x25, 0x03,
	0xfb, 0x1b, 0x9c, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x30, 0xb5, 0x37, 0x30, 0x03, 0x00,
	0x00,
}
