// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: title.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 称号激活
type TitleActiveReq struct {
	TitleId int32 `protobuf:"varint,1,opt,name=titleId,proto3" json:"titleId,omitempty"`
}

func (m *TitleActiveReq) Reset()                    { *m = TitleActiveReq{} }
func (m *TitleActiveReq) String() string            { return proto.CompactTextString(m) }
func (*TitleActiveReq) ProtoMessage()               {}
func (*TitleActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{0} }

func (m *TitleActiveReq) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

type TitleActiveAck struct {
	Title *Title `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *TitleActiveAck) Reset()                    { *m = TitleActiveAck{} }
func (m *TitleActiveAck) String() string            { return proto.CompactTextString(m) }
func (*TitleActiveAck) ProtoMessage()               {}
func (*TitleActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{1} }

func (m *TitleActiveAck) GetTitle() *Title {
	if m != nil {
		return m.Title
	}
	return nil
}

// 称号穿戴
type TitleWearReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	TitleId   int32 `protobuf:"varint,2,opt,name=titleId,proto3" json:"titleId,omitempty"`
}

func (m *TitleWearReq) Reset()                    { *m = TitleWearReq{} }
func (m *TitleWearReq) String() string            { return proto.CompactTextString(m) }
func (*TitleWearReq) ProtoMessage()               {}
func (*TitleWearReq) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{2} }

func (m *TitleWearReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *TitleWearReq) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

type TitleWearAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	TitleId   int32 `protobuf:"varint,2,opt,name=titleId,proto3" json:"titleId,omitempty"`
}

func (m *TitleWearAck) Reset()                    { *m = TitleWearAck{} }
func (m *TitleWearAck) String() string            { return proto.CompactTextString(m) }
func (*TitleWearAck) ProtoMessage()               {}
func (*TitleWearAck) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{3} }

func (m *TitleWearAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *TitleWearAck) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

// 称号卸下
type TitleRemoveReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *TitleRemoveReq) Reset()                    { *m = TitleRemoveReq{} }
func (m *TitleRemoveReq) String() string            { return proto.CompactTextString(m) }
func (*TitleRemoveReq) ProtoMessage()               {}
func (*TitleRemoveReq) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{4} }

func (m *TitleRemoveReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type TitleRemoveAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	TitleId   int32 `protobuf:"varint,2,opt,name=titleId,proto3" json:"titleId,omitempty"`
}

func (m *TitleRemoveAck) Reset()                    { *m = TitleRemoveAck{} }
func (m *TitleRemoveAck) String() string            { return proto.CompactTextString(m) }
func (*TitleRemoveAck) ProtoMessage()               {}
func (*TitleRemoveAck) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{5} }

func (m *TitleRemoveAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *TitleRemoveAck) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

// 称号查看
type TitleLookReq struct {
	TitleId int32 `protobuf:"varint,1,opt,name=titleId,proto3" json:"titleId,omitempty"`
}

func (m *TitleLookReq) Reset()                    { *m = TitleLookReq{} }
func (m *TitleLookReq) String() string            { return proto.CompactTextString(m) }
func (*TitleLookReq) ProtoMessage()               {}
func (*TitleLookReq) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{6} }

func (m *TitleLookReq) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

type TitleLookAck struct {
	TitleId int32 `protobuf:"varint,1,opt,name=titleId,proto3" json:"titleId,omitempty"`
}

func (m *TitleLookAck) Reset()                    { *m = TitleLookAck{} }
func (m *TitleLookAck) String() string            { return proto.CompactTextString(m) }
func (*TitleLookAck) ProtoMessage()               {}
func (*TitleLookAck) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{7} }

func (m *TitleLookAck) GetTitleId() int32 {
	if m != nil {
		return m.TitleId
	}
	return 0
}

// 称号自动激活推送
type TitleAutoActiveNtf struct {
	TitleList []*Title `protobuf:"bytes,1,rep,name=titleList" json:"titleList,omitempty"`
}

func (m *TitleAutoActiveNtf) Reset()                    { *m = TitleAutoActiveNtf{} }
func (m *TitleAutoActiveNtf) String() string            { return proto.CompactTextString(m) }
func (*TitleAutoActiveNtf) ProtoMessage()               {}
func (*TitleAutoActiveNtf) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{8} }

func (m *TitleAutoActiveNtf) GetTitleList() []*Title {
	if m != nil {
		return m.TitleList
	}
	return nil
}

// 称号过期推送
type TitleExpireNtf struct {
	TitleList []*Title `protobuf:"bytes,1,rep,name=titleList" json:"titleList,omitempty"`
}

func (m *TitleExpireNtf) Reset()                    { *m = TitleExpireNtf{} }
func (m *TitleExpireNtf) String() string            { return proto.CompactTextString(m) }
func (*TitleExpireNtf) ProtoMessage()               {}
func (*TitleExpireNtf) Descriptor() ([]byte, []int) { return fileDescriptorTitle, []int{9} }

func (m *TitleExpireNtf) GetTitleList() []*Title {
	if m != nil {
		return m.TitleList
	}
	return nil
}

func init() {
	proto.RegisterType((*TitleActiveReq)(nil), "pb.TitleActiveReq")
	proto.RegisterType((*TitleActiveAck)(nil), "pb.TitleActiveAck")
	proto.RegisterType((*TitleWearReq)(nil), "pb.TitleWearReq")
	proto.RegisterType((*TitleWearAck)(nil), "pb.TitleWearAck")
	proto.RegisterType((*TitleRemoveReq)(nil), "pb.TitleRemoveReq")
	proto.RegisterType((*TitleRemoveAck)(nil), "pb.TitleRemoveAck")
	proto.RegisterType((*TitleLookReq)(nil), "pb.TitleLookReq")
	proto.RegisterType((*TitleLookAck)(nil), "pb.TitleLookAck")
	proto.RegisterType((*TitleAutoActiveNtf)(nil), "pb.TitleAutoActiveNtf")
	proto.RegisterType((*TitleExpireNtf)(nil), "pb.TitleExpireNtf")
}
func (m *TitleActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TitleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *TitleActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Title != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.Title.Size()))
		n1, err := m.Title.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TitleWearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleWearReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.TitleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *TitleWearAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleWearAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.TitleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *TitleRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *TitleRemoveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleRemoveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.TitleId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *TitleLookReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleLookReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TitleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *TitleLookAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleLookAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TitleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitle(dAtA, i, uint64(m.TitleId))
	}
	return i, nil
}

func (m *TitleAutoActiveNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleAutoActiveNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TitleList) > 0 {
		for _, msg := range m.TitleList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTitle(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TitleExpireNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleExpireNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TitleList) > 0 {
		for _, msg := range m.TitleList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTitle(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintTitle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TitleActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.TitleId != 0 {
		n += 1 + sovTitle(uint64(m.TitleId))
	}
	return n
}

func (m *TitleActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Title != nil {
		l = m.Title.Size()
		n += 1 + l + sovTitle(uint64(l))
	}
	return n
}

func (m *TitleWearReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovTitle(uint64(m.HeroIndex))
	}
	if m.TitleId != 0 {
		n += 1 + sovTitle(uint64(m.TitleId))
	}
	return n
}

func (m *TitleWearAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovTitle(uint64(m.HeroIndex))
	}
	if m.TitleId != 0 {
		n += 1 + sovTitle(uint64(m.TitleId))
	}
	return n
}

func (m *TitleRemoveReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovTitle(uint64(m.HeroIndex))
	}
	return n
}

func (m *TitleRemoveAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovTitle(uint64(m.HeroIndex))
	}
	if m.TitleId != 0 {
		n += 1 + sovTitle(uint64(m.TitleId))
	}
	return n
}

func (m *TitleLookReq) Size() (n int) {
	var l int
	_ = l
	if m.TitleId != 0 {
		n += 1 + sovTitle(uint64(m.TitleId))
	}
	return n
}

func (m *TitleLookAck) Size() (n int) {
	var l int
	_ = l
	if m.TitleId != 0 {
		n += 1 + sovTitle(uint64(m.TitleId))
	}
	return n
}

func (m *TitleAutoActiveNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.TitleList) > 0 {
		for _, e := range m.TitleList {
			l = e.Size()
			n += 1 + l + sovTitle(uint64(l))
		}
	}
	return n
}

func (m *TitleExpireNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.TitleList) > 0 {
		for _, e := range m.TitleList {
			l = e.Size()
			n += 1 + l + sovTitle(uint64(l))
		}
	}
	return n
}

func sovTitle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTitle(x uint64) (n int) {
	return sovTitle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TitleActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Title == nil {
				m.Title = &Title{}
			}
			if err := m.Title.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleWearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleWearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleWearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleWearAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleWearAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleWearAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleRemoveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleRemoveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleRemoveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleLookReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleLookReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleLookReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleLookAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleLookAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleLookAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleId", wireType)
			}
			m.TitleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TitleId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleAutoActiveNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleAutoActiveNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleAutoActiveNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleList = append(m.TitleList, &Title{})
			if err := m.TitleList[len(m.TitleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleExpireNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleExpireNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleExpireNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitle
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleList = append(m.TitleList, &Title{})
			if err := m.TitleList[len(m.TitleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTitle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTitle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTitle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTitle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitle   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("title.proto", fileDescriptorTitle) }

var fileDescriptorTitle = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xc9, 0x2c, 0xc9,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf,
	0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x69, 0x71, 0xf1, 0x85, 0x80, 0x14, 0x38, 0x26, 0x97, 0x64,
	0x96, 0xa5, 0x06, 0xa5, 0x16, 0x0a, 0x49, 0x70, 0xb1, 0x83, 0xb5, 0x78, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0xc1, 0xb8, 0x4a, 0x86, 0x28, 0x6a, 0x1d, 0x93, 0xb3, 0x85, 0xe4, 0xb9,
	0x58, 0xc1, 0x92, 0x60, 0x95, 0xdc, 0x46, 0x9c, 0x7a, 0x05, 0x49, 0x7a, 0x60, 0x25, 0x41, 0x10,
	0x71, 0x25, 0x37, 0x2e, 0x1e, 0x30, 0x3f, 0x3c, 0x35, 0xb1, 0x08, 0x64, 0xb8, 0x0c, 0x17, 0x67,
	0x46, 0x6a, 0x51, 0xbe, 0x67, 0x5e, 0x4a, 0x6a, 0x05, 0xd4, 0x78, 0x84, 0x00, 0xb2, 0xd5, 0x4c,
	0xa8, 0x56, 0x23, 0x9b, 0x03, 0xb2, 0x98, 0x5c, 0x73, 0xf4, 0xa0, 0x5e, 0x08, 0x4a, 0xcd, 0xcd,
	0x87, 0x78, 0x17, 0xaf, 0x49, 0x4a, 0x1e, 0x28, 0xea, 0x29, 0xb1, 0x59, 0x03, 0xea, 0x03, 0x9f,
	0xfc, 0xfc, 0x6c, 0xfc, 0xc1, 0x8c, 0xac, 0x12, 0x64, 0x23, 0x6e, 0x95, 0xb6, 0x5c, 0x42, 0x90,
	0x08, 0x29, 0x2d, 0xc9, 0x87, 0x44, 0x8a, 0x5f, 0x49, 0x9a, 0x90, 0x3a, 0x17, 0x27, 0x58, 0x81,
	0x4f, 0x66, 0x71, 0x89, 0x04, 0xa3, 0x02, 0x33, 0x6a, 0xc4, 0x20, 0xe4, 0x94, 0x2c, 0xa1, 0x9e,
	0x73, 0xad, 0x28, 0xc8, 0x2c, 0x22, 0x49, 0xab, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e,
	0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0x3d, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc8, 0xab, 0x10, 0x24, 0x70, 0x02, 0x00, 0x00,
}
