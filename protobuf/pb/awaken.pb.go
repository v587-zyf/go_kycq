// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: awaken.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 打开页面
type AwakenLoadReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *AwakenLoadReq) Reset()                    { *m = AwakenLoadReq{} }
func (m *AwakenLoadReq) String() string            { return proto.CompactTextString(m) }
func (*AwakenLoadReq) ProtoMessage()               {}
func (*AwakenLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorAwaken, []int{0} }

func (m *AwakenLoadReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type AwakenLoadAck struct {
	HeroIndex int32                 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Awakens   map[int32]*AwakenUnit `protobuf:"bytes,2,rep,name=awakens" json:"awakens,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AwakenLoadAck) Reset()                    { *m = AwakenLoadAck{} }
func (m *AwakenLoadAck) String() string            { return proto.CompactTextString(m) }
func (*AwakenLoadAck) ProtoMessage()               {}
func (*AwakenLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorAwaken, []int{1} }

func (m *AwakenLoadAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *AwakenLoadAck) GetAwakens() map[int32]*AwakenUnit {
	if m != nil {
		return m.Awakens
	}
	return nil
}

// 觉醒
type AwakenReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *AwakenReq) Reset()                    { *m = AwakenReq{} }
func (m *AwakenReq) String() string            { return proto.CompactTextString(m) }
func (*AwakenReq) ProtoMessage()               {}
func (*AwakenReq) Descriptor() ([]byte, []int) { return fileDescriptorAwaken, []int{2} }

func (m *AwakenReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *AwakenReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type AwakenAck struct {
	HeroIndex  int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos        int32           `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	AwakenInfo *AwakenUnit     `protobuf:"bytes,3,opt,name=awakenInfo" json:"awakenInfo,omitempty"`
	Goods      *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *AwakenAck) Reset()                    { *m = AwakenAck{} }
func (m *AwakenAck) String() string            { return proto.CompactTextString(m) }
func (*AwakenAck) ProtoMessage()               {}
func (*AwakenAck) Descriptor() ([]byte, []int) { return fileDescriptorAwaken, []int{3} }

func (m *AwakenAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *AwakenAck) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *AwakenAck) GetAwakenInfo() *AwakenUnit {
	if m != nil {
		return m.AwakenInfo
	}
	return nil
}

func (m *AwakenAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type AwakenUnit struct {
	Level int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Exp   int32 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *AwakenUnit) Reset()                    { *m = AwakenUnit{} }
func (m *AwakenUnit) String() string            { return proto.CompactTextString(m) }
func (*AwakenUnit) ProtoMessage()               {}
func (*AwakenUnit) Descriptor() ([]byte, []int) { return fileDescriptorAwaken, []int{4} }

func (m *AwakenUnit) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AwakenUnit) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func init() {
	proto.RegisterType((*AwakenLoadReq)(nil), "pb.AwakenLoadReq")
	proto.RegisterType((*AwakenLoadAck)(nil), "pb.AwakenLoadAck")
	proto.RegisterType((*AwakenReq)(nil), "pb.AwakenReq")
	proto.RegisterType((*AwakenAck)(nil), "pb.AwakenAck")
	proto.RegisterType((*AwakenUnit)(nil), "pb.AwakenUnit")
}
func (m *AwakenLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwakenLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *AwakenLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwakenLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.HeroIndex))
	}
	if len(m.Awakens) > 0 {
		for k, _ := range m.Awakens {
			dAtA[i] = 0x12
			i++
			v := m.Awakens[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAwaken(uint64(msgSize))
			}
			mapSize := 1 + sovAwaken(uint64(k)) + msgSize
			i = encodeVarintAwaken(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintAwaken(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAwaken(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *AwakenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwakenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *AwakenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwakenAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.Pos))
	}
	if m.AwakenInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.AwakenInfo.Size()))
		n2, err := m.AwakenInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *AwakenUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AwakenUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAwaken(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func encodeVarintAwaken(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AwakenLoadReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAwaken(uint64(m.HeroIndex))
	}
	return n
}

func (m *AwakenLoadAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAwaken(uint64(m.HeroIndex))
	}
	if len(m.Awakens) > 0 {
		for k, v := range m.Awakens {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAwaken(uint64(l))
			}
			mapEntrySize := 1 + sovAwaken(uint64(k)) + l
			n += mapEntrySize + 1 + sovAwaken(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AwakenReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAwaken(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovAwaken(uint64(m.Pos))
	}
	return n
}

func (m *AwakenAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAwaken(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovAwaken(uint64(m.Pos))
	}
	if m.AwakenInfo != nil {
		l = m.AwakenInfo.Size()
		n += 1 + l + sovAwaken(uint64(l))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovAwaken(uint64(l))
	}
	return n
}

func (m *AwakenUnit) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovAwaken(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovAwaken(uint64(m.Exp))
	}
	return n
}

func sovAwaken(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAwaken(x uint64) (n int) {
	return sovAwaken(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AwakenLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwaken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwakenLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwakenLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwaken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwaken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwakenLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwaken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwakenLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwakenLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awakens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwaken
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Awakens == nil {
				m.Awakens = make(map[int32]*AwakenUnit)
			}
			var mapkey int32
			var mapvalue *AwakenUnit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAwaken
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwaken
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAwaken
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAwaken
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAwaken
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AwakenUnit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAwaken(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAwaken
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Awakens[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwaken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwaken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwakenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwaken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwakenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwakenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwaken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwaken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwakenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwaken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwakenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwakenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwakenInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwaken
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AwakenInfo == nil {
				m.AwakenInfo = &AwakenUnit{}
			}
			if err := m.AwakenInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAwaken
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAwaken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwaken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AwakenUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAwaken
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AwakenUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AwakenUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAwaken(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAwaken
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAwaken(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAwaken
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAwaken
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAwaken
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAwaken
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAwaken(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAwaken = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAwaken   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("awaken.proto", fileDescriptorAwaken) }

var fileDescriptorAwaken = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2c, 0x4f, 0xcc,
	0x4e, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce,
	0xcf, 0xcd, 0xcd, 0x87, 0x8a, 0x28, 0xe9, 0x72, 0xf1, 0x3a, 0x82, 0x55, 0xf8, 0xe4, 0x27, 0xa6,
	0x04, 0xa5, 0x16, 0x0a, 0xc9, 0x70, 0x71, 0x66, 0xa4, 0x16, 0xe5, 0x7b, 0xe6, 0xa5, 0xa4, 0x56,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x94, 0x36, 0x33, 0x22, 0xab, 0x77, 0x4c,
	0xce, 0xc6, 0xaf, 0x5e, 0xc8, 0x82, 0x8b, 0x1d, 0xe2, 0x80, 0x62, 0x09, 0x26, 0x05, 0x66, 0x0d,
	0x6e, 0x23, 0x39, 0xbd, 0x82, 0x24, 0x3d, 0x14, 0x13, 0xa0, 0xbc, 0x62, 0xd7, 0xbc, 0x92, 0xa2,
	0xca, 0x20, 0x98, 0x72, 0x29, 0x2f, 0x2e, 0x1e, 0x64, 0x09, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4,
	0x4a, 0xa8, 0x0d, 0x20, 0xa6, 0x90, 0x0a, 0x17, 0x6b, 0x59, 0x62, 0x4e, 0x69, 0xaa, 0x04, 0x93,
	0x02, 0xa3, 0x06, 0xb7, 0x11, 0x1f, 0xc2, 0xe4, 0xd0, 0xbc, 0xcc, 0x92, 0x20, 0x88, 0xa4, 0x15,
	0x93, 0x05, 0xa3, 0x92, 0x35, 0x17, 0x27, 0x44, 0x82, 0xa0, 0x07, 0x41, 0xd6, 0x14, 0xe4, 0x17,
	0x83, 0x8d, 0x64, 0x0d, 0x02, 0x31, 0x95, 0xa6, 0x32, 0xc2, 0x74, 0x13, 0xf6, 0x2e, 0x86, 0x6e,
	0x21, 0x3d, 0x2e, 0x2e, 0x88, 0x8f, 0x3c, 0xf3, 0xd2, 0xf2, 0x25, 0x98, 0xb1, 0xba, 0x14, 0x49,
	0x85, 0x90, 0x06, 0x17, 0x6b, 0x7a, 0x7e, 0x7e, 0x4a, 0xb1, 0x04, 0x0b, 0x58, 0xa9, 0x10, 0x48,
	0xa9, 0x3b, 0x48, 0xc0, 0x39, 0x23, 0x31, 0x2f, 0x3d, 0xd5, 0xaf, 0x24, 0x2d, 0x08, 0xa2, 0x40,
	0xc9, 0x84, 0x8b, 0x0b, 0x61, 0x86, 0x90, 0x08, 0x17, 0x6b, 0x4e, 0x6a, 0x59, 0x6a, 0x0e, 0xd4,
	0x4d, 0x10, 0x0e, 0xc8, 0x3d, 0xa9, 0x15, 0x05, 0x30, 0xf7, 0xa4, 0x56, 0x14, 0x38, 0x09, 0x9c,
	0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31,
	0x24, 0xb1, 0x81, 0x13, 0x82, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x32, 0x93, 0xa7, 0x6e, 0x2a,
	0x02, 0x00, 0x00,
}
