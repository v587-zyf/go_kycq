// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cutTreasure.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CutTreasureUpLvReq struct {
}

func (m *CutTreasureUpLvReq) Reset()                    { *m = CutTreasureUpLvReq{} }
func (m *CutTreasureUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*CutTreasureUpLvReq) ProtoMessage()               {}
func (*CutTreasureUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorCutTreasure, []int{0} }

type CutTreasureUpLvAck struct {
	CutTreasureLv int32 `protobuf:"varint,1,opt,name=cutTreasureLv,proto3" json:"cutTreasureLv,omitempty"`
}

func (m *CutTreasureUpLvAck) Reset()                    { *m = CutTreasureUpLvAck{} }
func (m *CutTreasureUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*CutTreasureUpLvAck) ProtoMessage()               {}
func (*CutTreasureUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorCutTreasure, []int{1} }

func (m *CutTreasureUpLvAck) GetCutTreasureLv() int32 {
	if m != nil {
		return m.CutTreasureLv
	}
	return 0
}

type CutTreasureUseReq struct {
}

func (m *CutTreasureUseReq) Reset()                    { *m = CutTreasureUseReq{} }
func (m *CutTreasureUseReq) String() string            { return proto.CompactTextString(m) }
func (*CutTreasureUseReq) ProtoMessage()               {}
func (*CutTreasureUseReq) Descriptor() ([]byte, []int) { return fileDescriptorCutTreasure, []int{2} }

type CutTreasureUseAck struct {
	UseTime   int32 `protobuf:"varint,1,opt,name=useTime,proto3" json:"useTime,omitempty"`
	CdEndTime int32 `protobuf:"varint,2,opt,name=cdEndTime,proto3" json:"cdEndTime,omitempty"`
}

func (m *CutTreasureUseAck) Reset()                    { *m = CutTreasureUseAck{} }
func (m *CutTreasureUseAck) String() string            { return proto.CompactTextString(m) }
func (*CutTreasureUseAck) ProtoMessage()               {}
func (*CutTreasureUseAck) Descriptor() ([]byte, []int) { return fileDescriptorCutTreasure, []int{3} }

func (m *CutTreasureUseAck) GetUseTime() int32 {
	if m != nil {
		return m.UseTime
	}
	return 0
}

func (m *CutTreasureUseAck) GetCdEndTime() int32 {
	if m != nil {
		return m.CdEndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*CutTreasureUpLvReq)(nil), "pb.CutTreasureUpLvReq")
	proto.RegisterType((*CutTreasureUpLvAck)(nil), "pb.CutTreasureUpLvAck")
	proto.RegisterType((*CutTreasureUseReq)(nil), "pb.CutTreasureUseReq")
	proto.RegisterType((*CutTreasureUseAck)(nil), "pb.CutTreasureUseAck")
}
func (m *CutTreasureUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CutTreasureUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CutTreasureUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CutTreasureUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CutTreasureLv != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCutTreasure(dAtA, i, uint64(m.CutTreasureLv))
	}
	return i, nil
}

func (m *CutTreasureUseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CutTreasureUseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CutTreasureUseAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CutTreasureUseAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UseTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCutTreasure(dAtA, i, uint64(m.UseTime))
	}
	if m.CdEndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCutTreasure(dAtA, i, uint64(m.CdEndTime))
	}
	return i, nil
}

func encodeVarintCutTreasure(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CutTreasureUpLvReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CutTreasureUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.CutTreasureLv != 0 {
		n += 1 + sovCutTreasure(uint64(m.CutTreasureLv))
	}
	return n
}

func (m *CutTreasureUseReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CutTreasureUseAck) Size() (n int) {
	var l int
	_ = l
	if m.UseTime != 0 {
		n += 1 + sovCutTreasure(uint64(m.UseTime))
	}
	if m.CdEndTime != 0 {
		n += 1 + sovCutTreasure(uint64(m.CdEndTime))
	}
	return n
}

func sovCutTreasure(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCutTreasure(x uint64) (n int) {
	return sovCutTreasure(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CutTreasureUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCutTreasure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CutTreasureUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CutTreasureUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCutTreasure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCutTreasure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CutTreasureUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCutTreasure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CutTreasureUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CutTreasureUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutTreasureLv", wireType)
			}
			m.CutTreasureLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCutTreasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutTreasureLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCutTreasure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCutTreasure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CutTreasureUseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCutTreasure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CutTreasureUseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CutTreasureUseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCutTreasure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCutTreasure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CutTreasureUseAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCutTreasure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CutTreasureUseAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CutTreasureUseAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			m.UseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCutTreasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdEndTime", wireType)
			}
			m.CdEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCutTreasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCutTreasure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCutTreasure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCutTreasure(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCutTreasure
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCutTreasure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCutTreasure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCutTreasure
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCutTreasure
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCutTreasure(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCutTreasure = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCutTreasure   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("cutTreasure.proto", fileDescriptorCutTreasure) }

var fileDescriptorCutTreasure = []byte{
	// 154 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2e, 0x2d, 0x09,
	0x29, 0x4a, 0x4d, 0x2c, 0x2e, 0x2d, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a,
	0x48, 0x52, 0x12, 0xe1, 0x12, 0x72, 0x46, 0x48, 0x84, 0x16, 0xf8, 0x94, 0x05, 0xa5, 0x16, 0x2a,
	0x59, 0x61, 0x88, 0x3a, 0x26, 0x67, 0x0b, 0xa9, 0x70, 0xf1, 0x22, 0x19, 0xe2, 0x53, 0x26, 0xc1,
	0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0x84, 0x2a, 0xa8, 0x24, 0xcc, 0x25, 0x88, 0xac, 0xb7, 0x38, 0x15,
	0x64, 0xa0, 0x37, 0xba, 0x20, 0xc8, 0x3c, 0x09, 0x2e, 0xf6, 0xd2, 0xe2, 0xd4, 0x90, 0xcc, 0xdc,
	0x54, 0xa8, 0x49, 0x30, 0xae, 0x90, 0x0c, 0x17, 0x67, 0x72, 0x8a, 0x6b, 0x5e, 0x0a, 0x58, 0x8e,
	0x09, 0x2c, 0x87, 0x10, 0x70, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x7b, 0xc8, 0x18, 0x10, 0x00, 0x00,
	0xff, 0xff, 0x83, 0x10, 0x43, 0x5e, 0xe5, 0x00, 0x00, 0x00,
}
