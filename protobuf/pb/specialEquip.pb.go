// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: specialEquip.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SpecialEquipChangeReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	BagPos    int32 `protobuf:"varint,3,opt,name=bagPos,proto3" json:"bagPos,omitempty"`
	Type      int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *SpecialEquipChangeReq) Reset()         { *m = SpecialEquipChangeReq{} }
func (m *SpecialEquipChangeReq) String() string { return proto.CompactTextString(m) }
func (*SpecialEquipChangeReq) ProtoMessage()    {}
func (*SpecialEquipChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorSpecialEquip, []int{0}
}

func (m *SpecialEquipChangeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SpecialEquipChangeReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SpecialEquipChangeReq) GetBagPos() int32 {
	if m != nil {
		return m.BagPos
	}
	return 0
}

func (m *SpecialEquipChangeReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SpecialEquipChangeAck struct {
	HeroIndex    int32             `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos          int32             `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Type         int32             `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	SpecialEquip *SpecialEquipUnit `protobuf:"bytes,4,opt,name=specialEquip" json:"specialEquip,omitempty"`
	Goods        *GoodsChangeNtf   `protobuf:"bytes,5,opt,name=goods" json:"goods,omitempty"`
}

func (m *SpecialEquipChangeAck) Reset()         { *m = SpecialEquipChangeAck{} }
func (m *SpecialEquipChangeAck) String() string { return proto.CompactTextString(m) }
func (*SpecialEquipChangeAck) ProtoMessage()    {}
func (*SpecialEquipChangeAck) Descriptor() ([]byte, []int) {
	return fileDescriptorSpecialEquip, []int{1}
}

func (m *SpecialEquipChangeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SpecialEquipChangeAck) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SpecialEquipChangeAck) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SpecialEquipChangeAck) GetSpecialEquip() *SpecialEquipUnit {
	if m != nil {
		return m.SpecialEquip
	}
	return nil
}

func (m *SpecialEquipChangeAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type SpecialEquipRemoveReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Type      int32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *SpecialEquipRemoveReq) Reset()         { *m = SpecialEquipRemoveReq{} }
func (m *SpecialEquipRemoveReq) String() string { return proto.CompactTextString(m) }
func (*SpecialEquipRemoveReq) ProtoMessage()    {}
func (*SpecialEquipRemoveReq) Descriptor() ([]byte, []int) {
	return fileDescriptorSpecialEquip, []int{2}
}

func (m *SpecialEquipRemoveReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SpecialEquipRemoveReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SpecialEquipRemoveReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SpecialEquipRemoveAck struct {
	HeroIndex int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32           `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Type      int32           `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *SpecialEquipRemoveAck) Reset()         { *m = SpecialEquipRemoveAck{} }
func (m *SpecialEquipRemoveAck) String() string { return proto.CompactTextString(m) }
func (*SpecialEquipRemoveAck) ProtoMessage()    {}
func (*SpecialEquipRemoveAck) Descriptor() ([]byte, []int) {
	return fileDescriptorSpecialEquip, []int{3}
}

func (m *SpecialEquipRemoveAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SpecialEquipRemoveAck) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SpecialEquipRemoveAck) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SpecialEquipRemoveAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func init() {
	proto.RegisterType((*SpecialEquipChangeReq)(nil), "pb.SpecialEquipChangeReq")
	proto.RegisterType((*SpecialEquipChangeAck)(nil), "pb.SpecialEquipChangeAck")
	proto.RegisterType((*SpecialEquipRemoveReq)(nil), "pb.SpecialEquipRemoveReq")
	proto.RegisterType((*SpecialEquipRemoveAck)(nil), "pb.SpecialEquipRemoveAck")
}
func (m *SpecialEquipChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialEquipChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Pos))
	}
	if m.BagPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.BagPos))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *SpecialEquipChangeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialEquipChangeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Pos))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Type))
	}
	if m.SpecialEquip != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.SpecialEquip.Size()))
		n1, err := m.SpecialEquip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Goods != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *SpecialEquipRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialEquipRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Pos))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *SpecialEquipRemoveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialEquipRemoveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Pos))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Type))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpecialEquip(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintSpecialEquip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SpecialEquipChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSpecialEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Pos))
	}
	if m.BagPos != 0 {
		n += 1 + sovSpecialEquip(uint64(m.BagPos))
	}
	if m.Type != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Type))
	}
	return n
}

func (m *SpecialEquipChangeAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSpecialEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Pos))
	}
	if m.Type != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Type))
	}
	if m.SpecialEquip != nil {
		l = m.SpecialEquip.Size()
		n += 1 + l + sovSpecialEquip(uint64(l))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovSpecialEquip(uint64(l))
	}
	return n
}

func (m *SpecialEquipRemoveReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSpecialEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Pos))
	}
	if m.Type != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Type))
	}
	return n
}

func (m *SpecialEquipRemoveAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSpecialEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Pos))
	}
	if m.Type != 0 {
		n += 1 + sovSpecialEquip(uint64(m.Type))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovSpecialEquip(uint64(l))
	}
	return n
}

func sovSpecialEquip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSpecialEquip(x uint64) (n int) {
	return sovSpecialEquip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpecialEquipChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialEquipChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialEquipChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagPos", wireType)
			}
			m.BagPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialEquipChangeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialEquipChangeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialEquipChangeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialEquip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialEquip == nil {
				m.SpecialEquip = &SpecialEquipUnit{}
			}
			if err := m.SpecialEquip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialEquipRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialEquipRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialEquipRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialEquipRemoveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialEquipRemoveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialEquipRemoveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpecialEquip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpecialEquip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecialEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSpecialEquip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpecialEquip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpecialEquip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpecialEquip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpecialEquip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("specialEquip.proto", fileDescriptorSpecialEquip) }

var fileDescriptorSpecialEquip = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x2e, 0x48, 0x4d,
	0xce, 0x4c, 0xcc, 0x71, 0x2d, 0x2c, 0xcd, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x15, 0x73, 0x89,
	0x06, 0x23, 0xa9, 0x73, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0x0d, 0x4a, 0x2d, 0x14, 0x92, 0xe1, 0xe2,
	0xcc, 0x48, 0x2d, 0xca, 0xf7, 0xcc, 0x4b, 0x49, 0xad, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d,
	0x42, 0x08, 0x08, 0x09, 0x70, 0x31, 0x17, 0xe4, 0x17, 0x4b, 0x30, 0x81, 0xc5, 0x41, 0x4c, 0x21,
	0x31, 0x2e, 0xb6, 0xa4, 0xc4, 0xf4, 0x80, 0xfc, 0x62, 0x09, 0x66, 0xb0, 0x20, 0x94, 0x27, 0x24,
	0xc4, 0xc5, 0x52, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0x02, 0x16, 0x05, 0xb3, 0x95, 0xf6, 0x33, 0x62,
	0xb3, 0xd5, 0x31, 0x39, 0x9b, 0x64, 0x5b, 0x61, 0xa6, 0x33, 0x23, 0x4c, 0x17, 0xb2, 0xe0, 0xe2,
	0x41, 0xf6, 0x3a, 0xd8, 0x66, 0x6e, 0x23, 0x11, 0xbd, 0x82, 0x24, 0x3d, 0x64, 0x4b, 0x43, 0xf3,
	0x32, 0x4b, 0x82, 0x50, 0x54, 0x0a, 0x69, 0x70, 0xb1, 0xa6, 0xe7, 0xe7, 0xa7, 0x14, 0x4b, 0xb0,
	0x82, 0xb5, 0x08, 0x81, 0xb4, 0xb8, 0x83, 0x04, 0x20, 0x0e, 0xf4, 0x2b, 0x49, 0x0b, 0x82, 0x28,
	0x50, 0x8a, 0x46, 0xf5, 0x40, 0x50, 0x6a, 0x6e, 0x7e, 0x19, 0x59, 0xc1, 0x86, 0xc5, 0x03, 0x4a,
	0xad, 0x8c, 0xd8, 0x4c, 0xa7, 0x56, 0xf0, 0xc0, 0x3d, 0xc9, 0x42, 0xc0, 0x93, 0x4e, 0x02, 0x27,
	0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c,
	0x49, 0x6c, 0xe0, 0x44, 0x63, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xbb, 0x67, 0x1c, 0x5c,
	0x02, 0x00, 0x00,
}
