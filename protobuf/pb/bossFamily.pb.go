// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bossFamily.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 获取bossfamily信息
type GetBossFamilyInfoReq struct {
	BossFamilyType int32 `protobuf:"varint,1,opt,name=bossFamilyType,proto3" json:"bossFamilyType,omitempty"`
}

func (m *GetBossFamilyInfoReq) Reset()                    { *m = GetBossFamilyInfoReq{} }
func (m *GetBossFamilyInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetBossFamilyInfoReq) ProtoMessage()               {}
func (*GetBossFamilyInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorBossFamily, []int{0} }

func (m *GetBossFamilyInfoReq) GetBossFamilyType() int32 {
	if m != nil {
		return m.BossFamilyType
	}
	return 0
}

// //获取bossfamily信息
type GetBossFamilyInfoAck struct {
	BossFamilyInfo map[int32]int32 `protobuf:"bytes,1,rep,name=bossFamilyInfo" json:"bossFamilyInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GetBossFamilyInfoAck) Reset()                    { *m = GetBossFamilyInfoAck{} }
func (m *GetBossFamilyInfoAck) String() string            { return proto.CompactTextString(m) }
func (*GetBossFamilyInfoAck) ProtoMessage()               {}
func (*GetBossFamilyInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorBossFamily, []int{1} }

func (m *GetBossFamilyInfoAck) GetBossFamilyInfo() map[int32]int32 {
	if m != nil {
		return m.BossFamilyInfo
	}
	return nil
}

// 获取bossfamily信息
type EnterBossFamilyReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterBossFamilyReq) Reset()                    { *m = EnterBossFamilyReq{} }
func (m *EnterBossFamilyReq) String() string            { return proto.CompactTextString(m) }
func (*EnterBossFamilyReq) ProtoMessage()               {}
func (*EnterBossFamilyReq) Descriptor() ([]byte, []int) { return fileDescriptorBossFamily, []int{2} }

func (m *EnterBossFamilyReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func init() {
	proto.RegisterType((*GetBossFamilyInfoReq)(nil), "pb.GetBossFamilyInfoReq")
	proto.RegisterType((*GetBossFamilyInfoAck)(nil), "pb.GetBossFamilyInfoAck")
	proto.RegisterType((*EnterBossFamilyReq)(nil), "pb.EnterBossFamilyReq")
}
func (m *GetBossFamilyInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBossFamilyInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BossFamilyType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBossFamily(dAtA, i, uint64(m.BossFamilyType))
	}
	return i, nil
}

func (m *GetBossFamilyInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBossFamilyInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BossFamilyInfo) > 0 {
		for k, _ := range m.BossFamilyInfo {
			dAtA[i] = 0xa
			i++
			v := m.BossFamilyInfo[k]
			mapSize := 1 + sovBossFamily(uint64(k)) + 1 + sovBossFamily(uint64(v))
			i = encodeVarintBossFamily(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBossFamily(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintBossFamily(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *EnterBossFamilyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterBossFamilyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBossFamily(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func encodeVarintBossFamily(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetBossFamilyInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.BossFamilyType != 0 {
		n += 1 + sovBossFamily(uint64(m.BossFamilyType))
	}
	return n
}

func (m *GetBossFamilyInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.BossFamilyInfo) > 0 {
		for k, v := range m.BossFamilyInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + sovBossFamily(uint64(k)) + 1 + sovBossFamily(uint64(v))
			n += mapEntrySize + 1 + sovBossFamily(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EnterBossFamilyReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovBossFamily(uint64(m.StageId))
	}
	return n
}

func sovBossFamily(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBossFamily(x uint64) (n int) {
	return sovBossFamily(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBossFamilyInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossFamily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBossFamilyInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBossFamilyInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossFamilyType", wireType)
			}
			m.BossFamilyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossFamily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossFamilyType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossFamily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBossFamily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBossFamilyInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossFamily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBossFamilyInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBossFamilyInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossFamilyInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossFamily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBossFamily
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BossFamilyInfo == nil {
				m.BossFamilyInfo = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBossFamily
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBossFamily
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBossFamily
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBossFamily(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBossFamily
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BossFamilyInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBossFamily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBossFamily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterBossFamilyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBossFamily
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterBossFamilyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterBossFamilyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBossFamily
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBossFamily(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBossFamily
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBossFamily(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBossFamily
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossFamily
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBossFamily
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBossFamily
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBossFamily
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBossFamily(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBossFamily = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBossFamily   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bossFamily.proto", fileDescriptorBossFamily) }

var fileDescriptorBossFamily = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xca, 0x2f, 0x2e,
	0x76, 0x4b, 0xcc, 0xcd, 0xcc, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48,
	0x52, 0xb2, 0xe3, 0x12, 0x71, 0x4f, 0x2d, 0x71, 0x82, 0x4b, 0x79, 0xe6, 0xa5, 0xe5, 0x07, 0xa5,
	0x16, 0x0a, 0xa9, 0x71, 0xf1, 0x21, 0xd4, 0x87, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0xa1, 0x89, 0x2a, 0xad, 0x67, 0xc4, 0x62, 0x80, 0x63, 0x72, 0xb6, 0x50, 0x08, 0xb2,
	0x01, 0x20, 0x41, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x1d, 0xbd, 0x82, 0x24, 0x3d, 0x6c,
	0x3a, 0xf4, 0x50, 0x45, 0x5c, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0xd0, 0xcc, 0x90, 0x72, 0xe4, 0x12,
	0xc6, 0xa2, 0x4c, 0x48, 0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x12, 0xea, 0x44, 0x10, 0x53, 0x48, 0x84,
	0x8b, 0xb5, 0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x09, 0x2c, 0x06, 0xe1, 0x58, 0x31, 0x59, 0x30,
	0x2a, 0xe9, 0x71, 0x09, 0xb9, 0xe6, 0x95, 0xa4, 0x16, 0x21, 0xcc, 0x01, 0xf9, 0x57, 0x82, 0x8b,
	0xbd, 0xb8, 0x24, 0x31, 0x3d, 0xd5, 0x33, 0x05, 0x6a, 0x0a, 0x8c, 0xeb, 0x24, 0x70, 0xe2, 0x91,
	0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x90, 0xc4,
	0x06, 0x0e, 0x3e, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x7b, 0x2f, 0x37, 0x52, 0x01,
	0x00, 0x00,
}
