// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shop.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 列表
type ShopListReq struct {
	ShopType int32 `protobuf:"varint,1,opt,name=shopType,proto3" json:"shopType,omitempty"`
}

func (m *ShopListReq) Reset()                    { *m = ShopListReq{} }
func (m *ShopListReq) String() string            { return proto.CompactTextString(m) }
func (*ShopListReq) ProtoMessage()               {}
func (*ShopListReq) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{0} }

func (m *ShopListReq) GetShopType() int32 {
	if m != nil {
		return m.ShopType
	}
	return 0
}

type ShopListAck struct {
	ShopType int32     `protobuf:"varint,1,opt,name=shopType,proto3" json:"shopType,omitempty"`
	ShopList *ShopInfo `protobuf:"bytes,2,opt,name=shopList" json:"shopList,omitempty"`
}

func (m *ShopListAck) Reset()                    { *m = ShopListAck{} }
func (m *ShopListAck) String() string            { return proto.CompactTextString(m) }
func (*ShopListAck) ProtoMessage()               {}
func (*ShopListAck) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{1} }

func (m *ShopListAck) GetShopType() int32 {
	if m != nil {
		return m.ShopType
	}
	return 0
}

func (m *ShopListAck) GetShopList() *ShopInfo {
	if m != nil {
		return m.ShopList
	}
	return nil
}

// 购买
type ShopBuyReq struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyNum int32 `protobuf:"varint,2,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
}

func (m *ShopBuyReq) Reset()                    { *m = ShopBuyReq{} }
func (m *ShopBuyReq) String() string            { return proto.CompactTextString(m) }
func (*ShopBuyReq) ProtoMessage()               {}
func (*ShopBuyReq) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{2} }

func (m *ShopBuyReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShopBuyReq) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

type ShopBuyAck struct {
	Id     int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyNum int32           `protobuf:"varint,2,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
	Goods  *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
}

func (m *ShopBuyAck) Reset()                    { *m = ShopBuyAck{} }
func (m *ShopBuyAck) String() string            { return proto.CompactTextString(m) }
func (*ShopBuyAck) ProtoMessage()               {}
func (*ShopBuyAck) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{3} }

func (m *ShopBuyAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ShopBuyAck) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

func (m *ShopBuyAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type ShopWeekResetNtf struct {
	ShopInfo *ShopInfo `protobuf:"bytes,1,opt,name=shopInfo" json:"shopInfo,omitempty"`
}

func (m *ShopWeekResetNtf) Reset()                    { *m = ShopWeekResetNtf{} }
func (m *ShopWeekResetNtf) String() string            { return proto.CompactTextString(m) }
func (*ShopWeekResetNtf) ProtoMessage()               {}
func (*ShopWeekResetNtf) Descriptor() ([]byte, []int) { return fileDescriptorShop, []int{4} }

func (m *ShopWeekResetNtf) GetShopInfo() *ShopInfo {
	if m != nil {
		return m.ShopInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ShopListReq)(nil), "pb.ShopListReq")
	proto.RegisterType((*ShopListAck)(nil), "pb.ShopListAck")
	proto.RegisterType((*ShopBuyReq)(nil), "pb.ShopBuyReq")
	proto.RegisterType((*ShopBuyAck)(nil), "pb.ShopBuyAck")
	proto.RegisterType((*ShopWeekResetNtf)(nil), "pb.ShopWeekResetNtf")
}
func (m *ShopListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShopType))
	}
	return i, nil
}

func (m *ShopListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShopType))
	}
	if m.ShopList != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShopList.Size()))
		n1, err := m.ShopList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ShopBuyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopBuyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.BuyNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.BuyNum))
	}
	return i, nil
}

func (m *ShopBuyAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopBuyAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Id))
	}
	if m.BuyNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.BuyNum))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ShopWeekResetNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShopWeekResetNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShopInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintShop(dAtA, i, uint64(m.ShopInfo.Size()))
		n3, err := m.ShopInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintShop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShopListReq) Size() (n int) {
	var l int
	_ = l
	if m.ShopType != 0 {
		n += 1 + sovShop(uint64(m.ShopType))
	}
	return n
}

func (m *ShopListAck) Size() (n int) {
	var l int
	_ = l
	if m.ShopType != 0 {
		n += 1 + sovShop(uint64(m.ShopType))
	}
	if m.ShopList != nil {
		l = m.ShopList.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func (m *ShopBuyReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.BuyNum != 0 {
		n += 1 + sovShop(uint64(m.BuyNum))
	}
	return n
}

func (m *ShopBuyAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovShop(uint64(m.Id))
	}
	if m.BuyNum != 0 {
		n += 1 + sovShop(uint64(m.BuyNum))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func (m *ShopWeekResetNtf) Size() (n int) {
	var l int
	_ = l
	if m.ShopInfo != nil {
		l = m.ShopInfo.Size()
		n += 1 + l + sovShop(uint64(l))
	}
	return n
}

func sovShop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShop(x uint64) (n int) {
	return sovShop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShopListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopType", wireType)
			}
			m.ShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopType", wireType)
			}
			m.ShopType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShopType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopList == nil {
				m.ShopList = &ShopInfo{}
			}
			if err := m.ShopList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopBuyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopBuyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopBuyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopBuyAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopBuyAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopBuyAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShopWeekResetNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShopWeekResetNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShopWeekResetNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShopInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShopInfo == nil {
				m.ShopInfo = &ShopInfo{}
			}
			if err := m.ShopInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShop   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shop.proto", fileDescriptorShop) }

var fileDescriptorShop = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xce, 0xc8, 0x2f,
	0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0x83, 0x88, 0x28, 0x69, 0x72, 0x71, 0x07, 0x67, 0xe4, 0x17, 0xf8, 0x64, 0x16, 0x97,
	0x04, 0xa5, 0x16, 0x0a, 0x49, 0x71, 0x71, 0x80, 0x94, 0x87, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0xc1, 0xf9, 0x4a, 0xc1, 0x08, 0xa5, 0x8e, 0xc9, 0xd9, 0xf8, 0x94, 0x0a,
	0x69, 0x40, 0xe4, 0x40, 0x4a, 0x25, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x78, 0xf4, 0x0a, 0x92,
	0xf4, 0x40, 0xda, 0x3d, 0xf3, 0xd2, 0xf2, 0x83, 0xe0, 0xb2, 0x4a, 0x26, 0x5c, 0x5c, 0x20, 0x51,
	0xa7, 0xd2, 0x4a, 0x90, 0xf5, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x50, 0xd3, 0x98, 0x32, 0x53, 0x84,
	0xc4, 0xb8, 0xd8, 0x92, 0x4a, 0x2b, 0xfd, 0x4a, 0x73, 0xc1, 0xa6, 0xb0, 0x06, 0x41, 0x79, 0x4a,
	0x71, 0x70, 0x5d, 0x20, 0x97, 0x10, 0xa9, 0x4b, 0x48, 0x83, 0x8b, 0x35, 0x3d, 0x3f, 0x3f, 0xa5,
	0x58, 0x82, 0x19, 0xec, 0x24, 0x21, 0x90, 0x93, 0xdc, 0x41, 0x02, 0xce, 0x19, 0x89, 0x79, 0xe9,
	0xa9, 0x7e, 0x25, 0x69, 0x41, 0x10, 0x05, 0x4a, 0x36, 0x5c, 0x02, 0x20, 0xf3, 0xc3, 0x53, 0x53,
	0xb3, 0x83, 0x52, 0x8b, 0x53, 0x4b, 0xfc, 0x4a, 0xd2, 0x60, 0x7e, 0x02, 0xb9, 0x1f, 0x6c, 0x17,
	0x56, 0x3f, 0x81, 0x58, 0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0,
	0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0xe0, 0xc0, 0x36, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x5e, 0x33, 0x47, 0x36, 0x8c, 0x01, 0x00, 0x00,
}
