// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ancientSkill.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 远古神技激活
type AncientSkillActiveReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *AncientSkillActiveReq) Reset()         { *m = AncientSkillActiveReq{} }
func (m *AncientSkillActiveReq) String() string { return proto.CompactTextString(m) }
func (*AncientSkillActiveReq) ProtoMessage()    {}
func (*AncientSkillActiveReq) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientSkill, []int{0}
}

func (m *AncientSkillActiveReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type AncientSkillActiveAck struct {
	HeroIndex    int32         `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	AncientSkill *AncientSkill `protobuf:"bytes,2,opt,name=ancientSkill" json:"ancientSkill,omitempty"`
}

func (m *AncientSkillActiveAck) Reset()         { *m = AncientSkillActiveAck{} }
func (m *AncientSkillActiveAck) String() string { return proto.CompactTextString(m) }
func (*AncientSkillActiveAck) ProtoMessage()    {}
func (*AncientSkillActiveAck) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientSkill, []int{1}
}

func (m *AncientSkillActiveAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *AncientSkillActiveAck) GetAncientSkill() *AncientSkill {
	if m != nil {
		return m.AncientSkill
	}
	return nil
}

// 远古神技升级
type AncientSkillUpLvReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *AncientSkillUpLvReq) Reset()                    { *m = AncientSkillUpLvReq{} }
func (m *AncientSkillUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*AncientSkillUpLvReq) ProtoMessage()               {}
func (*AncientSkillUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorAncientSkill, []int{2} }

func (m *AncientSkillUpLvReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type AncientSkillUpLvAck struct {
	Level     int32 `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	HeroIndex int32 `protobuf:"varint,2,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *AncientSkillUpLvAck) Reset()                    { *m = AncientSkillUpLvAck{} }
func (m *AncientSkillUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*AncientSkillUpLvAck) ProtoMessage()               {}
func (*AncientSkillUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorAncientSkill, []int{3} }

func (m *AncientSkillUpLvAck) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *AncientSkillUpLvAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

// 远古神技升阶
type AncientSkillUpGradeReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *AncientSkillUpGradeReq) Reset()         { *m = AncientSkillUpGradeReq{} }
func (m *AncientSkillUpGradeReq) String() string { return proto.CompactTextString(m) }
func (*AncientSkillUpGradeReq) ProtoMessage()    {}
func (*AncientSkillUpGradeReq) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientSkill, []int{4}
}

func (m *AncientSkillUpGradeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type AncientSkillUpGradeAck struct {
	Grade     int32 `protobuf:"varint,1,opt,name=grade,proto3" json:"grade,omitempty"`
	HeroIndex int32 `protobuf:"varint,2,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *AncientSkillUpGradeAck) Reset()         { *m = AncientSkillUpGradeAck{} }
func (m *AncientSkillUpGradeAck) String() string { return proto.CompactTextString(m) }
func (*AncientSkillUpGradeAck) ProtoMessage()    {}
func (*AncientSkillUpGradeAck) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientSkill, []int{5}
}

func (m *AncientSkillUpGradeAck) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *AncientSkillUpGradeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*AncientSkillActiveReq)(nil), "pb.AncientSkillActiveReq")
	proto.RegisterType((*AncientSkillActiveAck)(nil), "pb.AncientSkillActiveAck")
	proto.RegisterType((*AncientSkillUpLvReq)(nil), "pb.AncientSkillUpLvReq")
	proto.RegisterType((*AncientSkillUpLvAck)(nil), "pb.AncientSkillUpLvAck")
	proto.RegisterType((*AncientSkillUpGradeReq)(nil), "pb.AncientSkillUpGradeReq")
	proto.RegisterType((*AncientSkillUpGradeAck)(nil), "pb.AncientSkillUpGradeAck")
}
func (m *AncientSkillActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientSkillActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *AncientSkillActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientSkillActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.AncientSkill != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.AncientSkill.Size()))
		n1, err := m.AncientSkill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AncientSkillUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientSkillUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *AncientSkillUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientSkillUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.Level))
	}
	if m.HeroIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *AncientSkillUpGradeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientSkillUpGradeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *AncientSkillUpGradeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientSkillUpGradeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Grade != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.Grade))
	}
	if m.HeroIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAncientSkill(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func encodeVarintAncientSkill(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AncientSkillActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAncientSkill(uint64(m.HeroIndex))
	}
	return n
}

func (m *AncientSkillActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAncientSkill(uint64(m.HeroIndex))
	}
	if m.AncientSkill != nil {
		l = m.AncientSkill.Size()
		n += 1 + l + sovAncientSkill(uint64(l))
	}
	return n
}

func (m *AncientSkillUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAncientSkill(uint64(m.HeroIndex))
	}
	return n
}

func (m *AncientSkillUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovAncientSkill(uint64(m.Level))
	}
	if m.HeroIndex != 0 {
		n += 1 + sovAncientSkill(uint64(m.HeroIndex))
	}
	return n
}

func (m *AncientSkillUpGradeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovAncientSkill(uint64(m.HeroIndex))
	}
	return n
}

func (m *AncientSkillUpGradeAck) Size() (n int) {
	var l int
	_ = l
	if m.Grade != 0 {
		n += 1 + sovAncientSkill(uint64(m.Grade))
	}
	if m.HeroIndex != 0 {
		n += 1 + sovAncientSkill(uint64(m.HeroIndex))
	}
	return n
}

func sovAncientSkill(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAncientSkill(x uint64) (n int) {
	return sovAncientSkill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AncientSkillActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientSkillActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientSkillActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientSkillActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientSkillActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientSkillActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AncientSkill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncientSkill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AncientSkill == nil {
				m.AncientSkill = &AncientSkill{}
			}
			if err := m.AncientSkill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncientSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientSkillUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientSkillUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientSkillUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientSkillUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientSkillUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientSkillUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientSkillUpGradeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientSkillUpGradeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientSkillUpGradeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientSkillUpGradeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientSkillUpGradeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientSkillUpGradeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAncientSkill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAncientSkill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncientSkill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAncientSkill
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAncientSkill
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAncientSkill(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAncientSkill = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAncientSkill   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ancientSkill.proto", fileDescriptorAncientSkill) }

var fileDescriptorAncientSkill = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4a, 0xcc, 0x4b, 0xce,
	0x4c, 0xcd, 0x2b, 0x09, 0xce, 0xce, 0xcc, 0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x99, 0x72, 0x89,
	0x3a, 0x22, 0xa9, 0x73, 0x4c, 0x2e, 0xc9, 0x2c, 0x4b, 0x0d, 0x4a, 0x2d, 0x14, 0x92, 0xe1, 0xe2,
	0xcc, 0x48, 0x2d, 0xca, 0xf7, 0xcc, 0x4b, 0x49, 0xad, 0x90, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d,
	0x42, 0x08, 0x28, 0x65, 0x63, 0xd3, 0xe6, 0x98, 0x9c, 0x8d, 0x5f, 0x9b, 0x90, 0x09, 0x17, 0x0f,
	0xb2, 0xab, 0x24, 0x98, 0x14, 0x18, 0x35, 0xb8, 0x8d, 0x04, 0xf4, 0x0a, 0x92, 0xf4, 0x90, 0x8d,
	0x0b, 0x42, 0x51, 0xa5, 0x64, 0xcc, 0x25, 0x8c, 0x2c, 0x1b, 0x5a, 0xe0, 0x53, 0x46, 0xd8, 0x85,
	0x9e, 0x98, 0x9a, 0x40, 0xee, 0x13, 0xe1, 0x62, 0xcd, 0x49, 0x2d, 0x4b, 0xcd, 0x81, 0x6a, 0x80,
	0x70, 0x50, 0x8d, 0x62, 0x42, 0x37, 0xca, 0x8c, 0x4b, 0x0c, 0xd5, 0x28, 0xf7, 0xa2, 0xc4, 0x14,
	0x22, 0x02, 0xc9, 0x07, 0xab, 0x3e, 0xa8, 0x2b, 0xd2, 0x41, 0x6c, 0x98, 0x2b, 0xc0, 0x1c, 0xfc,
	0xae, 0x70, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18,
	0x67, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x47, 0xa1, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x0b,
	0xd9, 0x76, 0x2e, 0xea, 0x01, 0x00, 0x00,
}
