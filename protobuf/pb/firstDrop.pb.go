// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firstDrop.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FirstDropLoadReq struct {
	Types int32 `protobuf:"varint,1,opt,name=types,proto3" json:"types,omitempty"`
}

func (m *FirstDropLoadReq) Reset()                    { *m = FirstDropLoadReq{} }
func (m *FirstDropLoadReq) String() string            { return proto.CompactTextString(m) }
func (*FirstDropLoadReq) ProtoMessage()               {}
func (*FirstDropLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{0} }

func (m *FirstDropLoadReq) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

type FirstDropLoadAck struct {
	Types               int32           `protobuf:"varint,1,opt,name=types,proto3" json:"types,omitempty"`
	GetDropItemInfo     map[int32]int32 `protobuf:"bytes,2,rep,name=GetDropItemInfo" json:"GetDropItemInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AllDropItemGetCount map[int32]int32 `protobuf:"bytes,3,rep,name=AllDropItemGetCount" json:"AllDropItemGetCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *FirstDropLoadAck) Reset()                    { *m = FirstDropLoadAck{} }
func (m *FirstDropLoadAck) String() string            { return proto.CompactTextString(m) }
func (*FirstDropLoadAck) ProtoMessage()               {}
func (*FirstDropLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{1} }

func (m *FirstDropLoadAck) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *FirstDropLoadAck) GetGetDropItemInfo() map[int32]int32 {
	if m != nil {
		return m.GetDropItemInfo
	}
	return nil
}

func (m *FirstDropLoadAck) GetAllDropItemGetCount() map[int32]int32 {
	if m != nil {
		return m.AllDropItemGetCount
	}
	return nil
}

type GetFirstDropAwardReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *GetFirstDropAwardReq) Reset()                    { *m = GetFirstDropAwardReq{} }
func (m *GetFirstDropAwardReq) String() string            { return proto.CompactTextString(m) }
func (*GetFirstDropAwardReq) ProtoMessage()               {}
func (*GetFirstDropAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{2} }

func (m *GetFirstDropAwardReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetFirstDropAwardAck struct {
	Types            int32           `protobuf:"varint,1,opt,name=types,proto3" json:"types,omitempty"`
	GetDropItemInfo  map[int32]int32 `protobuf:"bytes,2,rep,name=GetDropItemInfo" json:"GetDropItemInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DropItemGetCount map[int32]int32 `protobuf:"bytes,3,rep,name=DropItemGetCount" json:"DropItemGetCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Goods            *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *GetFirstDropAwardAck) Reset()                    { *m = GetFirstDropAwardAck{} }
func (m *GetFirstDropAwardAck) String() string            { return proto.CompactTextString(m) }
func (*GetFirstDropAwardAck) ProtoMessage()               {}
func (*GetFirstDropAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{3} }

func (m *GetFirstDropAwardAck) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *GetFirstDropAwardAck) GetGetDropItemInfo() map[int32]int32 {
	if m != nil {
		return m.GetDropItemInfo
	}
	return nil
}

func (m *GetFirstDropAwardAck) GetDropItemGetCount() map[int32]int32 {
	if m != nil {
		return m.DropItemGetCount
	}
	return nil
}

func (m *GetFirstDropAwardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type GetAllFirstDropAwardReq struct {
	Types int32 `protobuf:"varint,1,opt,name=types,proto3" json:"types,omitempty"`
}

func (m *GetAllFirstDropAwardReq) Reset()                    { *m = GetAllFirstDropAwardReq{} }
func (m *GetAllFirstDropAwardReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllFirstDropAwardReq) ProtoMessage()               {}
func (*GetAllFirstDropAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{4} }

func (m *GetAllFirstDropAwardReq) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

type GetAllFirstDropAwardAck struct {
	Types            int32           `protobuf:"varint,1,opt,name=types,proto3" json:"types,omitempty"`
	GetDropItemInfo  map[int32]int32 `protobuf:"bytes,2,rep,name=GetDropItemInfo" json:"GetDropItemInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	DropItemGetCount map[int32]int32 `protobuf:"bytes,3,rep,name=DropItemGetCount" json:"DropItemGetCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Goods            *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *GetAllFirstDropAwardAck) Reset()                    { *m = GetAllFirstDropAwardAck{} }
func (m *GetAllFirstDropAwardAck) String() string            { return proto.CompactTextString(m) }
func (*GetAllFirstDropAwardAck) ProtoMessage()               {}
func (*GetAllFirstDropAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{5} }

func (m *GetAllFirstDropAwardAck) GetTypes() int32 {
	if m != nil {
		return m.Types
	}
	return 0
}

func (m *GetAllFirstDropAwardAck) GetGetDropItemInfo() map[int32]int32 {
	if m != nil {
		return m.GetDropItemInfo
	}
	return nil
}

func (m *GetAllFirstDropAwardAck) GetDropItemGetCount() map[int32]int32 {
	if m != nil {
		return m.DropItemGetCount
	}
	return nil
}

func (m *GetAllFirstDropAwardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type GetAllRedPacketReq struct {
	Infos []int32 `protobuf:"varint,1,rep,packed,name=infos" json:"infos,omitempty"`
}

func (m *GetAllRedPacketReq) Reset()                    { *m = GetAllRedPacketReq{} }
func (m *GetAllRedPacketReq) String() string            { return proto.CompactTextString(m) }
func (*GetAllRedPacketReq) ProtoMessage()               {}
func (*GetAllRedPacketReq) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{6} }

func (m *GetAllRedPacketReq) GetInfos() []int32 {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GetAllRedPacketAck struct {
	UsePacketNum int32 `protobuf:"varint,1,opt,name=usePacketNum,proto3" json:"usePacketNum,omitempty"`
}

func (m *GetAllRedPacketAck) Reset()                    { *m = GetAllRedPacketAck{} }
func (m *GetAllRedPacketAck) String() string            { return proto.CompactTextString(m) }
func (*GetAllRedPacketAck) ProtoMessage()               {}
func (*GetAllRedPacketAck) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{7} }

func (m *GetAllRedPacketAck) GetUsePacketNum() int32 {
	if m != nil {
		return m.UsePacketNum
	}
	return 0
}

type GetAllFirstDropAwardNtf struct {
	DropItemGetCount map[int32]int32 `protobuf:"bytes,1,rep,name=DropItemGetCount" json:"DropItemGetCount,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *GetAllFirstDropAwardNtf) Reset()                    { *m = GetAllFirstDropAwardNtf{} }
func (m *GetAllFirstDropAwardNtf) String() string            { return proto.CompactTextString(m) }
func (*GetAllFirstDropAwardNtf) ProtoMessage()               {}
func (*GetAllFirstDropAwardNtf) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{8} }

func (m *GetAllFirstDropAwardNtf) GetDropItemGetCount() map[int32]int32 {
	if m != nil {
		return m.DropItemGetCount
	}
	return nil
}

type FirstDropRedPointNtf struct {
	Items []int32 `protobuf:"varint,1,rep,packed,name=items" json:"items,omitempty"`
}

func (m *FirstDropRedPointNtf) Reset()                    { *m = FirstDropRedPointNtf{} }
func (m *FirstDropRedPointNtf) String() string            { return proto.CompactTextString(m) }
func (*FirstDropRedPointNtf) ProtoMessage()               {}
func (*FirstDropRedPointNtf) Descriptor() ([]byte, []int) { return fileDescriptorFirstDrop, []int{9} }

func (m *FirstDropRedPointNtf) GetItems() []int32 {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*FirstDropLoadReq)(nil), "pb.FirstDropLoadReq")
	proto.RegisterType((*FirstDropLoadAck)(nil), "pb.FirstDropLoadAck")
	proto.RegisterType((*GetFirstDropAwardReq)(nil), "pb.GetFirstDropAwardReq")
	proto.RegisterType((*GetFirstDropAwardAck)(nil), "pb.GetFirstDropAwardAck")
	proto.RegisterType((*GetAllFirstDropAwardReq)(nil), "pb.GetAllFirstDropAwardReq")
	proto.RegisterType((*GetAllFirstDropAwardAck)(nil), "pb.GetAllFirstDropAwardAck")
	proto.RegisterType((*GetAllRedPacketReq)(nil), "pb.GetAllRedPacketReq")
	proto.RegisterType((*GetAllRedPacketAck)(nil), "pb.GetAllRedPacketAck")
	proto.RegisterType((*GetAllFirstDropAwardNtf)(nil), "pb.GetAllFirstDropAwardNtf")
	proto.RegisterType((*FirstDropRedPointNtf)(nil), "pb.FirstDropRedPointNtf")
}
func (m *FirstDropLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstDropLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Types != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Types))
	}
	return i, nil
}

func (m *FirstDropLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstDropLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Types != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Types))
	}
	if len(m.GetDropItemInfo) > 0 {
		for k, _ := range m.GetDropItemInfo {
			dAtA[i] = 0x12
			i++
			v := m.GetDropItemInfo[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	if len(m.AllDropItemGetCount) > 0 {
		for k, _ := range m.AllDropItemGetCount {
			dAtA[i] = 0x1a
			i++
			v := m.AllDropItemGetCount[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *GetFirstDropAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFirstDropAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GetFirstDropAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFirstDropAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Types != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Types))
	}
	if len(m.GetDropItemInfo) > 0 {
		for k, _ := range m.GetDropItemInfo {
			dAtA[i] = 0x12
			i++
			v := m.GetDropItemInfo[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	if len(m.DropItemGetCount) > 0 {
		for k, _ := range m.DropItemGetCount {
			dAtA[i] = 0x1a
			i++
			v := m.DropItemGetCount[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GetAllFirstDropAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllFirstDropAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Types != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Types))
	}
	return i, nil
}

func (m *GetAllFirstDropAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllFirstDropAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Types != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Types))
	}
	if len(m.GetDropItemInfo) > 0 {
		for k, _ := range m.GetDropItemInfo {
			dAtA[i] = 0x12
			i++
			v := m.GetDropItemInfo[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	if len(m.DropItemGetCount) > 0 {
		for k, _ := range m.DropItemGetCount {
			dAtA[i] = 0x1a
			i++
			v := m.DropItemGetCount[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *GetAllRedPacketReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRedPacketReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		dAtA4 := make([]byte, len(m.Infos)*10)
		var j3 int
		for _, num1 := range m.Infos {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GetAllRedPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllRedPacketAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UsePacketNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(m.UsePacketNum))
	}
	return i, nil
}

func (m *GetAllFirstDropAwardNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllFirstDropAwardNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DropItemGetCount) > 0 {
		for k, _ := range m.DropItemGetCount {
			dAtA[i] = 0xa
			i++
			v := m.DropItemGetCount[k]
			mapSize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			i = encodeVarintFirstDrop(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintFirstDrop(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *FirstDropRedPointNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirstDropRedPointNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		dAtA6 := make([]byte, len(m.Items)*10)
		var j5 int
		for _, num1 := range m.Items {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintFirstDrop(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func encodeVarintFirstDrop(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FirstDropLoadReq) Size() (n int) {
	var l int
	_ = l
	if m.Types != 0 {
		n += 1 + sovFirstDrop(uint64(m.Types))
	}
	return n
}

func (m *FirstDropLoadAck) Size() (n int) {
	var l int
	_ = l
	if m.Types != 0 {
		n += 1 + sovFirstDrop(uint64(m.Types))
	}
	if len(m.GetDropItemInfo) > 0 {
		for k, v := range m.GetDropItemInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	if len(m.AllDropItemGetCount) > 0 {
		for k, v := range m.AllDropItemGetCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *GetFirstDropAwardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFirstDrop(uint64(m.Id))
	}
	return n
}

func (m *GetFirstDropAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.Types != 0 {
		n += 1 + sovFirstDrop(uint64(m.Types))
	}
	if len(m.GetDropItemInfo) > 0 {
		for k, v := range m.GetDropItemInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	if len(m.DropItemGetCount) > 0 {
		for k, v := range m.DropItemGetCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovFirstDrop(uint64(l))
	}
	return n
}

func (m *GetAllFirstDropAwardReq) Size() (n int) {
	var l int
	_ = l
	if m.Types != 0 {
		n += 1 + sovFirstDrop(uint64(m.Types))
	}
	return n
}

func (m *GetAllFirstDropAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.Types != 0 {
		n += 1 + sovFirstDrop(uint64(m.Types))
	}
	if len(m.GetDropItemInfo) > 0 {
		for k, v := range m.GetDropItemInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	if len(m.DropItemGetCount) > 0 {
		for k, v := range m.DropItemGetCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovFirstDrop(uint64(l))
	}
	return n
}

func (m *GetAllRedPacketReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		l = 0
		for _, e := range m.Infos {
			l += sovFirstDrop(uint64(e))
		}
		n += 1 + sovFirstDrop(uint64(l)) + l
	}
	return n
}

func (m *GetAllRedPacketAck) Size() (n int) {
	var l int
	_ = l
	if m.UsePacketNum != 0 {
		n += 1 + sovFirstDrop(uint64(m.UsePacketNum))
	}
	return n
}

func (m *GetAllFirstDropAwardNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.DropItemGetCount) > 0 {
		for k, v := range m.DropItemGetCount {
			_ = k
			_ = v
			mapEntrySize := 1 + sovFirstDrop(uint64(k)) + 1 + sovFirstDrop(uint64(v))
			n += mapEntrySize + 1 + sovFirstDrop(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FirstDropRedPointNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		l = 0
		for _, e := range m.Items {
			l += sovFirstDrop(uint64(e))
		}
		n += 1 + sovFirstDrop(uint64(l)) + l
	}
	return n
}

func sovFirstDrop(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFirstDrop(x uint64) (n int) {
	return sovFirstDrop(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FirstDropLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstDropLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstDropLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstDropLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstDropLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstDropLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDropItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetDropItemInfo == nil {
				m.GetDropItemInfo = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GetDropItemInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllDropItemGetCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AllDropItemGetCount == nil {
				m.AllDropItemGetCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AllDropItemGetCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFirstDropAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFirstDropAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFirstDropAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFirstDropAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFirstDropAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFirstDropAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDropItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetDropItemInfo == nil {
				m.GetDropItemInfo = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GetDropItemInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropItemGetCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropItemGetCount == nil {
				m.DropItemGetCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DropItemGetCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllFirstDropAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllFirstDropAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllFirstDropAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllFirstDropAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllFirstDropAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllFirstDropAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			m.Types = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Types |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDropItemInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetDropItemInfo == nil {
				m.GetDropItemInfo = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GetDropItemInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropItemGetCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropItemGetCount == nil {
				m.DropItemGetCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DropItemGetCount[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRedPacketReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRedPacketReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRedPacketReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Infos = append(m.Infos, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFirstDrop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Infos = append(m.Infos, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllRedPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllRedPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllRedPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsePacketNum", wireType)
			}
			m.UsePacketNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsePacketNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllFirstDropAwardNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllFirstDropAwardNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllFirstDropAwardNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropItemGetCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirstDrop
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DropItemGetCount == nil {
				m.DropItemGetCount = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirstDrop(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirstDrop
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DropItemGetCount[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FirstDropRedPointNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirstDropRedPointNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirstDropRedPointNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Items = append(m.Items, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFirstDrop
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirstDrop
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Items = append(m.Items, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFirstDrop(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirstDrop
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFirstDrop(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFirstDrop
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirstDrop
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFirstDrop
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFirstDrop
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFirstDrop(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFirstDrop = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFirstDrop   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("firstDrop.proto", fileDescriptorFirstDrop) }

var fileDescriptorFirstDrop = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x95, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x9d, 0xc4, 0x7a, 0x78, 0xbb, 0xb8, 0x61, 0xac, 0x18, 0x7a, 0x08, 0x25, 0x07, 0x89,
	0xa2, 0x51, 0xd7, 0xcb, 0xe2, 0x2d, 0x5b, 0xdd, 0xb2, 0x20, 0x41, 0xe2, 0x41, 0x28, 0x88, 0xa4,
	0xcd, 0xa4, 0x86, 0x26, 0x99, 0x98, 0x4c, 0x94, 0x7e, 0x0f, 0x0f, 0x5e, 0xfc, 0x28, 0xde, 0x3d,
	0xfa, 0x11, 0xa4, 0xde, 0xfc, 0x14, 0x32, 0x93, 0xb4, 0x62, 0x3a, 0x53, 0x2a, 0xf6, 0xe4, 0xad,
	0xef, 0xf1, 0xef, 0x2f, 0xef, 0xbd, 0x5f, 0x4b, 0xe0, 0x24, 0x4e, 0xca, 0x8a, 0x3d, 0x2d, 0x69,
	0xe1, 0x16, 0x25, 0x65, 0x14, 0x6b, 0xc5, 0x74, 0x70, 0x3c, 0xa3, 0x59, 0x46, 0xf3, 0xa6, 0x63,
	0x3b, 0x60, 0x5c, 0xac, 0x43, 0xcf, 0x69, 0x18, 0x05, 0xe4, 0x1d, 0xee, 0x43, 0x8f, 0x2d, 0x0b,
	0x52, 0x99, 0x68, 0x88, 0x9c, 0x5e, 0xd0, 0x14, 0xf6, 0x4f, 0xad, 0x13, 0xf5, 0x66, 0x0b, 0x79,
	0x14, 0xbf, 0x84, 0x93, 0x31, 0x11, 0xb9, 0x4b, 0x46, 0xb2, 0xcb, 0x3c, 0xa6, 0xa6, 0x36, 0xd4,
	0x9d, 0xa3, 0xd3, 0x3b, 0x6e, 0x31, 0x75, 0xbb, 0x10, 0xb7, 0x93, 0x7d, 0x96, 0xb3, 0x72, 0x19,
	0x74, 0x09, 0xf8, 0x0d, 0xdc, 0xf0, 0xd2, 0x74, 0xdd, 0x1a, 0x13, 0x36, 0xa2, 0x75, 0xce, 0x4c,
	0x5d, 0x80, 0xef, 0x4b, 0xc1, 0x92, 0x7c, 0x03, 0x97, 0x91, 0x06, 0xe7, 0xd0, 0x97, 0x4d, 0x82,
	0x0d, 0xd0, 0x17, 0x64, 0xd9, 0x6e, 0xc8, 0x3f, 0xf2, 0xad, 0xdf, 0x87, 0x69, 0x4d, 0x4c, 0xad,
	0xd9, 0x5a, 0x14, 0x4f, 0xb4, 0x33, 0x34, 0xb8, 0x00, 0x53, 0xf5, 0xd0, 0xbf, 0xe1, 0xd8, 0xb7,
	0xc5, 0x2c, 0x9b, 0x85, 0xbc, 0x0f, 0x61, 0x29, 0xd4, 0x5c, 0x07, 0x2d, 0x89, 0x5a, 0x84, 0x96,
	0x44, 0xf6, 0x47, 0x5d, 0x12, 0x54, 0x8b, 0x79, 0xa5, 0x12, 0x23, 0xee, 0x27, 0x03, 0xed, 0x29,
	0x67, 0x02, 0x86, 0xc2, 0x8c, 0xab, 0x24, 0xcb, 0xd5, 0x6c, 0x71, 0xb0, 0x03, 0xbd, 0x39, 0xa5,
	0x51, 0x65, 0x5e, 0x1d, 0x22, 0xe7, 0xe8, 0x14, 0x0b, 0x20, 0x6f, 0x8c, 0xde, 0x86, 0xf9, 0x9c,
	0xf8, 0x2c, 0x0e, 0x9a, 0xc0, 0x41, 0x0c, 0x8e, 0xe0, 0xe6, 0xbf, 0xeb, 0x7b, 0x00, 0xb7, 0xc6,
	0x84, 0x79, 0x69, 0xba, 0x6d, 0x50, 0xfe, 0xe7, 0xfa, 0xac, 0xcb, 0xbf, 0xa1, 0x56, 0x39, 0x51,
	0xa9, 0x7c, 0xd8, 0x1e, 0x5c, 0xc6, 0xda, 0xd3, 0xe6, 0x6b, 0xa5, 0xcd, 0x47, 0xbb, 0xe0, 0xff,
	0xb1, 0xd0, 0xbb, 0x80, 0x9b, 0xad, 0x03, 0x12, 0xbd, 0x08, 0x67, 0x0b, 0xc2, 0x5a, 0x97, 0x49,
	0x1e, 0x53, 0x6e, 0x46, 0xe7, 0x79, 0x51, 0xd8, 0x67, 0x5b, 0x59, 0x6e, 0xd1, 0x86, 0xe3, 0xba,
	0x22, 0x4d, 0xed, 0xd7, 0x59, 0xfb, 0xd8, 0x3f, 0x7a, 0xf6, 0x17, 0x24, 0xff, 0x15, 0xf8, 0x2c,
	0x96, 0x3a, 0x41, 0xbb, 0x9d, 0xf8, 0x2c, 0xde, 0xd7, 0xc9, 0x61, 0xae, 0x74, 0x0f, 0xfa, 0x9b,
	0x09, 0xf8, 0xf2, 0x34, 0xc9, 0x19, 0x9f, 0x9d, 0xdf, 0x89, 0x91, 0xec, 0xf7, 0x9d, 0x78, 0x71,
	0x6e, 0x7c, 0x5d, 0x59, 0xe8, 0xdb, 0xca, 0x42, 0xdf, 0x57, 0x16, 0xfa, 0xf4, 0xc3, 0xba, 0x32,
	0xbd, 0x26, 0xde, 0x49, 0x8f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xbd, 0x2f, 0xa7, 0x60, 0xb8,
	0x06, 0x00, 0x00,
}
