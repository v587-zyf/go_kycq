// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yaoCai.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type YaoCaiInfoReq struct {
}

func (m *YaoCaiInfoReq) Reset()                    { *m = YaoCaiInfoReq{} }
func (m *YaoCaiInfoReq) String() string            { return proto.CompactTextString(m) }
func (*YaoCaiInfoReq) ProtoMessage()               {}
func (*YaoCaiInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorYaoCai, []int{0} }

type YaoCaiInfoAck struct {
}

func (m *YaoCaiInfoAck) Reset()                    { *m = YaoCaiInfoAck{} }
func (m *YaoCaiInfoAck) String() string            { return proto.CompactTextString(m) }
func (*YaoCaiInfoAck) ProtoMessage()               {}
func (*YaoCaiInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorYaoCai, []int{1} }

// 摇彩购买份数
type YaoCaiBuyShareReq struct {
	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *YaoCaiBuyShareReq) Reset()                    { *m = YaoCaiBuyShareReq{} }
func (m *YaoCaiBuyShareReq) String() string            { return proto.CompactTextString(m) }
func (*YaoCaiBuyShareReq) ProtoMessage()               {}
func (*YaoCaiBuyShareReq) Descriptor() ([]byte, []int) { return fileDescriptorYaoCai, []int{2} }

func (m *YaoCaiBuyShareReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type YaoCaiBuyShareAck struct {
	HaveBuyNum int32 `protobuf:"varint,1,opt,name=haveBuyNum,proto3" json:"haveBuyNum,omitempty"`
}

func (m *YaoCaiBuyShareAck) Reset()                    { *m = YaoCaiBuyShareAck{} }
func (m *YaoCaiBuyShareAck) String() string            { return proto.CompactTextString(m) }
func (*YaoCaiBuyShareAck) ProtoMessage()               {}
func (*YaoCaiBuyShareAck) Descriptor() ([]byte, []int) { return fileDescriptorYaoCai, []int{3} }

func (m *YaoCaiBuyShareAck) GetHaveBuyNum() int32 {
	if m != nil {
		return m.HaveBuyNum
	}
	return 0
}

func init() {
	proto.RegisterType((*YaoCaiInfoReq)(nil), "pb.YaoCaiInfoReq")
	proto.RegisterType((*YaoCaiInfoAck)(nil), "pb.YaoCaiInfoAck")
	proto.RegisterType((*YaoCaiBuyShareReq)(nil), "pb.YaoCaiBuyShareReq")
	proto.RegisterType((*YaoCaiBuyShareAck)(nil), "pb.YaoCaiBuyShareAck")
}
func (m *YaoCaiInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YaoCaiInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *YaoCaiInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YaoCaiInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *YaoCaiBuyShareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YaoCaiBuyShareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintYaoCai(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *YaoCaiBuyShareAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YaoCaiBuyShareAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HaveBuyNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintYaoCai(dAtA, i, uint64(m.HaveBuyNum))
	}
	return i, nil
}

func encodeVarintYaoCai(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *YaoCaiInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *YaoCaiInfoAck) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *YaoCaiBuyShareReq) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovYaoCai(uint64(m.Num))
	}
	return n
}

func (m *YaoCaiBuyShareAck) Size() (n int) {
	var l int
	_ = l
	if m.HaveBuyNum != 0 {
		n += 1 + sovYaoCai(uint64(m.HaveBuyNum))
	}
	return n
}

func sovYaoCai(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozYaoCai(x uint64) (n int) {
	return sovYaoCai(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *YaoCaiInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYaoCai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YaoCaiInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YaoCaiInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYaoCai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYaoCai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YaoCaiInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYaoCai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YaoCaiInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YaoCaiInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYaoCai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYaoCai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YaoCaiBuyShareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYaoCai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YaoCaiBuyShareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YaoCaiBuyShareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYaoCai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYaoCai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYaoCai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YaoCaiBuyShareAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYaoCai
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YaoCaiBuyShareAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YaoCaiBuyShareAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveBuyNum", wireType)
			}
			m.HaveBuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYaoCai
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveBuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYaoCai(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYaoCai
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYaoCai(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYaoCai
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYaoCai
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYaoCai
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthYaoCai
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowYaoCai
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipYaoCai(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthYaoCai = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYaoCai   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("yaoCai.proto", fileDescriptorYaoCai) }

var fileDescriptorYaoCai = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xa9, 0x4c, 0xcc, 0x77,
	0x4e, 0xcc, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xe2, 0xe7, 0xe2,
	0x8d, 0x04, 0x8b, 0x79, 0xe6, 0xa5, 0xe5, 0x07, 0xa5, 0x16, 0xa2, 0x0a, 0x38, 0x26, 0x67, 0x2b,
	0xa9, 0x72, 0x09, 0x42, 0x04, 0x9c, 0x4a, 0x2b, 0x83, 0x33, 0x12, 0x8b, 0x52, 0x83, 0x52, 0x0b,
	0x85, 0x04, 0xb8, 0x98, 0xf3, 0x4a, 0x73, 0x25, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x40, 0x4c,
	0x25, 0x63, 0x74, 0x65, 0x8e, 0xc9, 0xd9, 0x42, 0x72, 0x5c, 0x5c, 0x19, 0x89, 0x65, 0xa9, 0x4e,
	0xa5, 0x95, 0x7e, 0x70, 0xd5, 0x48, 0x22, 0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24,
	0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0xa7, 0x19, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xa5, 0x2b, 0x0a, 0xaa, 0x00, 0x00, 0x00,
}
