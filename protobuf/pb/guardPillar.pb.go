// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guardPillar.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 守卫龙柱进入
type EnterGuardPillarReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterGuardPillarReq) Reset()                    { *m = EnterGuardPillarReq{} }
func (m *EnterGuardPillarReq) String() string            { return proto.CompactTextString(m) }
func (*EnterGuardPillarReq) ProtoMessage()               {}
func (*EnterGuardPillarReq) Descriptor() ([]byte, []int) { return fileDescriptorGuardPillar, []int{0} }

func (m *EnterGuardPillarReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 守卫龙柱结算
type GuardPillarResultNtf struct {
	StageId    int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Rounds     int32           `protobuf:"varint,2,opt,name=rounds,proto3" json:"rounds,omitempty"`
	Rank       int32           `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
	RoundGoods *GoodsChangeNtf `protobuf:"bytes,4,opt,name=roundGoods" json:"roundGoods,omitempty"`
	RankGoods  *GoodsChangeNtf `protobuf:"bytes,5,opt,name=rankGoods" json:"rankGoods,omitempty"`
}

func (m *GuardPillarResultNtf) Reset()                    { *m = GuardPillarResultNtf{} }
func (m *GuardPillarResultNtf) String() string            { return proto.CompactTextString(m) }
func (*GuardPillarResultNtf) ProtoMessage()               {}
func (*GuardPillarResultNtf) Descriptor() ([]byte, []int) { return fileDescriptorGuardPillar, []int{1} }

func (m *GuardPillarResultNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *GuardPillarResultNtf) GetRounds() int32 {
	if m != nil {
		return m.Rounds
	}
	return 0
}

func (m *GuardPillarResultNtf) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *GuardPillarResultNtf) GetRoundGoods() *GoodsChangeNtf {
	if m != nil {
		return m.RoundGoods
	}
	return nil
}

func (m *GuardPillarResultNtf) GetRankGoods() *GoodsChangeNtf {
	if m != nil {
		return m.RankGoods
	}
	return nil
}

func init() {
	proto.RegisterType((*EnterGuardPillarReq)(nil), "pb.EnterGuardPillarReq")
	proto.RegisterType((*GuardPillarResultNtf)(nil), "pb.GuardPillarResultNtf")
}
func (m *EnterGuardPillarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterGuardPillarReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuardPillar(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *GuardPillarResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardPillarResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuardPillar(dAtA, i, uint64(m.StageId))
	}
	if m.Rounds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuardPillar(dAtA, i, uint64(m.Rounds))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuardPillar(dAtA, i, uint64(m.Rank))
	}
	if m.RoundGoods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGuardPillar(dAtA, i, uint64(m.RoundGoods.Size()))
		n1, err := m.RoundGoods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.RankGoods != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuardPillar(dAtA, i, uint64(m.RankGoods.Size()))
		n2, err := m.RankGoods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintGuardPillar(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EnterGuardPillarReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGuardPillar(uint64(m.StageId))
	}
	return n
}

func (m *GuardPillarResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovGuardPillar(uint64(m.StageId))
	}
	if m.Rounds != 0 {
		n += 1 + sovGuardPillar(uint64(m.Rounds))
	}
	if m.Rank != 0 {
		n += 1 + sovGuardPillar(uint64(m.Rank))
	}
	if m.RoundGoods != nil {
		l = m.RoundGoods.Size()
		n += 1 + l + sovGuardPillar(uint64(l))
	}
	if m.RankGoods != nil {
		l = m.RankGoods.Size()
		n += 1 + l + sovGuardPillar(uint64(l))
	}
	return n
}

func sovGuardPillar(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuardPillar(x uint64) (n int) {
	return sovGuardPillar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnterGuardPillarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardPillar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterGuardPillarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterGuardPillarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuardPillar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardPillar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardPillarResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuardPillar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardPillarResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardPillarResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rounds", wireType)
			}
			m.Rounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rounds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundGoods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardPillar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoundGoods == nil {
				m.RoundGoods = &GoodsChangeNtf{}
			}
			if err := m.RoundGoods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankGoods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuardPillar
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RankGoods == nil {
				m.RankGoods = &GoodsChangeNtf{}
			}
			if err := m.RankGoods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuardPillar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuardPillar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuardPillar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuardPillar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuardPillar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuardPillar
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuardPillar
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuardPillar(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuardPillar = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuardPillar   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("guardPillar.proto", fileDescriptorGuardPillar) }

var fileDescriptorGuardPillar = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x2f, 0x4d, 0x2c,
	0x4a, 0x09, 0xc8, 0xcc, 0xc9, 0x49, 0x2c, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a,
	0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0xe9, 0x73, 0x09, 0xbb,
	0xe6, 0x95, 0xa4, 0x16, 0xb9, 0x23, 0xd4, 0x06, 0xa5, 0x16, 0x0a, 0x49, 0x70, 0xb1, 0x17, 0x97,
	0x24, 0xa6, 0xa7, 0x7a, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0xc1, 0xb8, 0x4a, 0x87,
	0x18, 0xb9, 0x44, 0x50, 0x14, 0x17, 0x97, 0xe6, 0x94, 0xf8, 0x95, 0xa4, 0xe1, 0xd6, 0x22, 0x24,
	0xc6, 0xc5, 0x56, 0x94, 0x5f, 0x9a, 0x97, 0x52, 0x2c, 0xc1, 0x04, 0x96, 0x80, 0xf2, 0x84, 0x84,
	0xb8, 0x58, 0x8a, 0x12, 0xf3, 0xb2, 0x25, 0x98, 0xc1, 0xa2, 0x60, 0xb6, 0x90, 0x11, 0x17, 0x17,
	0x58, 0xd6, 0x3d, 0x3f, 0x3f, 0xa5, 0x58, 0x82, 0x45, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x48, 0xaf,
	0x20, 0x49, 0x0f, 0x2c, 0xe0, 0x9c, 0x91, 0x98, 0x97, 0x9e, 0xea, 0x57, 0x92, 0x16, 0x84, 0xa4,
	0x4a, 0xc8, 0x80, 0x8b, 0x13, 0xa4, 0x17, 0xa2, 0x85, 0x15, 0xa7, 0x16, 0x84, 0x22, 0x27, 0x81,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39,
	0x86, 0x24, 0x36, 0x70, 0x70, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x4d, 0x23, 0x8a,
	0x35, 0x01, 0x00, 0x00,
}
