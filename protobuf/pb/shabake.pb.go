// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shabake.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ShaBaKeInfoReq struct {
}

func (m *ShaBaKeInfoReq) Reset()                    { *m = ShaBaKeInfoReq{} }
func (m *ShaBaKeInfoReq) String() string            { return proto.CompactTextString(m) }
func (*ShaBaKeInfoReq) ProtoMessage()               {}
func (*ShaBaKeInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorShabake, []int{0} }

type ShaBaKeInfoAck struct {
	WinGuildUserInfo []*Info `protobuf:"bytes,1,rep,name=WinGuildUserInfo" json:"WinGuildUserInfo,omitempty"`
	FirstGuildName   string  `protobuf:"bytes,2,opt,name=firstGuildName,proto3" json:"firstGuildName,omitempty"`
	IsEnd            int32   `protobuf:"varint,3,opt,name=isEnd,proto3" json:"isEnd,omitempty"`
	WinGuildServerId int32   `protobuf:"varint,4,opt,name=winGuildServerId,proto3" json:"winGuildServerId,omitempty"`
}

func (m *ShaBaKeInfoAck) Reset()                    { *m = ShaBaKeInfoAck{} }
func (m *ShaBaKeInfoAck) String() string            { return proto.CompactTextString(m) }
func (*ShaBaKeInfoAck) ProtoMessage()               {}
func (*ShaBaKeInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorShabake, []int{1} }

func (m *ShaBaKeInfoAck) GetWinGuildUserInfo() []*Info {
	if m != nil {
		return m.WinGuildUserInfo
	}
	return nil
}

func (m *ShaBaKeInfoAck) GetFirstGuildName() string {
	if m != nil {
		return m.FirstGuildName
	}
	return ""
}

func (m *ShaBaKeInfoAck) GetIsEnd() int32 {
	if m != nil {
		return m.IsEnd
	}
	return 0
}

func (m *ShaBaKeInfoAck) GetWinGuildServerId() int32 {
	if m != nil {
		return m.WinGuildServerId
	}
	return 0
}

// 战斗
type EnterShaBaKeFightReq struct {
}

func (m *EnterShaBaKeFightReq) Reset()                    { *m = EnterShaBaKeFightReq{} }
func (m *EnterShaBaKeFightReq) String() string            { return proto.CompactTextString(m) }
func (*EnterShaBaKeFightReq) ProtoMessage()               {}
func (*EnterShaBaKeFightReq) Descriptor() ([]byte, []int) { return fileDescriptorShabake, []int{2} }

type ShaBaKeFightResultNtf struct {
	Rank     int32 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	UserRank int32 `protobuf:"varint,2,opt,name=userRank,proto3" json:"userRank,omitempty"`
}

func (m *ShaBaKeFightResultNtf) Reset()                    { *m = ShaBaKeFightResultNtf{} }
func (m *ShaBaKeFightResultNtf) String() string            { return proto.CompactTextString(m) }
func (*ShaBaKeFightResultNtf) ProtoMessage()               {}
func (*ShaBaKeFightResultNtf) Descriptor() ([]byte, []int) { return fileDescriptorShabake, []int{3} }

func (m *ShaBaKeFightResultNtf) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *ShaBaKeFightResultNtf) GetUserRank() int32 {
	if m != nil {
		return m.UserRank
	}
	return 0
}

type ShabakeIsOpenNtf struct {
	IsOpen bool `protobuf:"varint,1,opt,name=isOpen,proto3" json:"isOpen,omitempty"`
}

func (m *ShabakeIsOpenNtf) Reset()                    { *m = ShabakeIsOpenNtf{} }
func (m *ShabakeIsOpenNtf) String() string            { return proto.CompactTextString(m) }
func (*ShabakeIsOpenNtf) ProtoMessage()               {}
func (*ShabakeIsOpenNtf) Descriptor() ([]byte, []int) { return fileDescriptorShabake, []int{4} }

func (m *ShabakeIsOpenNtf) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func init() {
	proto.RegisterType((*ShaBaKeInfoReq)(nil), "pb.ShaBaKeInfoReq")
	proto.RegisterType((*ShaBaKeInfoAck)(nil), "pb.ShaBaKeInfoAck")
	proto.RegisterType((*EnterShaBaKeFightReq)(nil), "pb.EnterShaBaKeFightReq")
	proto.RegisterType((*ShaBaKeFightResultNtf)(nil), "pb.ShaBaKeFightResultNtf")
	proto.RegisterType((*ShabakeIsOpenNtf)(nil), "pb.ShabakeIsOpenNtf")
}
func (m *ShaBaKeInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShaBaKeInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ShaBaKeInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShaBaKeInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WinGuildUserInfo) > 0 {
		for _, msg := range m.WinGuildUserInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintShabake(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FirstGuildName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShabake(dAtA, i, uint64(len(m.FirstGuildName)))
		i += copy(dAtA[i:], m.FirstGuildName)
	}
	if m.IsEnd != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintShabake(dAtA, i, uint64(m.IsEnd))
	}
	if m.WinGuildServerId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintShabake(dAtA, i, uint64(m.WinGuildServerId))
	}
	return i, nil
}

func (m *EnterShaBaKeFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterShaBaKeFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ShaBaKeFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShaBaKeFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShabake(dAtA, i, uint64(m.Rank))
	}
	if m.UserRank != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShabake(dAtA, i, uint64(m.UserRank))
	}
	return i, nil
}

func (m *ShabakeIsOpenNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShabakeIsOpenNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsOpen {
		dAtA[i] = 0x8
		i++
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintShabake(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShaBaKeInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ShaBaKeInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.WinGuildUserInfo) > 0 {
		for _, e := range m.WinGuildUserInfo {
			l = e.Size()
			n += 1 + l + sovShabake(uint64(l))
		}
	}
	l = len(m.FirstGuildName)
	if l > 0 {
		n += 1 + l + sovShabake(uint64(l))
	}
	if m.IsEnd != 0 {
		n += 1 + sovShabake(uint64(m.IsEnd))
	}
	if m.WinGuildServerId != 0 {
		n += 1 + sovShabake(uint64(m.WinGuildServerId))
	}
	return n
}

func (m *EnterShaBaKeFightReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ShaBaKeFightResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovShabake(uint64(m.Rank))
	}
	if m.UserRank != 0 {
		n += 1 + sovShabake(uint64(m.UserRank))
	}
	return n
}

func (m *ShabakeIsOpenNtf) Size() (n int) {
	var l int
	_ = l
	if m.IsOpen {
		n += 2
	}
	return n
}

func sovShabake(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShabake(x uint64) (n int) {
	return sovShabake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShaBaKeInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShabake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShaBaKeInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShaBaKeInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShabake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShabake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShaBaKeInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShabake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShaBaKeInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShaBaKeInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinGuildUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShabake
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinGuildUserInfo = append(m.WinGuildUserInfo, &Info{})
			if err := m.WinGuildUserInfo[len(m.WinGuildUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstGuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShabake
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstGuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			m.IsEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsEnd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinGuildServerId", wireType)
			}
			m.WinGuildServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinGuildServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShabake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShabake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterShaBaKeFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShabake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterShaBaKeFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterShaBaKeFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipShabake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShabake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShaBaKeFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShabake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShaBaKeFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShaBaKeFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRank", wireType)
			}
			m.UserRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShabake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShabake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShabakeIsOpenNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShabake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShabakeIsOpenNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShabakeIsOpenNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShabake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShabake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShabake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShabake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShabake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShabake
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShabake
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShabake(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShabake = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShabake   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("shabake.proto", fileDescriptorShabake) }

var fileDescriptorShabake = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0xdf, 0x4a, 0xc3, 0x30,
	0x14, 0x06, 0x70, 0xd3, 0xfd, 0xa1, 0x1e, 0x71, 0x94, 0x30, 0x47, 0xd9, 0x45, 0x29, 0xbd, 0x90,
	0xb2, 0x8b, 0x5e, 0xa8, 0x2f, 0xe0, 0x64, 0x8e, 0x22, 0x4c, 0x68, 0x11, 0xaf, 0x53, 0x9b, 0xda,
	0xd0, 0x99, 0xd6, 0x24, 0xd5, 0x57, 0xf1, 0x31, 0x7c, 0x0c, 0x2f, 0x7d, 0x04, 0xa9, 0x2f, 0x22,
	0x4d, 0x8b, 0xb0, 0xed, 0x2e, 0xdf, 0x8f, 0x93, 0x8f, 0xe4, 0xc0, 0xa9, 0xcc, 0x49, 0x42, 0x0a,
	0x1a, 0x54, 0xa2, 0x54, 0x25, 0x36, 0xaa, 0x64, 0x8e, 0x7b, 0xba, 0x11, 0xa5, 0x94, 0x9d, 0x7b,
	0x16, 0x4c, 0xe2, 0x9c, 0x2c, 0xc9, 0x1d, 0x0d, 0x79, 0x56, 0x46, 0xf4, 0xd5, 0xfb, 0x44, 0x3b,
	0x74, 0xfd, 0x54, 0xe0, 0x2b, 0xb0, 0x1e, 0x19, 0x5f, 0xd7, 0x6c, 0x9b, 0x3e, 0x48, 0x2a, 0x5a,
	0xb6, 0x91, 0x3b, 0xf0, 0x4f, 0x2e, 0xcc, 0xa0, 0x4a, 0x02, 0x7d, 0xf3, 0x60, 0x02, 0x9f, 0xc3,
	0x24, 0x63, 0x42, 0x2a, 0xad, 0x1b, 0xf2, 0x42, 0x6d, 0xc3, 0x45, 0xfe, 0x71, 0xb4, 0xa7, 0x78,
	0x0a, 0x23, 0x26, 0x57, 0x3c, 0xb5, 0x07, 0x2e, 0xf2, 0x47, 0x51, 0x17, 0xf0, 0x02, 0xac, 0xf7,
	0xbe, 0x31, 0xa6, 0xe2, 0x8d, 0x8a, 0x30, 0xb5, 0x87, 0x7a, 0xe0, 0xc0, 0xbd, 0x19, 0x4c, 0x57,
	0x5c, 0x51, 0xd1, 0x3f, 0xfb, 0x96, 0x3d, 0xe7, 0xaa, 0xfd, 0xca, 0x1a, 0xce, 0x76, 0x49, 0xd6,
	0x5b, 0xb5, 0x51, 0x19, 0xc6, 0x30, 0x14, 0x84, 0x17, 0x36, 0xd2, 0x85, 0xfa, 0x8c, 0xe7, 0x60,
	0xd6, 0x92, 0x8a, 0xa8, 0x75, 0x43, 0xfb, 0x7f, 0xf6, 0x16, 0x60, 0xc5, 0xdd, 0xee, 0x42, 0x79,
	0x5f, 0x51, 0xde, 0x76, 0xcc, 0x60, 0xcc, 0x74, 0xd0, 0x2d, 0x66, 0xd4, 0xa7, 0xa5, 0xf5, 0xd5,
	0x38, 0xe8, 0xbb, 0x71, 0xd0, 0x4f, 0xe3, 0xa0, 0x8f, 0x5f, 0xe7, 0x28, 0x19, 0xeb, 0x55, 0x5f,
	0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x56, 0x1c, 0x04, 0x18, 0x93, 0x01, 0x00, 0x00,
}
