// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: label.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 头衔升级
type LabelUpReq struct {
}

func (m *LabelUpReq) Reset()                    { *m = LabelUpReq{} }
func (m *LabelUpReq) String() string            { return proto.CompactTextString(m) }
func (*LabelUpReq) ProtoMessage()               {}
func (*LabelUpReq) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{0} }

type LabelUpAck struct {
	Id    int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Goods *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *LabelUpAck) Reset()                    { *m = LabelUpAck{} }
func (m *LabelUpAck) String() string            { return proto.CompactTextString(m) }
func (*LabelUpAck) ProtoMessage()               {}
func (*LabelUpAck) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{1} }

func (m *LabelUpAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LabelUpAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 头衔转职
type LabelTransferReq struct {
	Job int32 `protobuf:"varint,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *LabelTransferReq) Reset()                    { *m = LabelTransferReq{} }
func (m *LabelTransferReq) String() string            { return proto.CompactTextString(m) }
func (*LabelTransferReq) ProtoMessage()               {}
func (*LabelTransferReq) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{2} }

func (m *LabelTransferReq) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

type LabelTransferAck struct {
	Job      int32 `protobuf:"varint,1,opt,name=job,proto3" json:"job,omitempty"`
	Transfer int32 `protobuf:"varint,2,opt,name=transfer,proto3" json:"transfer,omitempty"`
}

func (m *LabelTransferAck) Reset()                    { *m = LabelTransferAck{} }
func (m *LabelTransferAck) String() string            { return proto.CompactTextString(m) }
func (*LabelTransferAck) ProtoMessage()               {}
func (*LabelTransferAck) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{3} }

func (m *LabelTransferAck) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

func (m *LabelTransferAck) GetTransfer() int32 {
	if m != nil {
		return m.Transfer
	}
	return 0
}

// 每日奖励
type LabelDayRewardReq struct {
}

func (m *LabelDayRewardReq) Reset()                    { *m = LabelDayRewardReq{} }
func (m *LabelDayRewardReq) String() string            { return proto.CompactTextString(m) }
func (*LabelDayRewardReq) ProtoMessage()               {}
func (*LabelDayRewardReq) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{4} }

type LabelDayRewardAck struct {
	DayReward bool            `protobuf:"varint,1,opt,name=dayReward,proto3" json:"dayReward,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *LabelDayRewardAck) Reset()                    { *m = LabelDayRewardAck{} }
func (m *LabelDayRewardAck) String() string            { return proto.CompactTextString(m) }
func (*LabelDayRewardAck) ProtoMessage()               {}
func (*LabelDayRewardAck) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{5} }

func (m *LabelDayRewardAck) GetDayReward() bool {
	if m != nil {
		return m.DayReward
	}
	return false
}

func (m *LabelDayRewardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 获取任务进度
type LabelTaskReq struct {
}

func (m *LabelTaskReq) Reset()                    { *m = LabelTaskReq{} }
func (m *LabelTaskReq) String() string            { return proto.CompactTextString(m) }
func (*LabelTaskReq) ProtoMessage()               {}
func (*LabelTaskReq) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{6} }

// 任务进度
type LabelTaskNtf struct {
	LabelId  int32                    `protobuf:"varint,1,opt,name=labelId,proto3" json:"labelId,omitempty"`
	TaskInfo map[int32]*LabelTaskUnit `protobuf:"bytes,2,rep,name=taskInfo" json:"taskInfo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LabelTaskNtf) Reset()                    { *m = LabelTaskNtf{} }
func (m *LabelTaskNtf) String() string            { return proto.CompactTextString(m) }
func (*LabelTaskNtf) ProtoMessage()               {}
func (*LabelTaskNtf) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{7} }

func (m *LabelTaskNtf) GetLabelId() int32 {
	if m != nil {
		return m.LabelId
	}
	return 0
}

func (m *LabelTaskNtf) GetTaskInfo() map[int32]*LabelTaskUnit {
	if m != nil {
		return m.TaskInfo
	}
	return nil
}

type LabelTaskUnit struct {
	TaskId int32   `protobuf:"varint,1,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Value  []int32 `protobuf:"varint,2,rep,packed,name=value" json:"value,omitempty"`
	CfgVal []int32 `protobuf:"varint,3,rep,packed,name=cfgVal" json:"cfgVal,omitempty"`
	IsOver bool    `protobuf:"varint,4,opt,name=isOver,proto3" json:"isOver,omitempty"`
}

func (m *LabelTaskUnit) Reset()                    { *m = LabelTaskUnit{} }
func (m *LabelTaskUnit) String() string            { return proto.CompactTextString(m) }
func (*LabelTaskUnit) ProtoMessage()               {}
func (*LabelTaskUnit) Descriptor() ([]byte, []int) { return fileDescriptorLabel, []int{8} }

func (m *LabelTaskUnit) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *LabelTaskUnit) GetValue() []int32 {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *LabelTaskUnit) GetCfgVal() []int32 {
	if m != nil {
		return m.CfgVal
	}
	return nil
}

func (m *LabelTaskUnit) GetIsOver() bool {
	if m != nil {
		return m.IsOver
	}
	return false
}

func init() {
	proto.RegisterType((*LabelUpReq)(nil), "pb.LabelUpReq")
	proto.RegisterType((*LabelUpAck)(nil), "pb.LabelUpAck")
	proto.RegisterType((*LabelTransferReq)(nil), "pb.LabelTransferReq")
	proto.RegisterType((*LabelTransferAck)(nil), "pb.LabelTransferAck")
	proto.RegisterType((*LabelDayRewardReq)(nil), "pb.LabelDayRewardReq")
	proto.RegisterType((*LabelDayRewardAck)(nil), "pb.LabelDayRewardAck")
	proto.RegisterType((*LabelTaskReq)(nil), "pb.LabelTaskReq")
	proto.RegisterType((*LabelTaskNtf)(nil), "pb.LabelTaskNtf")
	proto.RegisterType((*LabelTaskUnit)(nil), "pb.LabelTaskUnit")
}
func (m *LabelUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LabelUpAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelUpAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.Id))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *LabelTransferReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelTransferReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.Job))
	}
	return i, nil
}

func (m *LabelTransferAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelTransferAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.Job))
	}
	if m.Transfer != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.Transfer))
	}
	return i, nil
}

func (m *LabelDayRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelDayRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LabelDayRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelDayRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayReward {
		dAtA[i] = 0x8
		i++
		if m.DayReward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LabelTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelTaskReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LabelTaskNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelTaskNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LabelId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.LabelId))
	}
	if len(m.TaskInfo) > 0 {
		for k, _ := range m.TaskInfo {
			dAtA[i] = 0x12
			i++
			v := m.TaskInfo[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovLabel(uint64(msgSize))
			}
			mapSize := 1 + sovLabel(uint64(k)) + msgSize
			i = encodeVarintLabel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintLabel(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintLabel(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *LabelTaskUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LabelTaskUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLabel(dAtA, i, uint64(m.TaskId))
	}
	if len(m.Value) > 0 {
		dAtA5 := make([]byte, len(m.Value)*10)
		var j4 int
		for _, num1 := range m.Value {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintLabel(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.CfgVal) > 0 {
		dAtA7 := make([]byte, len(m.CfgVal)*10)
		var j6 int
		for _, num1 := range m.CfgVal {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLabel(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.IsOver {
		dAtA[i] = 0x20
		i++
		if m.IsOver {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintLabel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LabelUpReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LabelUpAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLabel(uint64(m.Id))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovLabel(uint64(l))
	}
	return n
}

func (m *LabelTransferReq) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovLabel(uint64(m.Job))
	}
	return n
}

func (m *LabelTransferAck) Size() (n int) {
	var l int
	_ = l
	if m.Job != 0 {
		n += 1 + sovLabel(uint64(m.Job))
	}
	if m.Transfer != 0 {
		n += 1 + sovLabel(uint64(m.Transfer))
	}
	return n
}

func (m *LabelDayRewardReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LabelDayRewardAck) Size() (n int) {
	var l int
	_ = l
	if m.DayReward {
		n += 2
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovLabel(uint64(l))
	}
	return n
}

func (m *LabelTaskReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LabelTaskNtf) Size() (n int) {
	var l int
	_ = l
	if m.LabelId != 0 {
		n += 1 + sovLabel(uint64(m.LabelId))
	}
	if len(m.TaskInfo) > 0 {
		for k, v := range m.TaskInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovLabel(uint64(l))
			}
			mapEntrySize := 1 + sovLabel(uint64(k)) + l
			n += mapEntrySize + 1 + sovLabel(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LabelTaskUnit) Size() (n int) {
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovLabel(uint64(m.TaskId))
	}
	if len(m.Value) > 0 {
		l = 0
		for _, e := range m.Value {
			l += sovLabel(uint64(e))
		}
		n += 1 + sovLabel(uint64(l)) + l
	}
	if len(m.CfgVal) > 0 {
		l = 0
		for _, e := range m.CfgVal {
			l += sovLabel(uint64(e))
		}
		n += 1 + sovLabel(uint64(l)) + l
	}
	if m.IsOver {
		n += 2
	}
	return n
}

func sovLabel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLabel(x uint64) (n int) {
	return sovLabel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LabelUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelUpAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelUpAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelUpAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelTransferReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelTransferReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelTransferReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelTransferAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelTransferAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelTransferAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transfer", wireType)
			}
			m.Transfer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Transfer |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelDayRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelDayRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelDayRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelDayRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelDayRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelDayRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayReward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayReward = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelTaskNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelTaskNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelTaskNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LabelId", wireType)
			}
			m.LabelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LabelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLabel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaskInfo == nil {
				m.TaskInfo = make(map[int32]*LabelTaskUnit)
			}
			var mapkey int32
			var mapvalue *LabelTaskUnit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthLabel
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthLabel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LabelTaskUnit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipLabel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthLabel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TaskInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LabelTaskUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelTaskUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelTaskUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Value = append(m.Value, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Value = append(m.Value, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CfgVal = append(m.CfgVal, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLabel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLabel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLabel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CfgVal = append(m.CfgVal, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CfgVal", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOver", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOver = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLabel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLabel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLabel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLabel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLabel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLabel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLabel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLabel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("label.proto", fileDescriptorLabel) }

var fileDescriptorLabel = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcb, 0x6e, 0x9b, 0x40,
	0x14, 0xed, 0x40, 0x71, 0xdd, 0xeb, 0x87, 0xec, 0x69, 0x55, 0x21, 0xab, 0x42, 0x16, 0xaa, 0x54,
	0x56, 0x2c, 0xdc, 0x4d, 0xe5, 0x55, 0xdf, 0x95, 0xa5, 0xca, 0x95, 0x46, 0x76, 0x36, 0x59, 0x0d,
	0x66, 0x70, 0x08, 0x98, 0xc1, 0x40, 0x1c, 0xf1, 0x27, 0xf9, 0x90, 0x7c, 0x44, 0x96, 0xf9, 0x84,
	0xc8, 0xf9, 0x91, 0x68, 0x86, 0xc1, 0xaf, 0xac, 0xb2, 0xe3, 0x9c, 0x7b, 0x38, 0xe7, 0xde, 0xa3,
	0x81, 0x56, 0x4c, 0x3d, 0x16, 0xbb, 0x69, 0xc6, 0x0b, 0x8e, 0xb5, 0xd4, 0x1b, 0xb4, 0x17, 0x7c,
	0xb5, 0xe2, 0x49, 0xc5, 0xd8, 0x6d, 0x80, 0x7f, 0x42, 0x30, 0x4f, 0x09, 0x5b, 0xdb, 0x7f, 0x76,
	0xe8, 0xfb, 0x22, 0xc2, 0x5d, 0xd0, 0x42, 0xdf, 0x44, 0x43, 0xe4, 0x18, 0x44, 0x0b, 0x7d, 0xec,
	0x80, 0xb1, 0xe4, 0xdc, 0xcf, 0x4d, 0x6d, 0x88, 0x9c, 0xd6, 0x08, 0xbb, 0xa9, 0xe7, 0xfe, 0x15,
	0xc4, 0xcf, 0x0b, 0x9a, 0x2c, 0xd9, 0xb4, 0x08, 0x48, 0x25, 0xb0, 0x3f, 0x41, 0x4f, 0xfa, 0xcc,
	0x32, 0x9a, 0xe4, 0x01, 0xcb, 0x08, 0x5b, 0xe3, 0x1e, 0xe8, 0x97, 0xdc, 0x53, 0x76, 0xe2, 0xd3,
	0xfe, 0x76, 0xa2, 0x12, 0x99, 0xcf, 0x54, 0x78, 0x00, 0xcd, 0x42, 0x09, 0x64, 0xb0, 0x41, 0x76,
	0xd8, 0x7e, 0x07, 0x7d, 0xe9, 0xf0, 0x8b, 0x96, 0x84, 0x5d, 0xd3, 0xcc, 0x17, 0x47, 0x9c, 0x9f,
	0x92, 0xc2, 0xf7, 0x23, 0xbc, 0xf5, 0x6b, 0x2c, 0xdd, 0x9b, 0x64, 0x4f, 0xbc, 0xe0, 0xb2, 0x2e,
	0xb4, 0xab, 0x9d, 0x69, 0x1e, 0x89, 0xb0, 0x5b, 0x74, 0x40, 0x4c, 0x8b, 0x00, 0x9b, 0xf0, 0x46,
	0x36, 0x3e, 0xa9, 0x9b, 0xab, 0x21, 0x1e, 0x43, 0xb3, 0xa0, 0x79, 0x34, 0x49, 0x02, 0x6e, 0x6a,
	0x43, 0xdd, 0x69, 0x8d, 0x2c, 0x91, 0x73, 0xf8, 0xb7, 0x3b, 0x53, 0x82, 0xdf, 0x49, 0x91, 0x95,
	0x64, 0xa7, 0x1f, 0x4c, 0xa1, 0x73, 0x34, 0x12, 0x3d, 0x45, 0xac, 0xac, 0x7b, 0x8a, 0x58, 0x89,
	0x3f, 0x83, 0xb1, 0xa1, 0xf1, 0x15, 0x53, 0x37, 0xf4, 0x8f, 0xbc, 0xe7, 0x49, 0x58, 0x90, 0x6a,
	0x3e, 0xd6, 0xbe, 0x22, 0x7b, 0x05, 0x9d, 0xa3, 0x19, 0xfe, 0x00, 0x0d, 0x19, 0x56, 0x6f, 0xad,
	0x10, 0x7e, 0xbf, 0x77, 0xd5, 0x1d, 0x43, 0x59, 0x08, 0xf5, 0x22, 0x58, 0x9e, 0xd1, 0xd8, 0xd4,
	0x25, 0xad, 0x90, 0xe0, 0xc3, 0xfc, 0xff, 0x86, 0x65, 0xe6, 0x6b, 0x59, 0xb1, 0x42, 0x3f, 0x7a,
	0x77, 0x5b, 0x0b, 0xdd, 0x6f, 0x2d, 0xf4, 0xb0, 0xb5, 0xd0, 0xcd, 0xa3, 0xf5, 0xca, 0x6b, 0xc8,
	0xe7, 0xf7, 0xe5, 0x29, 0x00, 0x00, 0xff, 0xff, 0x62, 0x09, 0xca, 0x6d, 0x9f, 0x02, 0x00, 0x00,
}
