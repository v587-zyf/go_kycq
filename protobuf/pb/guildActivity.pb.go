// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: guildActivity.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 公会活动开启推送
type GuildActivityOpenNtf struct {
	GuildActivityId int32 `protobuf:"varint,1,opt,name=guildActivityId,proto3" json:"guildActivityId,omitempty"`
	EndTime         int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *GuildActivityOpenNtf) Reset()         { *m = GuildActivityOpenNtf{} }
func (m *GuildActivityOpenNtf) String() string { return proto.CompactTextString(m) }
func (*GuildActivityOpenNtf) ProtoMessage()    {}
func (*GuildActivityOpenNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorGuildActivity, []int{0}
}

func (m *GuildActivityOpenNtf) GetGuildActivityId() int32 {
	if m != nil {
		return m.GuildActivityId
	}
	return 0
}

func (m *GuildActivityOpenNtf) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 获取公会活动开启信息
type GuildActivityLoadReq struct {
	GuildActivityId int32 `protobuf:"varint,1,opt,name=guildActivityId,proto3" json:"guildActivityId,omitempty"`
}

func (m *GuildActivityLoadReq) Reset()         { *m = GuildActivityLoadReq{} }
func (m *GuildActivityLoadReq) String() string { return proto.CompactTextString(m) }
func (*GuildActivityLoadReq) ProtoMessage()    {}
func (*GuildActivityLoadReq) Descriptor() ([]byte, []int) {
	return fileDescriptorGuildActivity, []int{1}
}

func (m *GuildActivityLoadReq) GetGuildActivityId() int32 {
	if m != nil {
		return m.GuildActivityId
	}
	return 0
}

type GuildActivityLoadAck struct {
	GuildActivityId int32 `protobuf:"varint,1,opt,name=guildActivityId,proto3" json:"guildActivityId,omitempty"`
	EndTime         int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	IsClose         bool  `protobuf:"varint,3,opt,name=isClose,proto3" json:"isClose,omitempty"`
}

func (m *GuildActivityLoadAck) Reset()         { *m = GuildActivityLoadAck{} }
func (m *GuildActivityLoadAck) String() string { return proto.CompactTextString(m) }
func (*GuildActivityLoadAck) ProtoMessage()    {}
func (*GuildActivityLoadAck) Descriptor() ([]byte, []int) {
	return fileDescriptorGuildActivity, []int{2}
}

func (m *GuildActivityLoadAck) GetGuildActivityId() int32 {
	if m != nil {
		return m.GuildActivityId
	}
	return 0
}

func (m *GuildActivityLoadAck) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GuildActivityLoadAck) GetIsClose() bool {
	if m != nil {
		return m.IsClose
	}
	return false
}

func init() {
	proto.RegisterType((*GuildActivityOpenNtf)(nil), "pb.GuildActivityOpenNtf")
	proto.RegisterType((*GuildActivityLoadReq)(nil), "pb.GuildActivityLoadReq")
	proto.RegisterType((*GuildActivityLoadAck)(nil), "pb.GuildActivityLoadAck")
}
func (m *GuildActivityOpenNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildActivityOpenNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuildActivity(dAtA, i, uint64(m.GuildActivityId))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuildActivity(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *GuildActivityLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildActivityLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuildActivity(dAtA, i, uint64(m.GuildActivityId))
	}
	return i, nil
}

func (m *GuildActivityLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuildActivityLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuildActivity(dAtA, i, uint64(m.GuildActivityId))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuildActivity(dAtA, i, uint64(m.EndTime))
	}
	if m.IsClose {
		dAtA[i] = 0x18
		i++
		if m.IsClose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintGuildActivity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GuildActivityOpenNtf) Size() (n int) {
	var l int
	_ = l
	if m.GuildActivityId != 0 {
		n += 1 + sovGuildActivity(uint64(m.GuildActivityId))
	}
	if m.EndTime != 0 {
		n += 1 + sovGuildActivity(uint64(m.EndTime))
	}
	return n
}

func (m *GuildActivityLoadReq) Size() (n int) {
	var l int
	_ = l
	if m.GuildActivityId != 0 {
		n += 1 + sovGuildActivity(uint64(m.GuildActivityId))
	}
	return n
}

func (m *GuildActivityLoadAck) Size() (n int) {
	var l int
	_ = l
	if m.GuildActivityId != 0 {
		n += 1 + sovGuildActivity(uint64(m.GuildActivityId))
	}
	if m.EndTime != 0 {
		n += 1 + sovGuildActivity(uint64(m.EndTime))
	}
	if m.IsClose {
		n += 2
	}
	return n
}

func sovGuildActivity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuildActivity(x uint64) (n int) {
	return sovGuildActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuildActivityOpenNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildActivityOpenNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildActivityOpenNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildActivityId", wireType)
			}
			m.GuildActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuildActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildActivityLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildActivityLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildActivityLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildActivityId", wireType)
			}
			m.GuildActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuildActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuildActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuildActivityLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuildActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuildActivityLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuildActivityLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildActivityId", wireType)
			}
			m.GuildActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsClose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsClose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGuildActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuildActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuildActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuildActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuildActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuildActivity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuildActivity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuildActivity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuildActivity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuildActivity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("guildActivity.proto", fileDescriptorGuildActivity) }

var fileDescriptorGuildActivity = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x2f, 0xcd, 0xcc,
	0x49, 0x71, 0x4c, 0x2e, 0xc9, 0x2c, 0xcb, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2a, 0x48, 0x52, 0x8a, 0xe2, 0x12, 0x71, 0x47, 0x96, 0xf2, 0x2f, 0x48, 0xcd, 0xf3, 0x2b,
	0x49, 0x13, 0xd2, 0xe0, 0xe2, 0x47, 0xd1, 0xe2, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a,
	0x84, 0x2e, 0x2c, 0x24, 0xc1, 0xc5, 0x9e, 0x9a, 0x97, 0x12, 0x92, 0x99, 0x9b, 0x2a, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0xe3, 0x2a, 0x39, 0xa0, 0x99, 0xed, 0x93, 0x9f, 0x98, 0x12, 0x94,
	0x5a, 0x48, 0xbc, 0xd9, 0x4a, 0x25, 0x58, 0x4c, 0x70, 0x4c, 0xce, 0xa6, 0x86, 0xeb, 0x40, 0x32,
	0x99, 0xc5, 0xce, 0x39, 0xf9, 0xc5, 0xa9, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0x1c, 0x41, 0x30, 0xae,
	0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0xc0, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x08,
	0x33, 0xd9, 0x47, 0x01, 0x00, 0x00,
}
