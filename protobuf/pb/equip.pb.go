// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: equip.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EquipChangeReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	BagPos    int32 `protobuf:"varint,3,opt,name=bagPos,proto3" json:"bagPos,omitempty"`
}

func (m *EquipChangeReq) Reset()                    { *m = EquipChangeReq{} }
func (m *EquipChangeReq) String() string            { return proto.CompactTextString(m) }
func (*EquipChangeReq) ProtoMessage()               {}
func (*EquipChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{0} }

func (m *EquipChangeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipChangeReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *EquipChangeReq) GetBagPos() int32 {
	if m != nil {
		return m.BagPos
	}
	return 0
}

type EquipChangeAck struct {
	HeroIndex int32                `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Equips    map[int32]*EquipUnit `protobuf:"bytes,2,rep,name=equips" json:"equips,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EquipChangeAck) Reset()                    { *m = EquipChangeAck{} }
func (m *EquipChangeAck) String() string            { return proto.CompactTextString(m) }
func (*EquipChangeAck) ProtoMessage()               {}
func (*EquipChangeAck) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{1} }

func (m *EquipChangeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipChangeAck) GetEquips() map[int32]*EquipUnit {
	if m != nil {
		return m.Equips
	}
	return nil
}

type EquipLockReq struct {
	Pos int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *EquipLockReq) Reset()                    { *m = EquipLockReq{} }
func (m *EquipLockReq) String() string            { return proto.CompactTextString(m) }
func (*EquipLockReq) ProtoMessage()               {}
func (*EquipLockReq) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{2} }

func (m *EquipLockReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type EquipLockAck struct {
	Pos  int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	Lock bool  `protobuf:"varint,3,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *EquipLockAck) Reset()                    { *m = EquipLockAck{} }
func (m *EquipLockAck) String() string            { return proto.CompactTextString(m) }
func (*EquipLockAck) ProtoMessage()               {}
func (*EquipLockAck) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{3} }

func (m *EquipLockAck) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *EquipLockAck) GetLock() bool {
	if m != nil {
		return m.Lock
	}
	return false
}

type EquipStrengthenReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *EquipStrengthenReq) Reset()                    { *m = EquipStrengthenReq{} }
func (m *EquipStrengthenReq) String() string            { return proto.CompactTextString(m) }
func (*EquipStrengthenReq) ProtoMessage()               {}
func (*EquipStrengthenReq) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{4} }

func (m *EquipStrengthenReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipStrengthenReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type EquipStrengthenAck struct {
	HeroIndex  int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipGrids *EquipGrid `protobuf:"bytes,2,opt,name=equipGrids" json:"equipGrids,omitempty"`
	IsUp       bool       `protobuf:"varint,3,opt,name=isUp,proto3" json:"isUp,omitempty"`
}

func (m *EquipStrengthenAck) Reset()                    { *m = EquipStrengthenAck{} }
func (m *EquipStrengthenAck) String() string            { return proto.CompactTextString(m) }
func (*EquipStrengthenAck) ProtoMessage()               {}
func (*EquipStrengthenAck) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{5} }

func (m *EquipStrengthenAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipStrengthenAck) GetEquipGrids() *EquipGrid {
	if m != nil {
		return m.EquipGrids
	}
	return nil
}

func (m *EquipStrengthenAck) GetIsUp() bool {
	if m != nil {
		return m.IsUp
	}
	return false
}

type EquipRemoveReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *EquipRemoveReq) Reset()                    { *m = EquipRemoveReq{} }
func (m *EquipRemoveReq) String() string            { return proto.CompactTextString(m) }
func (*EquipRemoveReq) ProtoMessage()               {}
func (*EquipRemoveReq) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{6} }

func (m *EquipRemoveReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipRemoveReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type EquipRemoveAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *EquipRemoveAck) Reset()                    { *m = EquipRemoveAck{} }
func (m *EquipRemoveAck) String() string            { return proto.CompactTextString(m) }
func (*EquipRemoveAck) ProtoMessage()               {}
func (*EquipRemoveAck) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{7} }

func (m *EquipRemoveAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipRemoveAck) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type EquipBlessNtf struct {
	HeroIndex int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Lucky     int32      `protobuf:"varint,2,opt,name=lucky,proto3" json:"lucky,omitempty"`
	Res       int32      `protobuf:"varint,3,opt,name=res,proto3" json:"res,omitempty"`
	Equip     *EquipUnit `protobuf:"bytes,4,opt,name=equip" json:"equip,omitempty"`
}

func (m *EquipBlessNtf) Reset()                    { *m = EquipBlessNtf{} }
func (m *EquipBlessNtf) String() string            { return proto.CompactTextString(m) }
func (*EquipBlessNtf) ProtoMessage()               {}
func (*EquipBlessNtf) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{8} }

func (m *EquipBlessNtf) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipBlessNtf) GetLucky() int32 {
	if m != nil {
		return m.Lucky
	}
	return 0
}

func (m *EquipBlessNtf) GetRes() int32 {
	if m != nil {
		return m.Res
	}
	return 0
}

func (m *EquipBlessNtf) GetEquip() *EquipUnit {
	if m != nil {
		return m.Equip
	}
	return nil
}

type EquipStrengthenAutoReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	IsBreak   bool  `protobuf:"varint,2,opt,name=isBreak,proto3" json:"isBreak,omitempty"`
}

func (m *EquipStrengthenAutoReq) Reset()                    { *m = EquipStrengthenAutoReq{} }
func (m *EquipStrengthenAutoReq) String() string            { return proto.CompactTextString(m) }
func (*EquipStrengthenAutoReq) ProtoMessage()               {}
func (*EquipStrengthenAutoReq) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{9} }

func (m *EquipStrengthenAutoReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipStrengthenAutoReq) GetIsBreak() bool {
	if m != nil {
		return m.IsBreak
	}
	return false
}

type EquipStrengthenAutoAck struct {
	HeroIndex  int32        `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipGrids []*EquipGrid `protobuf:"bytes,2,rep,name=equipGrids" json:"equipGrids,omitempty"`
}

func (m *EquipStrengthenAutoAck) Reset()                    { *m = EquipStrengthenAutoAck{} }
func (m *EquipStrengthenAutoAck) String() string            { return proto.CompactTextString(m) }
func (*EquipStrengthenAutoAck) ProtoMessage()               {}
func (*EquipStrengthenAutoAck) Descriptor() ([]byte, []int) { return fileDescriptorEquip, []int{10} }

func (m *EquipStrengthenAutoAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *EquipStrengthenAutoAck) GetEquipGrids() []*EquipGrid {
	if m != nil {
		return m.EquipGrids
	}
	return nil
}

func init() {
	proto.RegisterType((*EquipChangeReq)(nil), "pb.EquipChangeReq")
	proto.RegisterType((*EquipChangeAck)(nil), "pb.EquipChangeAck")
	proto.RegisterType((*EquipLockReq)(nil), "pb.EquipLockReq")
	proto.RegisterType((*EquipLockAck)(nil), "pb.EquipLockAck")
	proto.RegisterType((*EquipStrengthenReq)(nil), "pb.EquipStrengthenReq")
	proto.RegisterType((*EquipStrengthenAck)(nil), "pb.EquipStrengthenAck")
	proto.RegisterType((*EquipRemoveReq)(nil), "pb.EquipRemoveReq")
	proto.RegisterType((*EquipRemoveAck)(nil), "pb.EquipRemoveAck")
	proto.RegisterType((*EquipBlessNtf)(nil), "pb.EquipBlessNtf")
	proto.RegisterType((*EquipStrengthenAutoReq)(nil), "pb.EquipStrengthenAutoReq")
	proto.RegisterType((*EquipStrengthenAutoAck)(nil), "pb.EquipStrengthenAutoAck")
}
func (m *EquipChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Pos))
	}
	if m.BagPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.BagPos))
	}
	return i, nil
}

func (m *EquipChangeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipChangeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if len(m.Equips) > 0 {
		for k, _ := range m.Equips {
			dAtA[i] = 0x12
			i++
			v := m.Equips[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovEquip(uint64(msgSize))
			}
			mapSize := 1 + sovEquip(uint64(k)) + msgSize
			i = encodeVarintEquip(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintEquip(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintEquip(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *EquipLockReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipLockReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *EquipLockAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipLockAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Pos))
	}
	if m.Lock {
		dAtA[i] = 0x18
		i++
		if m.Lock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EquipStrengthenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipStrengthenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *EquipStrengthenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipStrengthenAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipGrids != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.EquipGrids.Size()))
		n2, err := m.EquipGrids.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsUp {
		dAtA[i] = 0x18
		i++
		if m.IsUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EquipRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *EquipRemoveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipRemoveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *EquipBlessNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipBlessNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Lucky != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Lucky))
	}
	if m.Res != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Res))
	}
	if m.Equip != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.Equip.Size()))
		n3, err := m.Equip.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *EquipStrengthenAutoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipStrengthenAutoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.IsBreak {
		dAtA[i] = 0x10
		i++
		if m.IsBreak {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EquipStrengthenAutoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipStrengthenAutoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if len(m.EquipGrids) > 0 {
		for _, msg := range m.EquipGrids {
			dAtA[i] = 0x12
			i++
			i = encodeVarintEquip(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintEquip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EquipChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovEquip(uint64(m.Pos))
	}
	if m.BagPos != 0 {
		n += 1 + sovEquip(uint64(m.BagPos))
	}
	return n
}

func (m *EquipChangeAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if len(m.Equips) > 0 {
		for k, v := range m.Equips {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEquip(uint64(l))
			}
			mapEntrySize := 1 + sovEquip(uint64(k)) + l
			n += mapEntrySize + 1 + sovEquip(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *EquipLockReq) Size() (n int) {
	var l int
	_ = l
	if m.Pos != 0 {
		n += 1 + sovEquip(uint64(m.Pos))
	}
	return n
}

func (m *EquipLockAck) Size() (n int) {
	var l int
	_ = l
	if m.Pos != 0 {
		n += 1 + sovEquip(uint64(m.Pos))
	}
	if m.Lock {
		n += 2
	}
	return n
}

func (m *EquipStrengthenReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovEquip(uint64(m.Pos))
	}
	return n
}

func (m *EquipStrengthenAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.EquipGrids != nil {
		l = m.EquipGrids.Size()
		n += 1 + l + sovEquip(uint64(l))
	}
	if m.IsUp {
		n += 2
	}
	return n
}

func (m *EquipRemoveReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovEquip(uint64(m.Pos))
	}
	return n
}

func (m *EquipRemoveAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovEquip(uint64(m.Pos))
	}
	return n
}

func (m *EquipBlessNtf) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.Lucky != 0 {
		n += 1 + sovEquip(uint64(m.Lucky))
	}
	if m.Res != 0 {
		n += 1 + sovEquip(uint64(m.Res))
	}
	if m.Equip != nil {
		l = m.Equip.Size()
		n += 1 + l + sovEquip(uint64(l))
	}
	return n
}

func (m *EquipStrengthenAutoReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if m.IsBreak {
		n += 2
	}
	return n
}

func (m *EquipStrengthenAutoAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovEquip(uint64(m.HeroIndex))
	}
	if len(m.EquipGrids) > 0 {
		for _, e := range m.EquipGrids {
			l = e.Size()
			n += 1 + l + sovEquip(uint64(l))
		}
	}
	return n
}

func sovEquip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEquip(x uint64) (n int) {
	return sovEquip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EquipChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagPos", wireType)
			}
			m.BagPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipChangeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipChangeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipChangeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equips", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equips == nil {
				m.Equips = make(map[int32]*EquipUnit)
			}
			var mapkey int32
			var mapvalue *EquipUnit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EquipUnit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEquip
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Equips[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipLockReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipLockReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipLockReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipLockAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipLockAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipLockAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Lock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipStrengthenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipStrengthenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipStrengthenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipStrengthenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipStrengthenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipStrengthenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipGrids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipGrids == nil {
				m.EquipGrids = &EquipGrid{}
			}
			if err := m.EquipGrids.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsUp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipRemoveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipRemoveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipRemoveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipBlessNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipBlessNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipBlessNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lucky", wireType)
			}
			m.Lucky = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lucky |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			m.Res = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Res |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equip", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equip == nil {
				m.Equip = &EquipUnit{}
			}
			if err := m.Equip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipStrengthenAutoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipStrengthenAutoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipStrengthenAutoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBreak", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBreak = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipStrengthenAutoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipStrengthenAutoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipStrengthenAutoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipGrids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EquipGrids = append(m.EquipGrids, &EquipGrid{})
			if err := m.EquipGrids[len(m.EquipGrids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEquip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEquip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEquip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEquip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("equip.proto", fileDescriptorEquip) }

var fileDescriptorEquip = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x6f, 0x29, 0x70, 0xb9, 0xa7, 0x70, 0x43, 0x1a, 0x43, 0x1a, 0x62, 0x1a, 0x32, 0x6e,
	0xd8, 0xc8, 0x02, 0x8d, 0x31, 0xae, 0x14, 0x25, 0x6a, 0x62, 0x0c, 0x19, 0x43, 0xe2, 0xb6, 0x2d,
	0x23, 0x34, 0x2d, 0x9d, 0xd2, 0x69, 0x89, 0xf8, 0x24, 0x3e, 0x86, 0x8f, 0xe1, 0xd2, 0x47, 0x30,
	0xf8, 0x22, 0x66, 0xa6, 0x45, 0x81, 0x12, 0x1b, 0xd9, 0x9d, 0xf3, 0xf7, 0xf0, 0xe5, 0x3f, 0xff,
	0x1c, 0x40, 0x21, 0x93, 0xc8, 0xf6, 0x5b, 0x7e, 0x40, 0x43, 0xaa, 0xe6, 0x7c, 0xb3, 0x5e, 0xb6,
	0xe8, 0x78, 0x4c, 0xbd, 0x58, 0x41, 0xf7, 0xf0, 0xbf, 0xcb, 0x07, 0xce, 0x47, 0x86, 0x37, 0x24,
	0x98, 0x4c, 0xd4, 0x5d, 0xf8, 0x37, 0x22, 0x01, 0xbd, 0xf6, 0x06, 0xe4, 0x51, 0x93, 0x1a, 0x52,
	0xb3, 0x80, 0xbf, 0x05, 0xb5, 0x0a, 0xb2, 0x4f, 0x99, 0x96, 0x13, 0x3a, 0x2f, 0xd5, 0x1a, 0x14,
	0x4d, 0x63, 0xd8, 0xa3, 0x4c, 0x93, 0x85, 0x98, 0x74, 0xe8, 0x45, 0x5a, 0x41, 0x9f, 0x59, 0x4e,
	0x06, 0xfa, 0x08, 0x8a, 0xc2, 0x2b, 0xa7, 0xcb, 0x4d, 0xa5, 0xad, 0xb7, 0x7c, 0xb3, 0xb5, 0x4a,
	0x88, 0x5b, 0xd6, 0xf5, 0xc2, 0x60, 0x86, 0x93, 0xe9, 0xfa, 0x15, 0x28, 0x4b, 0x32, 0x77, 0xe8,
	0x90, 0x59, 0x82, 0xe7, 0xa5, 0xba, 0x07, 0x85, 0xa9, 0xe1, 0x46, 0x44, 0xb8, 0x56, 0xda, 0x95,
	0x2f, 0x6e, 0xdf, 0xb3, 0x43, 0x1c, 0x7f, 0x3b, 0xc9, 0x1d, 0x4b, 0xa8, 0x01, 0x65, 0xa1, 0xdf,
	0x50, 0xcb, 0xe1, 0x51, 0xa4, 0x96, 0x45, 0x87, 0x4b, 0x13, 0x7c, 0xa3, 0x74, 0x1c, 0x2a, 0xe4,
	0x5d, 0x6a, 0x39, 0x22, 0x8c, 0x12, 0x16, 0x35, 0xba, 0x00, 0x55, 0xfc, 0xea, 0x2e, 0x0c, 0x88,
	0x37, 0x0c, 0x47, 0xc4, 0xdb, 0x22, 0x68, 0x14, 0xa5, 0x28, 0xd9, 0x99, 0xee, 0x03, 0x88, 0x94,
	0x2e, 0x03, 0x7b, 0xc0, 0x52, 0xfb, 0x73, 0x15, 0x2f, 0x0d, 0x70, 0xf3, 0x36, 0xeb, 0xfb, 0x0b,
	0xf3, 0xbc, 0x46, 0xa7, 0xc9, 0x33, 0x62, 0x32, 0xa6, 0xd3, 0x6d, 0x2e, 0x64, 0x8d, 0x90, 0x6d,
	0x3a, 0x4d, 0x78, 0x82, 0x8a, 0x20, 0x74, 0x5c, 0xc2, 0xd8, 0x6d, 0xf8, 0x90, 0x01, 0xd8, 0x81,
	0x82, 0x1b, 0x59, 0xce, 0x2c, 0x41, 0xc4, 0x0d, 0xc7, 0x06, 0x64, 0x71, 0xa5, 0xbc, 0xe4, 0x87,
	0x21, 0x96, 0xd7, 0xf2, 0x1b, 0x0f, 0x43, 0x7c, 0x43, 0x3d, 0xa8, 0xad, 0xc7, 0x1e, 0x85, 0x34,
	0x3b, 0x07, 0x0d, 0xfe, 0xda, 0xac, 0x13, 0x10, 0xc3, 0x11, 0x36, 0x4a, 0x78, 0xd1, 0x22, 0xb2,
	0x91, 0xf8, 0xfb, 0xc7, 0x94, 0x7f, 0x7c, 0xcc, 0x4e, 0xf5, 0x75, 0xae, 0x4b, 0x6f, 0x73, 0x5d,
	0x7a, 0x9f, 0xeb, 0xd2, 0xf3, 0x87, 0xfe, 0xc7, 0x2c, 0x8a, 0xff, 0xfc, 0xc1, 0x67, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x39, 0x2e, 0xc5, 0xb4, 0x14, 0x04, 0x00, 0x00,
}
