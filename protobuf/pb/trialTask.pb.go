// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trialTask.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TrialTaskInfoReq struct {
}

func (m *TrialTaskInfoReq) Reset()                    { *m = TrialTaskInfoReq{} }
func (m *TrialTaskInfoReq) String() string            { return proto.CompactTextString(m) }
func (*TrialTaskInfoReq) ProtoMessage()               {}
func (*TrialTaskInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorTrialTask, []int{0} }

type TrialTaskInfoAck struct {
	TrialTaskInfos map[int32]*TrialTaskInfo `protobuf:"bytes,1,rep,name=trialTaskInfos" json:"trialTaskInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	EndTime        int64                    `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	HaveGetStageId []int32                  `protobuf:"varint,3,rep,packed,name=haveGetStageId" json:"haveGetStageId,omitempty"`
}

func (m *TrialTaskInfoAck) Reset()                    { *m = TrialTaskInfoAck{} }
func (m *TrialTaskInfoAck) String() string            { return proto.CompactTextString(m) }
func (*TrialTaskInfoAck) ProtoMessage()               {}
func (*TrialTaskInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorTrialTask, []int{1} }

func (m *TrialTaskInfoAck) GetTrialTaskInfos() map[int32]*TrialTaskInfo {
	if m != nil {
		return m.TrialTaskInfos
	}
	return nil
}

func (m *TrialTaskInfoAck) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *TrialTaskInfoAck) GetHaveGetStageId() []int32 {
	if m != nil {
		return m.HaveGetStageId
	}
	return nil
}

type TrialTaskInfo struct {
	NowNum int32 `protobuf:"varint,1,opt,name=nowNum,proto3" json:"nowNum,omitempty"`
	IsGet  int32 `protobuf:"varint,2,opt,name=isGet,proto3" json:"isGet,omitempty"`
}

func (m *TrialTaskInfo) Reset()                    { *m = TrialTaskInfo{} }
func (m *TrialTaskInfo) String() string            { return proto.CompactTextString(m) }
func (*TrialTaskInfo) ProtoMessage()               {}
func (*TrialTaskInfo) Descriptor() ([]byte, []int) { return fileDescriptorTrialTask, []int{2} }

func (m *TrialTaskInfo) GetNowNum() int32 {
	if m != nil {
		return m.NowNum
	}
	return 0
}

func (m *TrialTaskInfo) GetIsGet() int32 {
	if m != nil {
		return m.IsGet
	}
	return 0
}

type TrialTaskGetAwardReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TrialTaskGetAwardReq) Reset()                    { *m = TrialTaskGetAwardReq{} }
func (m *TrialTaskGetAwardReq) String() string            { return proto.CompactTextString(m) }
func (*TrialTaskGetAwardReq) ProtoMessage()               {}
func (*TrialTaskGetAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorTrialTask, []int{3} }

func (m *TrialTaskGetAwardReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TrialTaskGetAwardAck struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsGet int32 `protobuf:"varint,2,opt,name=isGet,proto3" json:"isGet,omitempty"`
}

func (m *TrialTaskGetAwardAck) Reset()                    { *m = TrialTaskGetAwardAck{} }
func (m *TrialTaskGetAwardAck) String() string            { return proto.CompactTextString(m) }
func (*TrialTaskGetAwardAck) ProtoMessage()               {}
func (*TrialTaskGetAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorTrialTask, []int{4} }

func (m *TrialTaskGetAwardAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrialTaskGetAwardAck) GetIsGet() int32 {
	if m != nil {
		return m.IsGet
	}
	return 0
}

type TrialTaskGetStageAwardReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TrialTaskGetStageAwardReq) Reset()         { *m = TrialTaskGetStageAwardReq{} }
func (m *TrialTaskGetStageAwardReq) String() string { return proto.CompactTextString(m) }
func (*TrialTaskGetStageAwardReq) ProtoMessage()    {}
func (*TrialTaskGetStageAwardReq) Descriptor() ([]byte, []int) {
	return fileDescriptorTrialTask, []int{5}
}

func (m *TrialTaskGetStageAwardReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TrialTaskGetStageAwardAck struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsGet int32 `protobuf:"varint,2,opt,name=isGet,proto3" json:"isGet,omitempty"`
}

func (m *TrialTaskGetStageAwardAck) Reset()         { *m = TrialTaskGetStageAwardAck{} }
func (m *TrialTaskGetStageAwardAck) String() string { return proto.CompactTextString(m) }
func (*TrialTaskGetStageAwardAck) ProtoMessage()    {}
func (*TrialTaskGetStageAwardAck) Descriptor() ([]byte, []int) {
	return fileDescriptorTrialTask, []int{6}
}

func (m *TrialTaskGetStageAwardAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrialTaskGetStageAwardAck) GetIsGet() int32 {
	if m != nil {
		return m.IsGet
	}
	return 0
}

type TrialTaskInfoNtf struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *TrialTaskInfoNtf) Reset()                    { *m = TrialTaskInfoNtf{} }
func (m *TrialTaskInfoNtf) String() string            { return proto.CompactTextString(m) }
func (*TrialTaskInfoNtf) ProtoMessage()               {}
func (*TrialTaskInfoNtf) Descriptor() ([]byte, []int) { return fileDescriptorTrialTask, []int{7} }

func (m *TrialTaskInfoNtf) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TrialTaskInfoNtf) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto.RegisterType((*TrialTaskInfoReq)(nil), "pb.TrialTaskInfoReq")
	proto.RegisterType((*TrialTaskInfoAck)(nil), "pb.TrialTaskInfoAck")
	proto.RegisterType((*TrialTaskInfo)(nil), "pb.TrialTaskInfo")
	proto.RegisterType((*TrialTaskGetAwardReq)(nil), "pb.TrialTaskGetAwardReq")
	proto.RegisterType((*TrialTaskGetAwardAck)(nil), "pb.TrialTaskGetAwardAck")
	proto.RegisterType((*TrialTaskGetStageAwardReq)(nil), "pb.TrialTaskGetStageAwardReq")
	proto.RegisterType((*TrialTaskGetStageAwardAck)(nil), "pb.TrialTaskGetStageAwardAck")
	proto.RegisterType((*TrialTaskInfoNtf)(nil), "pb.TrialTaskInfoNtf")
}
func (m *TrialTaskInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TrialTaskInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TrialTaskInfos) > 0 {
		for k, _ := range m.TrialTaskInfos {
			dAtA[i] = 0xa
			i++
			v := m.TrialTaskInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTrialTask(uint64(msgSize))
			}
			mapSize := 1 + sovTrialTask(uint64(k)) + msgSize
			i = encodeVarintTrialTask(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTrialTask(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTrialTask(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.EndTime))
	}
	if len(m.HaveGetStageId) > 0 {
		dAtA3 := make([]byte, len(m.HaveGetStageId)*10)
		var j2 int
		for _, num1 := range m.HaveGetStageId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *TrialTaskInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NowNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.NowNum))
	}
	if m.IsGet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.IsGet))
	}
	return i, nil
}

func (m *TrialTaskGetAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskGetAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *TrialTaskGetAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskGetAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.Id))
	}
	if m.IsGet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.IsGet))
	}
	return i, nil
}

func (m *TrialTaskGetStageAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskGetStageAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *TrialTaskGetStageAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskGetStageAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.Id))
	}
	if m.IsGet != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.IsGet))
	}
	return i, nil
}

func (m *TrialTaskInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrialTaskInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.Id))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTrialTask(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func encodeVarintTrialTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TrialTaskInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TrialTaskInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.TrialTaskInfos) > 0 {
		for k, v := range m.TrialTaskInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTrialTask(uint64(l))
			}
			mapEntrySize := 1 + sovTrialTask(uint64(k)) + l
			n += mapEntrySize + 1 + sovTrialTask(uint64(mapEntrySize))
		}
	}
	if m.EndTime != 0 {
		n += 1 + sovTrialTask(uint64(m.EndTime))
	}
	if len(m.HaveGetStageId) > 0 {
		l = 0
		for _, e := range m.HaveGetStageId {
			l += sovTrialTask(uint64(e))
		}
		n += 1 + sovTrialTask(uint64(l)) + l
	}
	return n
}

func (m *TrialTaskInfo) Size() (n int) {
	var l int
	_ = l
	if m.NowNum != 0 {
		n += 1 + sovTrialTask(uint64(m.NowNum))
	}
	if m.IsGet != 0 {
		n += 1 + sovTrialTask(uint64(m.IsGet))
	}
	return n
}

func (m *TrialTaskGetAwardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrialTask(uint64(m.Id))
	}
	return n
}

func (m *TrialTaskGetAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrialTask(uint64(m.Id))
	}
	if m.IsGet != 0 {
		n += 1 + sovTrialTask(uint64(m.IsGet))
	}
	return n
}

func (m *TrialTaskGetStageAwardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrialTask(uint64(m.Id))
	}
	return n
}

func (m *TrialTaskGetStageAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrialTask(uint64(m.Id))
	}
	if m.IsGet != 0 {
		n += 1 + sovTrialTask(uint64(m.IsGet))
	}
	return n
}

func (m *TrialTaskInfoNtf) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTrialTask(uint64(m.Id))
	}
	if m.Num != 0 {
		n += 1 + sovTrialTask(uint64(m.Num))
	}
	return n
}

func sovTrialTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrialTask(x uint64) (n int) {
	return sovTrialTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrialTaskInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialTaskInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrialTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialTaskInfos == nil {
				m.TrialTaskInfos = make(map[int32]*TrialTaskInfo)
			}
			var mapkey int32
			var mapvalue *TrialTaskInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrialTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrialTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrialTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTrialTask
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTrialTask
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TrialTaskInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTrialTask(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTrialTask
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TrialTaskInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrialTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HaveGetStageId = append(m.HaveGetStageId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrialTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTrialTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrialTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HaveGetStageId = append(m.HaveGetStageId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGetStageId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowNum", wireType)
			}
			m.NowNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGet", wireType)
			}
			m.IsGet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskGetAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskGetAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskGetAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskGetAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskGetAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskGetAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGet", wireType)
			}
			m.IsGet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskGetStageAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskGetStageAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskGetStageAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskGetStageAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskGetStageAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskGetStageAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGet", wireType)
			}
			m.IsGet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGet |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrialTaskInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrialTaskInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrialTaskInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTrialTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrialTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrialTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrialTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrialTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTrialTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrialTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrialTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrialTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrialTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("trialTask.proto", fileDescriptorTrialTask) }

var fileDescriptorTrialTask = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x29, 0xca, 0x4c,
	0xcc, 0x09, 0x49, 0x2c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52,
	0x12, 0xe2, 0x12, 0x08, 0x81, 0x09, 0x7b, 0xe6, 0xa5, 0xe5, 0x07, 0xa5, 0x16, 0x2a, 0xfd, 0x61,
	0x44, 0x13, 0x74, 0x4c, 0xce, 0x16, 0x0a, 0xe0, 0xe2, 0x2b, 0x41, 0x16, 0x2b, 0x96, 0x60, 0x54,
	0x60, 0xd6, 0xe0, 0x36, 0xd2, 0xd0, 0x2b, 0x48, 0xd2, 0x43, 0x57, 0x8d, 0x2a, 0x50, 0xec, 0x9a,
	0x57, 0x52, 0x54, 0x19, 0x84, 0xa6, 0x5f, 0x48, 0x82, 0x8b, 0x3d, 0x35, 0x2f, 0x25, 0x24, 0x33,
	0x37, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x08, 0xc6, 0x15, 0x52, 0xe3, 0xe2, 0xcb, 0x48,
	0x2c, 0x4b, 0x75, 0x4f, 0x2d, 0x09, 0x2e, 0x49, 0x4c, 0x4f, 0xf5, 0x4c, 0x91, 0x60, 0x56, 0x60,
	0xd6, 0x60, 0x0d, 0x42, 0x13, 0x95, 0x0a, 0xe1, 0x12, 0xc6, 0x62, 0x91, 0x90, 0x00, 0x17, 0x73,
	0x76, 0x6a, 0xa5, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x88, 0x29, 0xa4, 0xce, 0xc5, 0x5a,
	0x96, 0x98, 0x53, 0x0a, 0xb1, 0x88, 0xdb, 0x48, 0x10, 0xc3, 0xcd, 0x41, 0x10, 0x79, 0x2b, 0x26,
	0x0b, 0x46, 0x25, 0x5b, 0x2e, 0x5e, 0x14, 0x39, 0x21, 0x31, 0x2e, 0xb6, 0xbc, 0xfc, 0x72, 0xbf,
	0xd2, 0x5c, 0xa8, 0x91, 0x50, 0x9e, 0x90, 0x08, 0x17, 0x6b, 0x66, 0xb1, 0x7b, 0x6a, 0x09, 0xd8,
	0x54, 0xd6, 0x20, 0x08, 0x47, 0x49, 0x8d, 0x4b, 0x04, 0xae, 0xdd, 0x3d, 0xb5, 0xc4, 0xb1, 0x3c,
	0xb1, 0x28, 0x25, 0x28, 0xb5, 0x50, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x05, 0x6a, 0x02, 0x53, 0x66,
	0x8a, 0x92, 0x0d, 0x16, 0x75, 0xa0, 0x80, 0x46, 0x53, 0x87, 0xc3, 0x16, 0x6d, 0x2e, 0x49, 0x64,
	0xdd, 0xe0, 0x10, 0xc1, 0x69, 0x95, 0x23, 0x2e, 0xc5, 0xc4, 0xdb, 0x67, 0x82, 0x96, 0x24, 0xfc,
	0x4a, 0xd2, 0x30, 0x74, 0x0a, 0x70, 0x31, 0xe7, 0x95, 0xe6, 0x42, 0xf5, 0x81, 0x98, 0x4e, 0x02,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72,
	0x0c, 0x49, 0x6c, 0xe0, 0xa4, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x18, 0x9e, 0x28, 0x5c,
	0x8d, 0x02, 0x00, 0x00,
}
