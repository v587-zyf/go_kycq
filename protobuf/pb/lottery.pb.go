// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LotteryInfoReq struct {
}

func (m *LotteryInfoReq) Reset()                    { *m = LotteryInfoReq{} }
func (m *LotteryInfoReq) String() string            { return proto.CompactTextString(m) }
func (*LotteryInfoReq) ProtoMessage()               {}
func (*LotteryInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{0} }

type LotteryInfoAck struct {
	MyLotteryInfos  []*LotteryInfo `protobuf:"bytes,1,rep,name=myLotteryInfos" json:"myLotteryInfos,omitempty"`
	AllLotteryInfos []*LotteryInfo `protobuf:"bytes,2,rep,name=allLotteryInfos" json:"allLotteryInfos,omitempty"`
	WinLotteryInfos []*LotteryInfo `protobuf:"bytes,3,rep,name=winLotteryInfos" json:"winLotteryInfos,omitempty"`
	PopUpState      int32          `protobuf:"varint,4,opt,name=PopUpState,proto3" json:"PopUpState,omitempty"`
	GoodLuckState   int32          `protobuf:"varint,5,opt,name=goodLuckState,proto3" json:"goodLuckState,omitempty"`
	WinUserInfo     *BriefUserInfo `protobuf:"bytes,6,opt,name=winUserInfo" json:"winUserInfo,omitempty"`
	IsGetAward      bool           `protobuf:"varint,7,opt,name=isGetAward,proto3" json:"isGetAward,omitempty"`
}

func (m *LotteryInfoAck) Reset()                    { *m = LotteryInfoAck{} }
func (m *LotteryInfoAck) String() string            { return proto.CompactTextString(m) }
func (*LotteryInfoAck) ProtoMessage()               {}
func (*LotteryInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{1} }

func (m *LotteryInfoAck) GetMyLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.MyLotteryInfos
	}
	return nil
}

func (m *LotteryInfoAck) GetAllLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.AllLotteryInfos
	}
	return nil
}

func (m *LotteryInfoAck) GetWinLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.WinLotteryInfos
	}
	return nil
}

func (m *LotteryInfoAck) GetPopUpState() int32 {
	if m != nil {
		return m.PopUpState
	}
	return 0
}

func (m *LotteryInfoAck) GetGoodLuckState() int32 {
	if m != nil {
		return m.GoodLuckState
	}
	return 0
}

func (m *LotteryInfoAck) GetWinUserInfo() *BriefUserInfo {
	if m != nil {
		return m.WinUserInfo
	}
	return nil
}

func (m *LotteryInfoAck) GetIsGetAward() bool {
	if m != nil {
		return m.IsGetAward
	}
	return false
}

// 接好运
type GetGoodLuckReq struct {
}

func (m *GetGoodLuckReq) Reset()                    { *m = GetGoodLuckReq{} }
func (m *GetGoodLuckReq) String() string            { return proto.CompactTextString(m) }
func (*GetGoodLuckReq) ProtoMessage()               {}
func (*GetGoodLuckReq) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{2} }

type GetGoodLuckAck struct {
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *GetGoodLuckAck) Reset()                    { *m = GetGoodLuckAck{} }
func (m *GetGoodLuckAck) String() string            { return proto.CompactTextString(m) }
func (*GetGoodLuckAck) ProtoMessage()               {}
func (*GetGoodLuckAck) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{3} }

func (m *GetGoodLuckAck) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 结算弹窗状态
type SetLotteryPopUpStateReq struct {
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *SetLotteryPopUpStateReq) Reset()                    { *m = SetLotteryPopUpStateReq{} }
func (m *SetLotteryPopUpStateReq) String() string            { return proto.CompactTextString(m) }
func (*SetLotteryPopUpStateReq) ProtoMessage()               {}
func (*SetLotteryPopUpStateReq) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{4} }

func (m *SetLotteryPopUpStateReq) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type SetLotteryPopUpStateAck struct {
	State int32 `protobuf:"varint,1,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *SetLotteryPopUpStateAck) Reset()                    { *m = SetLotteryPopUpStateAck{} }
func (m *SetLotteryPopUpStateAck) String() string            { return proto.CompactTextString(m) }
func (*SetLotteryPopUpStateAck) ProtoMessage()               {}
func (*SetLotteryPopUpStateAck) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{5} }

func (m *SetLotteryPopUpStateAck) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 摇彩购买份数
type LotteryBuyNumsReq struct {
	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *LotteryBuyNumsReq) Reset()                    { *m = LotteryBuyNumsReq{} }
func (m *LotteryBuyNumsReq) String() string            { return proto.CompactTextString(m) }
func (*LotteryBuyNumsReq) ProtoMessage()               {}
func (*LotteryBuyNumsReq) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{6} }

func (m *LotteryBuyNumsReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type LotteryBuyNumsAck struct {
	LotteryInfos []*LotteryInfo `protobuf:"bytes,1,rep,name=LotteryInfos" json:"LotteryInfos,omitempty"`
}

func (m *LotteryBuyNumsAck) Reset()                    { *m = LotteryBuyNumsAck{} }
func (m *LotteryBuyNumsAck) String() string            { return proto.CompactTextString(m) }
func (*LotteryBuyNumsAck) ProtoMessage()               {}
func (*LotteryBuyNumsAck) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{7} }

func (m *LotteryBuyNumsAck) GetLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.LotteryInfos
	}
	return nil
}

type BrocastBuyNumsNtf struct {
	LotteryInfos []*LotteryInfo `protobuf:"bytes,1,rep,name=LotteryInfos" json:"LotteryInfos,omitempty"`
}

func (m *BrocastBuyNumsNtf) Reset()                    { *m = BrocastBuyNumsNtf{} }
func (m *BrocastBuyNumsNtf) String() string            { return proto.CompactTextString(m) }
func (*BrocastBuyNumsNtf) ProtoMessage()               {}
func (*BrocastBuyNumsNtf) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{8} }

func (m *BrocastBuyNumsNtf) GetLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.LotteryInfos
	}
	return nil
}

type LotteryInfo struct {
	UserId      int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	AwardNumber int32  `protobuf:"varint,3,opt,name=awardNumber,proto3" json:"awardNumber,omitempty"`
	ShareNum    int32  `protobuf:"varint,4,opt,name=shareNum,proto3" json:"shareNum,omitempty"`
	Combat      int64  `protobuf:"varint,5,opt,name=combat,proto3" json:"combat,omitempty"`
}

func (m *LotteryInfo) Reset()                    { *m = LotteryInfo{} }
func (m *LotteryInfo) String() string            { return proto.CompactTextString(m) }
func (*LotteryInfo) ProtoMessage()               {}
func (*LotteryInfo) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{9} }

func (m *LotteryInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *LotteryInfo) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *LotteryInfo) GetAwardNumber() int32 {
	if m != nil {
		return m.AwardNumber
	}
	return 0
}

func (m *LotteryInfo) GetShareNum() int32 {
	if m != nil {
		return m.ShareNum
	}
	return 0
}

func (m *LotteryInfo) GetCombat() int64 {
	if m != nil {
		return m.Combat
	}
	return 0
}

type LotteryEnd struct {
	WinLotteryInfos []*LotteryInfo `protobuf:"bytes,1,rep,name=winLotteryInfos" json:"winLotteryInfos,omitempty"`
	WinUserInfo     *BriefUserInfo `protobuf:"bytes,2,opt,name=winUserInfo" json:"winUserInfo,omitempty"`
}

func (m *LotteryEnd) Reset()                    { *m = LotteryEnd{} }
func (m *LotteryEnd) String() string            { return proto.CompactTextString(m) }
func (*LotteryEnd) ProtoMessage()               {}
func (*LotteryEnd) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{10} }

func (m *LotteryEnd) GetWinLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.WinLotteryInfos
	}
	return nil
}

func (m *LotteryEnd) GetWinUserInfo() *BriefUserInfo {
	if m != nil {
		return m.WinUserInfo
	}
	return nil
}

type LotteryInfo1Req struct {
}

func (m *LotteryInfo1Req) Reset()                    { *m = LotteryInfo1Req{} }
func (m *LotteryInfo1Req) String() string            { return proto.CompactTextString(m) }
func (*LotteryInfo1Req) ProtoMessage()               {}
func (*LotteryInfo1Req) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{11} }

type LotteryInfo1Ack struct {
	IsWin           int32          `protobuf:"varint,1,opt,name=isWin,proto3" json:"isWin,omitempty"`
	Items           []*ItemUnit    `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	WinLotteryInfos []*LotteryInfo `protobuf:"bytes,3,rep,name=winLotteryInfos" json:"winLotteryInfos,omitempty"`
}

func (m *LotteryInfo1Ack) Reset()                    { *m = LotteryInfo1Ack{} }
func (m *LotteryInfo1Ack) String() string            { return proto.CompactTextString(m) }
func (*LotteryInfo1Ack) ProtoMessage()               {}
func (*LotteryInfo1Ack) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{12} }

func (m *LotteryInfo1Ack) GetIsWin() int32 {
	if m != nil {
		return m.IsWin
	}
	return 0
}

func (m *LotteryInfo1Ack) GetItems() []*ItemUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *LotteryInfo1Ack) GetWinLotteryInfos() []*LotteryInfo {
	if m != nil {
		return m.WinLotteryInfos
	}
	return nil
}

type LotteryGetEndAwardReq struct {
}

func (m *LotteryGetEndAwardReq) Reset()                    { *m = LotteryGetEndAwardReq{} }
func (m *LotteryGetEndAwardReq) String() string            { return proto.CompactTextString(m) }
func (*LotteryGetEndAwardReq) ProtoMessage()               {}
func (*LotteryGetEndAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{13} }

type LotteryGetEndAwardAck struct {
	GetState int32       `protobuf:"varint,1,opt,name=getState,proto3" json:"getState,omitempty"`
	Items    []*ItemUnit `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
}

func (m *LotteryGetEndAwardAck) Reset()                    { *m = LotteryGetEndAwardAck{} }
func (m *LotteryGetEndAwardAck) String() string            { return proto.CompactTextString(m) }
func (*LotteryGetEndAwardAck) ProtoMessage()               {}
func (*LotteryGetEndAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorLottery, []int{14} }

func (m *LotteryGetEndAwardAck) GetGetState() int32 {
	if m != nil {
		return m.GetState
	}
	return 0
}

func (m *LotteryGetEndAwardAck) GetItems() []*ItemUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*LotteryInfoReq)(nil), "pb.LotteryInfoReq")
	proto.RegisterType((*LotteryInfoAck)(nil), "pb.LotteryInfoAck")
	proto.RegisterType((*GetGoodLuckReq)(nil), "pb.GetGoodLuckReq")
	proto.RegisterType((*GetGoodLuckAck)(nil), "pb.GetGoodLuckAck")
	proto.RegisterType((*SetLotteryPopUpStateReq)(nil), "pb.SetLotteryPopUpStateReq")
	proto.RegisterType((*SetLotteryPopUpStateAck)(nil), "pb.SetLotteryPopUpStateAck")
	proto.RegisterType((*LotteryBuyNumsReq)(nil), "pb.LotteryBuyNumsReq")
	proto.RegisterType((*LotteryBuyNumsAck)(nil), "pb.LotteryBuyNumsAck")
	proto.RegisterType((*BrocastBuyNumsNtf)(nil), "pb.BrocastBuyNumsNtf")
	proto.RegisterType((*LotteryInfo)(nil), "pb.LotteryInfo")
	proto.RegisterType((*LotteryEnd)(nil), "pb.LotteryEnd")
	proto.RegisterType((*LotteryInfo1Req)(nil), "pb.LotteryInfo1Req")
	proto.RegisterType((*LotteryInfo1Ack)(nil), "pb.LotteryInfo1Ack")
	proto.RegisterType((*LotteryGetEndAwardReq)(nil), "pb.LotteryGetEndAwardReq")
	proto.RegisterType((*LotteryGetEndAwardAck)(nil), "pb.LotteryGetEndAwardAck")
}
func (m *LotteryInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LotteryInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MyLotteryInfos) > 0 {
		for _, msg := range m.MyLotteryInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AllLotteryInfos) > 0 {
		for _, msg := range m.AllLotteryInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.WinLotteryInfos) > 0 {
		for _, msg := range m.WinLotteryInfos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.PopUpState != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.PopUpState))
	}
	if m.GoodLuckState != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.GoodLuckState))
	}
	if m.WinUserInfo != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.WinUserInfo.Size()))
		n1, err := m.WinUserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsGetAward {
		dAtA[i] = 0x38
		i++
		if m.IsGetAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GetGoodLuckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGoodLuckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetGoodLuckAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGoodLuckAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *SetLotteryPopUpStateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLotteryPopUpStateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *SetLotteryPopUpStateAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLotteryPopUpStateAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *LotteryBuyNumsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryBuyNumsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *LotteryBuyNumsAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryBuyNumsAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LotteryInfos) > 0 {
		for _, msg := range m.LotteryInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BrocastBuyNumsNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BrocastBuyNumsNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LotteryInfos) > 0 {
		for _, msg := range m.LotteryInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LotteryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.UserId))
	}
	if len(m.UserName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLottery(dAtA, i, uint64(len(m.UserName)))
		i += copy(dAtA[i:], m.UserName)
	}
	if m.AwardNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.AwardNumber))
	}
	if m.ShareNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.ShareNum))
	}
	if m.Combat != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.Combat))
	}
	return i, nil
}

func (m *LotteryEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WinLotteryInfos) > 0 {
		for _, msg := range m.WinLotteryInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.WinUserInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.WinUserInfo.Size()))
		n2, err := m.WinUserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LotteryInfo1Req) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryInfo1Req) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LotteryInfo1Ack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryInfo1Ack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsWin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.IsWin))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.WinLotteryInfos) > 0 {
		for _, msg := range m.WinLotteryInfos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LotteryGetEndAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryGetEndAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LotteryGetEndAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LotteryGetEndAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GetState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLottery(dAtA, i, uint64(m.GetState))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLottery(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintLottery(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LotteryInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LotteryInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.MyLotteryInfos) > 0 {
		for _, e := range m.MyLotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	if len(m.AllLotteryInfos) > 0 {
		for _, e := range m.AllLotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	if len(m.WinLotteryInfos) > 0 {
		for _, e := range m.WinLotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	if m.PopUpState != 0 {
		n += 1 + sovLottery(uint64(m.PopUpState))
	}
	if m.GoodLuckState != 0 {
		n += 1 + sovLottery(uint64(m.GoodLuckState))
	}
	if m.WinUserInfo != nil {
		l = m.WinUserInfo.Size()
		n += 1 + l + sovLottery(uint64(l))
	}
	if m.IsGetAward {
		n += 2
	}
	return n
}

func (m *GetGoodLuckReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetGoodLuckAck) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovLottery(uint64(m.State))
	}
	return n
}

func (m *SetLotteryPopUpStateReq) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovLottery(uint64(m.State))
	}
	return n
}

func (m *SetLotteryPopUpStateAck) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovLottery(uint64(m.State))
	}
	return n
}

func (m *LotteryBuyNumsReq) Size() (n int) {
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovLottery(uint64(m.Num))
	}
	return n
}

func (m *LotteryBuyNumsAck) Size() (n int) {
	var l int
	_ = l
	if len(m.LotteryInfos) > 0 {
		for _, e := range m.LotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	return n
}

func (m *BrocastBuyNumsNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.LotteryInfos) > 0 {
		for _, e := range m.LotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	return n
}

func (m *LotteryInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovLottery(uint64(m.UserId))
	}
	l = len(m.UserName)
	if l > 0 {
		n += 1 + l + sovLottery(uint64(l))
	}
	if m.AwardNumber != 0 {
		n += 1 + sovLottery(uint64(m.AwardNumber))
	}
	if m.ShareNum != 0 {
		n += 1 + sovLottery(uint64(m.ShareNum))
	}
	if m.Combat != 0 {
		n += 1 + sovLottery(uint64(m.Combat))
	}
	return n
}

func (m *LotteryEnd) Size() (n int) {
	var l int
	_ = l
	if len(m.WinLotteryInfos) > 0 {
		for _, e := range m.WinLotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	if m.WinUserInfo != nil {
		l = m.WinUserInfo.Size()
		n += 1 + l + sovLottery(uint64(l))
	}
	return n
}

func (m *LotteryInfo1Req) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LotteryInfo1Ack) Size() (n int) {
	var l int
	_ = l
	if m.IsWin != 0 {
		n += 1 + sovLottery(uint64(m.IsWin))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	if len(m.WinLotteryInfos) > 0 {
		for _, e := range m.WinLotteryInfos {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	return n
}

func (m *LotteryGetEndAwardReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LotteryGetEndAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.GetState != 0 {
		n += 1 + sovLottery(uint64(m.GetState))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovLottery(uint64(l))
		}
	}
	return n
}

func sovLottery(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLottery(x uint64) (n int) {
	return sovLottery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LotteryInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyLotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyLotteryInfos = append(m.MyLotteryInfos, &LotteryInfo{})
			if err := m.MyLotteryInfos[len(m.MyLotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllLotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllLotteryInfos = append(m.AllLotteryInfos, &LotteryInfo{})
			if err := m.AllLotteryInfos[len(m.AllLotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinLotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinLotteryInfos = append(m.WinLotteryInfos, &LotteryInfo{})
			if err := m.WinLotteryInfos[len(m.WinLotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopUpState", wireType)
			}
			m.PopUpState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopUpState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodLuckState", wireType)
			}
			m.GoodLuckState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodLuckState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WinUserInfo == nil {
				m.WinUserInfo = &BriefUserInfo{}
			}
			if err := m.WinUserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGetAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGetAward = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGoodLuckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGoodLuckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGoodLuckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGoodLuckAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGoodLuckAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGoodLuckAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLotteryPopUpStateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLotteryPopUpStateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLotteryPopUpStateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLotteryPopUpStateAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLotteryPopUpStateAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLotteryPopUpStateAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryBuyNumsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryBuyNumsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryBuyNumsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryBuyNumsAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryBuyNumsAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryBuyNumsAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryInfos = append(m.LotteryInfos, &LotteryInfo{})
			if err := m.LotteryInfos[len(m.LotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BrocastBuyNumsNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BrocastBuyNumsNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BrocastBuyNumsNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LotteryInfos = append(m.LotteryInfos, &LotteryInfo{})
			if err := m.LotteryInfos[len(m.LotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardNumber", wireType)
			}
			m.AwardNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwardNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareNum", wireType)
			}
			m.ShareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinLotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinLotteryInfos = append(m.WinLotteryInfos, &LotteryInfo{})
			if err := m.WinLotteryInfos[len(m.WinLotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WinUserInfo == nil {
				m.WinUserInfo = &BriefUserInfo{}
			}
			if err := m.WinUserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryInfo1Req) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryInfo1Req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryInfo1Req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryInfo1Ack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryInfo1Ack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryInfo1Ack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			m.IsWin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsWin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemUnit{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinLotteryInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinLotteryInfos = append(m.WinLotteryInfos, &LotteryInfo{})
			if err := m.WinLotteryInfos[len(m.WinLotteryInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryGetEndAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryGetEndAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryGetEndAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LotteryGetEndAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LotteryGetEndAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LotteryGetEndAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetState", wireType)
			}
			m.GetState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemUnit{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLottery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLottery
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLottery
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLottery(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLottery = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLottery   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("lottery.proto", fileDescriptorLottery) }

var fileDescriptorLottery = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0x76, 0x5a, 0x5b, 0xeb, 0x6b, 0x77, 0xdb, 0x0e, 0xea, 0x86, 0x1e, 0x42, 0x08, 0x2a, 0x39,
	0x55, 0xdc, 0x1e, 0xc4, 0xe3, 0x16, 0x96, 0x2a, 0x2c, 0x41, 0x52, 0xca, 0x9e, 0xf3, 0x63, 0xba,
	0x86, 0xed, 0x64, 0xb2, 0xc9, 0x84, 0x52, 0xf0, 0xec, 0xbf, 0xa0, 0x7f, 0x92, 0x47, 0xcf, 0x9e,
	0xa4, 0xfe, 0x23, 0xf2, 0x92, 0x69, 0x4d, 0x42, 0x17, 0xaa, 0xde, 0xf2, 0x7d, 0xf3, 0x7d, 0xef,
	0xbd, 0x99, 0xf9, 0x26, 0x70, 0xb2, 0x12, 0x52, 0xb2, 0x64, 0x33, 0x8e, 0x13, 0x21, 0x05, 0x6d,
	0xc4, 0xde, 0xa8, 0xe7, 0x0b, 0xce, 0x45, 0x54, 0x30, 0xe6, 0x00, 0x4e, 0xaf, 0x0a, 0xc9, 0xfb,
	0x68, 0x29, 0x1c, 0x76, 0x67, 0xfe, 0x68, 0x54, 0xa8, 0x0b, 0xff, 0x96, 0xbe, 0x81, 0x53, 0xbe,
	0x29, 0x71, 0xa9, 0x46, 0x8c, 0xa6, 0xd5, 0x3d, 0xef, 0x8f, 0x63, 0x6f, 0x5c, 0xb6, 0xd7, 0x64,
	0xf4, 0x2d, 0xf4, 0xdd, 0xd5, 0xaa, 0xe2, 0x6c, 0x1c, 0x76, 0xd6, 0x75, 0x68, 0x5d, 0x87, 0x51,
	0xc5, 0xda, 0xbc, 0xc7, 0x5a, 0xd3, 0x51, 0x1d, 0xe0, 0x83, 0x88, 0x17, 0xf1, 0x5c, 0xba, 0x92,
	0x69, 0x0f, 0x0d, 0x62, 0xb5, 0x9c, 0x12, 0x43, 0x9f, 0xc3, 0xc9, 0x8d, 0x10, 0xc1, 0x55, 0xe6,
	0xdf, 0x16, 0x92, 0x56, 0x2e, 0xa9, 0x92, 0x74, 0x02, 0xdd, 0x75, 0x18, 0x2d, 0x52, 0x96, 0x60,
	0x55, 0xad, 0x6d, 0x10, 0xab, 0x7b, 0x3e, 0xc4, 0xe6, 0xd3, 0x24, 0x64, 0xcb, 0xdd, 0x82, 0x53,
	0x56, 0x61, 0xeb, 0x30, 0x9d, 0x31, 0x79, 0xb1, 0x76, 0x93, 0x40, 0x7b, 0x64, 0x10, 0xab, 0xe3,
	0x94, 0x18, 0x3c, 0xee, 0x19, 0x93, 0x33, 0xd5, 0x08, 0x8f, 0xfb, 0x65, 0x85, 0xc1, 0xd3, 0x7e,
	0x02, 0xad, 0x34, 0x1f, 0x8b, 0xe4, 0x63, 0x15, 0xc0, 0x7c, 0x05, 0x67, 0x73, 0x26, 0xd5, 0x3e,
	0xff, 0x6c, 0xc6, 0x61, 0x77, 0x7f, 0x67, 0xb8, 0xbf, 0xc3, 0x0b, 0x18, 0x2a, 0xf5, 0x34, 0xdb,
	0xd8, 0x19, 0x4f, 0xb1, 0xf6, 0x00, 0x9a, 0x51, 0xc6, 0x95, 0x10, 0x3f, 0xcd, 0x77, 0x75, 0x19,
	0x56, 0x9c, 0x40, 0xef, 0x98, 0x7c, 0x54, 0x44, 0x58, 0x69, 0x9a, 0x08, 0xdf, 0x4d, 0xa5, 0xaa,
	0x64, 0xcb, 0xe5, 0xbf, 0x55, 0xfa, 0x42, 0xa0, 0x5b, 0x22, 0xe8, 0x33, 0x68, 0x67, 0x78, 0x25,
	0x81, 0x1a, 0x5c, 0x21, 0x3a, 0x82, 0x0e, 0x7e, 0xd9, 0x2e, 0x67, 0x5a, 0xc3, 0x20, 0xd6, 0x63,
	0x67, 0x8f, 0xa9, 0x01, 0x5d, 0x17, 0xef, 0xc8, 0xce, 0xb8, 0xc7, 0x12, 0xad, 0x99, 0x1b, 0xcb,
	0x14, 0xba, 0xd3, 0x8f, 0x6e, 0xc2, 0xec, 0x8c, 0xab, 0x54, 0xed, 0x31, 0x76, 0xf4, 0x05, 0xf7,
	0x5c, 0x99, 0x87, 0xa9, 0xe9, 0x28, 0x64, 0x7e, 0x02, 0x50, 0x83, 0x5d, 0x46, 0xc1, 0xa1, 0x50,
	0x93, 0x23, 0x43, 0x5d, 0x8b, 0x63, 0xe3, 0x98, 0x38, 0x9a, 0x43, 0xe8, 0x97, 0x8a, 0xbc, 0xc6,
	0xbc, 0x7d, 0x26, 0x55, 0x4e, 0xe5, 0x21, 0x4c, 0xaf, 0xc3, 0x68, 0x97, 0x87, 0x1c, 0x50, 0x13,
	0x5a, 0xa1, 0x64, 0x7c, 0xf7, 0x64, 0x7b, 0xd8, 0x0b, 0x89, 0x45, 0x14, 0x4a, 0xa7, 0x58, 0xfa,
	0x8f, 0x57, 0x6a, 0x9e, 0xc1, 0x53, 0x85, 0x67, 0x4c, 0x5e, 0x46, 0x41, 0xfe, 0x40, 0x70, 0xc2,
	0xeb, 0x43, 0x0b, 0x38, 0xe6, 0x08, 0x3a, 0x37, 0x4c, 0xce, 0x4b, 0xc9, 0xdd, 0xe3, 0x63, 0x86,
	0x9d, 0x0e, 0xbe, 0x6d, 0x75, 0xf2, 0x7d, 0xab, 0x93, 0x9f, 0x5b, 0x9d, 0x7c, 0xfd, 0xa5, 0x3f,
	0xf0, 0xda, 0xf9, 0x4f, 0x70, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x11, 0xfe, 0x12, 0xcf, 0x27,
	0x05, 0x00, 0x00,
}
