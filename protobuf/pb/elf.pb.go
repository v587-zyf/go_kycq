// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elf.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 精灵喂养
type ElfFeedReq struct {
	Positions []int32 `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
}

func (m *ElfFeedReq) Reset()                    { *m = ElfFeedReq{} }
func (m *ElfFeedReq) String() string            { return proto.CompactTextString(m) }
func (*ElfFeedReq) ProtoMessage()               {}
func (*ElfFeedReq) Descriptor() ([]byte, []int) { return fileDescriptorElf, []int{0} }

func (m *ElfFeedReq) GetPositions() []int32 {
	if m != nil {
		return m.Positions
	}
	return nil
}

type ElfFeedAck struct {
	Lv           int32           `protobuf:"varint,1,opt,name=lv,proto3" json:"lv,omitempty"`
	Exp          int32           `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	Goods        *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
	ReceiveLimit map[int32]int32 `protobuf:"bytes,4,rep,name=receiveLimit" json:"receiveLimit,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ElfFeedAck) Reset()                    { *m = ElfFeedAck{} }
func (m *ElfFeedAck) String() string            { return proto.CompactTextString(m) }
func (*ElfFeedAck) ProtoMessage()               {}
func (*ElfFeedAck) Descriptor() ([]byte, []int) { return fileDescriptorElf, []int{1} }

func (m *ElfFeedAck) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *ElfFeedAck) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *ElfFeedAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *ElfFeedAck) GetReceiveLimit() map[int32]int32 {
	if m != nil {
		return m.ReceiveLimit
	}
	return nil
}

// 精灵学习、升级技能
type ElfSkillUpLvReq struct {
	SkillId int32 `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId,omitempty"`
}

func (m *ElfSkillUpLvReq) Reset()                    { *m = ElfSkillUpLvReq{} }
func (m *ElfSkillUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*ElfSkillUpLvReq) ProtoMessage()               {}
func (*ElfSkillUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorElf, []int{2} }

func (m *ElfSkillUpLvReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

type ElfSkillUpLvAck struct {
	SkillId  int32           `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId,omitempty"`
	SkillLv  int32           `protobuf:"varint,2,opt,name=skillLv,proto3" json:"skillLv,omitempty"`
	SkillBag map[int32]int32 `protobuf:"bytes,3,rep,name=skillBag" json:"skillBag,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ElfSkillUpLvAck) Reset()                    { *m = ElfSkillUpLvAck{} }
func (m *ElfSkillUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*ElfSkillUpLvAck) ProtoMessage()               {}
func (*ElfSkillUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorElf, []int{3} }

func (m *ElfSkillUpLvAck) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *ElfSkillUpLvAck) GetSkillLv() int32 {
	if m != nil {
		return m.SkillLv
	}
	return 0
}

func (m *ElfSkillUpLvAck) GetSkillBag() map[int32]int32 {
	if m != nil {
		return m.SkillBag
	}
	return nil
}

// 精灵更换技能位置
type ElfSkillChangePosReq struct {
	SkillId int32 `protobuf:"varint,1,opt,name=skillId,proto3" json:"skillId,omitempty"`
	Pos     int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (m *ElfSkillChangePosReq) Reset()                    { *m = ElfSkillChangePosReq{} }
func (m *ElfSkillChangePosReq) String() string            { return proto.CompactTextString(m) }
func (*ElfSkillChangePosReq) ProtoMessage()               {}
func (*ElfSkillChangePosReq) Descriptor() ([]byte, []int) { return fileDescriptorElf, []int{4} }

func (m *ElfSkillChangePosReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *ElfSkillChangePosReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

type ElfSkillChangePosAck struct {
	SkillBag map[int32]int32 `protobuf:"bytes,1,rep,name=skillBag" json:"skillBag,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ElfSkillChangePosAck) Reset()                    { *m = ElfSkillChangePosAck{} }
func (m *ElfSkillChangePosAck) String() string            { return proto.CompactTextString(m) }
func (*ElfSkillChangePosAck) ProtoMessage()               {}
func (*ElfSkillChangePosAck) Descriptor() ([]byte, []int) { return fileDescriptorElf, []int{5} }

func (m *ElfSkillChangePosAck) GetSkillBag() map[int32]int32 {
	if m != nil {
		return m.SkillBag
	}
	return nil
}

func init() {
	proto.RegisterType((*ElfFeedReq)(nil), "pb.ElfFeedReq")
	proto.RegisterType((*ElfFeedAck)(nil), "pb.ElfFeedAck")
	proto.RegisterType((*ElfSkillUpLvReq)(nil), "pb.ElfSkillUpLvReq")
	proto.RegisterType((*ElfSkillUpLvAck)(nil), "pb.ElfSkillUpLvAck")
	proto.RegisterType((*ElfSkillChangePosReq)(nil), "pb.ElfSkillChangePosReq")
	proto.RegisterType((*ElfSkillChangePosAck)(nil), "pb.ElfSkillChangePosAck")
}
func (m *ElfFeedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElfFeedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		dAtA2 := make([]byte, len(m.Positions)*10)
		var j1 int
		for _, num1 := range m.Positions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintElf(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *ElfFeedAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElfFeedAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Lv != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.Exp))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ReceiveLimit) > 0 {
		for k, _ := range m.ReceiveLimit {
			dAtA[i] = 0x22
			i++
			v := m.ReceiveLimit[k]
			mapSize := 1 + sovElf(uint64(k)) + 1 + sovElf(uint64(v))
			i = encodeVarintElf(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintElf(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintElf(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *ElfSkillUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElfSkillUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.SkillId))
	}
	return i, nil
}

func (m *ElfSkillUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElfSkillUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.SkillId))
	}
	if m.SkillLv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.SkillLv))
	}
	if len(m.SkillBag) > 0 {
		for k, _ := range m.SkillBag {
			dAtA[i] = 0x1a
			i++
			v := m.SkillBag[k]
			mapSize := 1 + sovElf(uint64(k)) + 1 + sovElf(uint64(v))
			i = encodeVarintElf(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintElf(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintElf(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *ElfSkillChangePosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElfSkillChangePosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.SkillId))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintElf(dAtA, i, uint64(m.Pos))
	}
	return i, nil
}

func (m *ElfSkillChangePosAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElfSkillChangePosAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SkillBag) > 0 {
		for k, _ := range m.SkillBag {
			dAtA[i] = 0xa
			i++
			v := m.SkillBag[k]
			mapSize := 1 + sovElf(uint64(k)) + 1 + sovElf(uint64(v))
			i = encodeVarintElf(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintElf(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintElf(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeVarintElf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ElfFeedReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Positions) > 0 {
		l = 0
		for _, e := range m.Positions {
			l += sovElf(uint64(e))
		}
		n += 1 + sovElf(uint64(l)) + l
	}
	return n
}

func (m *ElfFeedAck) Size() (n int) {
	var l int
	_ = l
	if m.Lv != 0 {
		n += 1 + sovElf(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovElf(uint64(m.Exp))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovElf(uint64(l))
	}
	if len(m.ReceiveLimit) > 0 {
		for k, v := range m.ReceiveLimit {
			_ = k
			_ = v
			mapEntrySize := 1 + sovElf(uint64(k)) + 1 + sovElf(uint64(v))
			n += mapEntrySize + 1 + sovElf(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ElfSkillUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.SkillId != 0 {
		n += 1 + sovElf(uint64(m.SkillId))
	}
	return n
}

func (m *ElfSkillUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.SkillId != 0 {
		n += 1 + sovElf(uint64(m.SkillId))
	}
	if m.SkillLv != 0 {
		n += 1 + sovElf(uint64(m.SkillLv))
	}
	if len(m.SkillBag) > 0 {
		for k, v := range m.SkillBag {
			_ = k
			_ = v
			mapEntrySize := 1 + sovElf(uint64(k)) + 1 + sovElf(uint64(v))
			n += mapEntrySize + 1 + sovElf(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ElfSkillChangePosReq) Size() (n int) {
	var l int
	_ = l
	if m.SkillId != 0 {
		n += 1 + sovElf(uint64(m.SkillId))
	}
	if m.Pos != 0 {
		n += 1 + sovElf(uint64(m.Pos))
	}
	return n
}

func (m *ElfSkillChangePosAck) Size() (n int) {
	var l int
	_ = l
	if len(m.SkillBag) > 0 {
		for k, v := range m.SkillBag {
			_ = k
			_ = v
			mapEntrySize := 1 + sovElf(uint64(k)) + 1 + sovElf(uint64(v))
			n += mapEntrySize + 1 + sovElf(uint64(mapEntrySize))
		}
	}
	return n
}

func sovElf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozElf(x uint64) (n int) {
	return sovElf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ElfFeedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElfFeedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElfFeedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowElf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Positions = append(m.Positions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowElf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthElf
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Positions = append(m.Positions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipElf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElfFeedAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElfFeedAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElfFeedAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReceiveLimit == nil {
				m.ReceiveLimit = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowElf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipElf(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthElf
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ReceiveLimit[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElfSkillUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElfSkillUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElfSkillUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipElf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElfSkillUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElfSkillUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElfSkillUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillLv", wireType)
			}
			m.SkillLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillBag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SkillBag == nil {
				m.SkillBag = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowElf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipElf(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthElf
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SkillBag[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElfSkillChangePosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElfSkillChangePosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElfSkillChangePosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipElf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ElfSkillChangePosAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElfSkillChangePosAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElfSkillChangePosAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillBag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthElf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SkillBag == nil {
				m.SkillBag = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowElf
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowElf
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipElf(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthElf
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SkillBag[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthElf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipElf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowElf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthElf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowElf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipElf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthElf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowElf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("elf.proto", fileDescriptorElf) }

var fileDescriptorElf = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xcb, 0x4a, 0xf3, 0x40,
	0x14, 0xc7, 0xbf, 0x49, 0xbe, 0x7c, 0x9f, 0x3d, 0xad, 0x5a, 0x87, 0x2e, 0x42, 0x91, 0x10, 0xb3,
	0x90, 0xa0, 0x90, 0x45, 0xdd, 0x88, 0x22, 0x62, 0xb4, 0x8a, 0x50, 0x44, 0x52, 0x7c, 0x80, 0x5e,
	0x26, 0x35, 0x74, 0x9a, 0x19, 0x3b, 0x31, 0xd8, 0x27, 0xd1, 0xd7, 0x71, 0xe7, 0xd2, 0x37, 0x50,
	0xea, 0x8b, 0xc8, 0xe4, 0xd2, 0xa6, 0x78, 0x01, 0x17, 0xee, 0xce, 0x39, 0xf3, 0x3f, 0x97, 0xdf,
	0x39, 0x03, 0x25, 0x42, 0x7d, 0x87, 0x8f, 0x59, 0xc4, 0xb0, 0xc2, 0xbb, 0xf5, 0x4a, 0x8f, 0x8d,
	0x46, 0x2c, 0x4c, 0x23, 0xd6, 0x16, 0x40, 0x93, 0xfa, 0xa7, 0x84, 0xf4, 0x3d, 0x72, 0x83, 0xd7,
	0xa1, 0xc4, 0x99, 0x08, 0xa2, 0x80, 0x85, 0x42, 0x47, 0xa6, 0x6a, 0x6b, 0xde, 0x3c, 0x60, 0xbd,
	0xa0, 0x99, 0xf8, 0xa8, 0x37, 0xc4, 0x2b, 0xa0, 0xd0, 0x58, 0x47, 0x26, 0xb2, 0x35, 0x4f, 0xa1,
	0x31, 0xae, 0x82, 0x4a, 0xee, 0xb8, 0xae, 0x24, 0x01, 0x69, 0x62, 0x1b, 0xb4, 0x01, 0x63, 0x7d,
	0xa1, 0xab, 0x26, 0xb2, 0xcb, 0x0d, 0xec, 0xf0, 0xae, 0x73, 0x26, 0x03, 0xc7, 0xd7, 0x9d, 0x70,
	0x40, 0x2e, 0x22, 0xdf, 0x4b, 0x05, 0xf8, 0x04, 0x2a, 0x63, 0xd2, 0x23, 0x41, 0x4c, 0x5a, 0xc1,
	0x28, 0x88, 0xf4, 0xbf, 0xa6, 0x6a, 0x97, 0x1b, 0xa6, 0x4c, 0x98, 0x77, 0x74, 0xbc, 0x82, 0xa4,
	0x19, 0x46, 0xe3, 0x89, 0xb7, 0x90, 0x55, 0x3f, 0x84, 0xb5, 0x0f, 0x12, 0x39, 0xd6, 0x90, 0x4c,
	0xb2, 0x39, 0xa5, 0x89, 0x6b, 0xa0, 0xc5, 0x1d, 0x7a, 0x4b, 0xb2, 0x51, 0x53, 0x67, 0x4f, 0xd9,
	0x45, 0xd6, 0x36, 0xac, 0x36, 0xa9, 0xdf, 0x1e, 0x06, 0x94, 0x5e, 0xf1, 0x56, 0x2c, 0x57, 0xa2,
	0xc3, 0x7f, 0x21, 0xfd, 0xf3, 0x7e, 0x56, 0x22, 0x77, 0xad, 0x47, 0xb4, 0xa8, 0x96, 0x3b, 0xf9,
	0x52, 0x3d, 0x7b, 0x69, 0xc5, 0x59, 0xdb, 0xdc, 0xc5, 0x07, 0xb0, 0x94, 0x98, 0x6e, 0x67, 0xa0,
	0xab, 0x09, 0xf7, 0x46, 0xc6, 0x5d, 0x2c, 0xed, 0xb4, 0x33, 0x4d, 0x0a, 0x3e, 0x4b, 0xa9, 0xef,
	0xc3, 0xf2, 0xc2, 0xd3, 0x8f, 0x80, 0x5d, 0xa8, 0xe5, 0x7d, 0xd2, 0x9b, 0x5c, 0x32, 0xf1, 0x2d,
	0xb5, 0xac, 0xce, 0x99, 0xc8, 0xaf, 0xcc, 0x99, 0xb0, 0xee, 0xd1, 0x27, 0x45, 0xe4, 0x32, 0xdc,
	0x02, 0x18, 0x4a, 0xc0, 0x36, 0x8b, 0x60, 0x45, 0xed, 0xaf, 0xd0, 0xb9, 0xd5, 0xa7, 0xa9, 0x81,
	0x9e, 0xa7, 0x06, 0x7a, 0x9d, 0x1a, 0xe8, 0xe1, 0xcd, 0xf8, 0xd3, 0xfd, 0x97, 0xfc, 0xfa, 0x9d,
	0xf7, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x01, 0xd7, 0xcc, 0x14, 0x03, 0x00, 0x00,
}
