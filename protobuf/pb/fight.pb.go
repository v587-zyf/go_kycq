// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fight.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EnterPublicCopyReq struct {
	StageId   int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Condition int32 `protobuf:"varint,2,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (m *EnterPublicCopyReq) Reset()                    { *m = EnterPublicCopyReq{} }
func (m *EnterPublicCopyReq) String() string            { return proto.CompactTextString(m) }
func (*EnterPublicCopyReq) ProtoMessage()               {}
func (*EnterPublicCopyReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{0} }

func (m *EnterPublicCopyReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *EnterPublicCopyReq) GetCondition() int32 {
	if m != nil {
		return m.Condition
	}
	return 0
}

type EnterPublicCopyAck struct {
	FailReason string `protobuf:"bytes,1,opt,name=failReason,proto3" json:"failReason,omitempty"`
}

func (m *EnterPublicCopyAck) Reset()                    { *m = EnterPublicCopyAck{} }
func (m *EnterPublicCopyAck) String() string            { return proto.CompactTextString(m) }
func (*EnterPublicCopyAck) ProtoMessage()               {}
func (*EnterPublicCopyAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{1} }

func (m *EnterPublicCopyAck) GetFailReason() string {
	if m != nil {
		return m.FailReason
	}
	return ""
}

// 战斗申请道具使用
type FightItemUseReq struct {
	ItemId int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *FightItemUseReq) Reset()                    { *m = FightItemUseReq{} }
func (m *FightItemUseReq) String() string            { return proto.CompactTextString(m) }
func (*FightItemUseReq) ProtoMessage()               {}
func (*FightItemUseReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{2} }

func (m *FightItemUseReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

// 战斗申请道具使用
type FightItemUseAck struct {
	ItemId   int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	UseTimes int32 `protobuf:"varint,2,opt,name=useTimes,proto3" json:"useTimes,omitempty"`
}

func (m *FightItemUseAck) Reset()                    { *m = FightItemUseAck{} }
func (m *FightItemUseAck) String() string            { return proto.CompactTextString(m) }
func (*FightItemUseAck) ProtoMessage()               {}
func (*FightItemUseAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{3} }

func (m *FightItemUseAck) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *FightItemUseAck) GetUseTimes() int32 {
	if m != nil {
		return m.UseTimes
	}
	return 0
}

// 战斗申请复活
type FightUserReliveReq struct {
	SafeRelive bool `protobuf:"varint,1,opt,name=safeRelive,proto3" json:"safeRelive,omitempty"`
}

func (m *FightUserReliveReq) Reset()                    { *m = FightUserReliveReq{} }
func (m *FightUserReliveReq) String() string            { return proto.CompactTextString(m) }
func (*FightUserReliveReq) ProtoMessage()               {}
func (*FightUserReliveReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{4} }

func (m *FightUserReliveReq) GetSafeRelive() bool {
	if m != nil {
		return m.SafeRelive
	}
	return false
}

// 战斗申请复活
type FightUserReliveAck struct {
	ReliveTimes        int32 `protobuf:"varint,1,opt,name=reliveTimes,proto3" json:"reliveTimes,omitempty"`
	ReliveByIngotTimes int32 `protobuf:"varint,2,opt,name=reliveByIngotTimes,proto3" json:"reliveByIngotTimes,omitempty"`
}

func (m *FightUserReliveAck) Reset()                    { *m = FightUserReliveAck{} }
func (m *FightUserReliveAck) String() string            { return proto.CompactTextString(m) }
func (*FightUserReliveAck) ProtoMessage()               {}
func (*FightUserReliveAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{5} }

func (m *FightUserReliveAck) GetReliveTimes() int32 {
	if m != nil {
		return m.ReliveTimes
	}
	return 0
}

func (m *FightUserReliveAck) GetReliveByIngotTimes() int32 {
	if m != nil {
		return m.ReliveByIngotTimes
	}
	return 0
}

// 掉落物品拾取
type FightPickUpReq struct {
	DropItemIds []int32 `protobuf:"varint,1,rep,packed,name=dropItemIds" json:"dropItemIds,omitempty"`
}

func (m *FightPickUpReq) Reset()                    { *m = FightPickUpReq{} }
func (m *FightPickUpReq) String() string            { return proto.CompactTextString(m) }
func (*FightPickUpReq) ProtoMessage()               {}
func (*FightPickUpReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{6} }

func (m *FightPickUpReq) GetDropItemIds() []int32 {
	if m != nil {
		return m.DropItemIds
	}
	return nil
}

// 掉落物品拾取
type FightPickUpAck struct {
	Items    map[int32]*ItemUnit `protobuf:"bytes,1,rep,name=items" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	IsOneKey bool                `protobuf:"varint,2,opt,name=isOneKey,proto3" json:"isOneKey,omitempty"`
	InMail   bool                `protobuf:"varint,3,opt,name=inMail,proto3" json:"inMail,omitempty"`
	Err      *ErrorAck           `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
}

func (m *FightPickUpAck) Reset()                    { *m = FightPickUpAck{} }
func (m *FightPickUpAck) String() string            { return proto.CompactTextString(m) }
func (*FightPickUpAck) ProtoMessage()               {}
func (*FightPickUpAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{7} }

func (m *FightPickUpAck) GetItems() map[int32]*ItemUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *FightPickUpAck) GetIsOneKey() bool {
	if m != nil {
		return m.IsOneKey
	}
	return false
}

func (m *FightPickUpAck) GetInMail() bool {
	if m != nil {
		return m.InMail
	}
	return false
}

func (m *FightPickUpAck) GetErr() *ErrorAck {
	if m != nil {
		return m.Err
	}
	return nil
}

// 获取鼓舞次数
type FightGetCheerNumReq struct {
}

func (m *FightGetCheerNumReq) Reset()                    { *m = FightGetCheerNumReq{} }
func (m *FightGetCheerNumReq) String() string            { return proto.CompactTextString(m) }
func (*FightGetCheerNumReq) ProtoMessage()               {}
func (*FightGetCheerNumReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{8} }

type FightGetCheerNumNtf struct {
	CheerNum      int32 `protobuf:"varint,1,opt,name=cheerNum,proto3" json:"cheerNum,omitempty"`
	GuildCheerNum int32 `protobuf:"varint,2,opt,name=guildCheerNum,proto3" json:"guildCheerNum,omitempty"`
}

func (m *FightGetCheerNumNtf) Reset()                    { *m = FightGetCheerNumNtf{} }
func (m *FightGetCheerNumNtf) String() string            { return proto.CompactTextString(m) }
func (*FightGetCheerNumNtf) ProtoMessage()               {}
func (*FightGetCheerNumNtf) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{9} }

func (m *FightGetCheerNumNtf) GetCheerNum() int32 {
	if m != nil {
		return m.CheerNum
	}
	return 0
}

func (m *FightGetCheerNumNtf) GetGuildCheerNum() int32 {
	if m != nil {
		return m.GuildCheerNum
	}
	return 0
}

// 鼓舞申请
type FightCheerReq struct {
}

func (m *FightCheerReq) Reset()                    { *m = FightCheerReq{} }
func (m *FightCheerReq) String() string            { return proto.CompactTextString(m) }
func (*FightCheerReq) ProtoMessage()               {}
func (*FightCheerReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{10} }

type FightCheerAck struct {
	CheerNum      int32 `protobuf:"varint,1,opt,name=cheerNum,proto3" json:"cheerNum,omitempty"`
	GuildCheerNum int32 `protobuf:"varint,2,opt,name=guildCheerNum,proto3" json:"guildCheerNum,omitempty"`
}

func (m *FightCheerAck) Reset()                    { *m = FightCheerAck{} }
func (m *FightCheerAck) String() string            { return proto.CompactTextString(m) }
func (*FightCheerAck) ProtoMessage()               {}
func (*FightCheerAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{11} }

func (m *FightCheerAck) GetCheerNum() int32 {
	if m != nil {
		return m.CheerNum
	}
	return 0
}

func (m *FightCheerAck) GetGuildCheerNum() int32 {
	if m != nil {
		return m.GuildCheerNum
	}
	return 0
}

type FightCheerNumChangeNtf struct {
	GuildId       int32 `protobuf:"varint,1,opt,name=guildId,proto3" json:"guildId,omitempty"`
	GuildCheerNum int32 `protobuf:"varint,2,opt,name=guildCheerNum,proto3" json:"guildCheerNum,omitempty"`
}

func (m *FightCheerNumChangeNtf) Reset()                    { *m = FightCheerNumChangeNtf{} }
func (m *FightCheerNumChangeNtf) String() string            { return proto.CompactTextString(m) }
func (*FightCheerNumChangeNtf) ProtoMessage()               {}
func (*FightCheerNumChangeNtf) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{12} }

func (m *FightCheerNumChangeNtf) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *FightCheerNumChangeNtf) GetGuildCheerNum() int32 {
	if m != nil {
		return m.GuildCheerNum
	}
	return 0
}

// 药水使用
type FightPotionReq struct {
}

func (m *FightPotionReq) Reset()                    { *m = FightPotionReq{} }
func (m *FightPotionReq) String() string            { return proto.CompactTextString(m) }
func (*FightPotionReq) ProtoMessage()               {}
func (*FightPotionReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{13} }

type FightPotionAck struct {
	CoolDown   int32 `protobuf:"varint,1,opt,name=coolDown,proto3" json:"coolDown,omitempty"`
	ServerTime int32 `protobuf:"varint,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	EndTime    int32 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *FightPotionAck) Reset()                    { *m = FightPotionAck{} }
func (m *FightPotionAck) String() string            { return proto.CompactTextString(m) }
func (*FightPotionAck) ProtoMessage()               {}
func (*FightPotionAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{14} }

func (m *FightPotionAck) GetCoolDown() int32 {
	if m != nil {
		return m.CoolDown
	}
	return 0
}

func (m *FightPotionAck) GetServerTime() int32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *FightPotionAck) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type FightPotionCdReq struct {
}

func (m *FightPotionCdReq) Reset()                    { *m = FightPotionCdReq{} }
func (m *FightPotionCdReq) String() string            { return proto.CompactTextString(m) }
func (*FightPotionCdReq) ProtoMessage()               {}
func (*FightPotionCdReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{15} }

type FightPotionCdAck struct {
	CoolDown   int32 `protobuf:"varint,1,opt,name=coolDown,proto3" json:"coolDown,omitempty"`
	ServerTime int32 `protobuf:"varint,2,opt,name=serverTime,proto3" json:"serverTime,omitempty"`
	EndTime    int32 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *FightPotionCdAck) Reset()                    { *m = FightPotionCdAck{} }
func (m *FightPotionCdAck) String() string            { return proto.CompactTextString(m) }
func (*FightPotionCdAck) ProtoMessage()               {}
func (*FightPotionCdAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{16} }

func (m *FightPotionCdAck) GetCoolDown() int32 {
	if m != nil {
		return m.CoolDown
	}
	return 0
}

func (m *FightPotionCdAck) GetServerTime() int32 {
	if m != nil {
		return m.ServerTime
	}
	return 0
}

func (m *FightPotionCdAck) GetEndTime() int32 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type FightCollectionReq struct {
	ObjId int32 `protobuf:"varint,1,opt,name=objId,proto3" json:"objId,omitempty"`
}

func (m *FightCollectionReq) Reset()                    { *m = FightCollectionReq{} }
func (m *FightCollectionReq) String() string            { return proto.CompactTextString(m) }
func (*FightCollectionReq) ProtoMessage()               {}
func (*FightCollectionReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{17} }

func (m *FightCollectionReq) GetObjId() int32 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

type FightCollectionAck struct {
	StartTime int64 `protobuf:"varint,1,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64 `protobuf:"varint,2,opt,name=endTime,proto3" json:"endTime,omitempty"`
	ObjId     int32 `protobuf:"varint,3,opt,name=objId,proto3" json:"objId,omitempty"`
}

func (m *FightCollectionAck) Reset()                    { *m = FightCollectionAck{} }
func (m *FightCollectionAck) String() string            { return proto.CompactTextString(m) }
func (*FightCollectionAck) ProtoMessage()               {}
func (*FightCollectionAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{18} }

func (m *FightCollectionAck) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FightCollectionAck) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *FightCollectionAck) GetObjId() int32 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

// 推送玩家采集结束
type FightCollectionNtf struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *FightCollectionNtf) Reset()                    { *m = FightCollectionNtf{} }
func (m *FightCollectionNtf) String() string            { return proto.CompactTextString(m) }
func (*FightCollectionNtf) ProtoMessage()               {}
func (*FightCollectionNtf) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{19} }

func (m *FightCollectionNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type FightCollectionCancelReq struct {
	ObjId int32 `protobuf:"varint,1,opt,name=objId,proto3" json:"objId,omitempty"`
}

func (m *FightCollectionCancelReq) Reset()                    { *m = FightCollectionCancelReq{} }
func (m *FightCollectionCancelReq) String() string            { return proto.CompactTextString(m) }
func (*FightCollectionCancelReq) ProtoMessage()               {}
func (*FightCollectionCancelReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{20} }

func (m *FightCollectionCancelReq) GetObjId() int32 {
	if m != nil {
		return m.ObjId
	}
	return 0
}

type FightCollectionCancelAck struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *FightCollectionCancelAck) Reset()                    { *m = FightCollectionCancelAck{} }
func (m *FightCollectionCancelAck) String() string            { return proto.CompactTextString(m) }
func (*FightCollectionCancelAck) ProtoMessage()               {}
func (*FightCollectionCancelAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{21} }

func (m *FightCollectionCancelAck) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// 请求协助
type FightApplyForHelpReq struct {
	HelpUserId int32 `protobuf:"varint,1,opt,name=helpUserId,proto3" json:"helpUserId,omitempty"`
	Source     int32 `protobuf:"varint,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *FightApplyForHelpReq) Reset()                    { *m = FightApplyForHelpReq{} }
func (m *FightApplyForHelpReq) String() string            { return proto.CompactTextString(m) }
func (*FightApplyForHelpReq) ProtoMessage()               {}
func (*FightApplyForHelpReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{22} }

func (m *FightApplyForHelpReq) GetHelpUserId() int32 {
	if m != nil {
		return m.HelpUserId
	}
	return 0
}

func (m *FightApplyForHelpReq) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

type FightApplyForHelpAck struct {
	Result     int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	FailReason string `protobuf:"bytes,2,opt,name=failReason,proto3" json:"failReason,omitempty"`
	HelpUserId int32  `protobuf:"varint,3,opt,name=helpUserId,proto3" json:"helpUserId,omitempty"`
}

func (m *FightApplyForHelpAck) Reset()                    { *m = FightApplyForHelpAck{} }
func (m *FightApplyForHelpAck) String() string            { return proto.CompactTextString(m) }
func (*FightApplyForHelpAck) ProtoMessage()               {}
func (*FightApplyForHelpAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{23} }

func (m *FightApplyForHelpAck) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *FightApplyForHelpAck) GetFailReason() string {
	if m != nil {
		return m.FailReason
	}
	return ""
}

func (m *FightApplyForHelpAck) GetHelpUserId() int32 {
	if m != nil {
		return m.HelpUserId
	}
	return 0
}

type FightApplyForHelpNtf struct {
	ReqHelpUserId int32          `protobuf:"varint,1,opt,name=reqHelpUserId,proto3" json:"reqHelpUserId,omitempty"`
	ReqHelpName   string         `protobuf:"bytes,2,opt,name=reqHelpName,proto3" json:"reqHelpName,omitempty"`
	StageId       int32          `protobuf:"varint,3,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Source        int32          `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`
	ReqHelpUser   *BriefUserInfo `protobuf:"bytes,5,opt,name=reqHelpUser" json:"reqHelpUser,omitempty"`
}

func (m *FightApplyForHelpNtf) Reset()                    { *m = FightApplyForHelpNtf{} }
func (m *FightApplyForHelpNtf) String() string            { return proto.CompactTextString(m) }
func (*FightApplyForHelpNtf) ProtoMessage()               {}
func (*FightApplyForHelpNtf) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{24} }

func (m *FightApplyForHelpNtf) GetReqHelpUserId() int32 {
	if m != nil {
		return m.ReqHelpUserId
	}
	return 0
}

func (m *FightApplyForHelpNtf) GetReqHelpName() string {
	if m != nil {
		return m.ReqHelpName
	}
	return ""
}

func (m *FightApplyForHelpNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *FightApplyForHelpNtf) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *FightApplyForHelpNtf) GetReqHelpUser() *BriefUserInfo {
	if m != nil {
		return m.ReqHelpUser
	}
	return nil
}

// 请求协助
type FightAskForHelpResultReq struct {
	IsAgree       bool  `protobuf:"varint,1,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
	ReqHelpUserId int32 `protobuf:"varint,2,opt,name=reqHelpUserId,proto3" json:"reqHelpUserId,omitempty"`
	HelpStageId   int32 `protobuf:"varint,3,opt,name=helpStageId,proto3" json:"helpStageId,omitempty"`
}

func (m *FightAskForHelpResultReq) Reset()                    { *m = FightAskForHelpResultReq{} }
func (m *FightAskForHelpResultReq) String() string            { return proto.CompactTextString(m) }
func (*FightAskForHelpResultReq) ProtoMessage()               {}
func (*FightAskForHelpResultReq) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{25} }

func (m *FightAskForHelpResultReq) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

func (m *FightAskForHelpResultReq) GetReqHelpUserId() int32 {
	if m != nil {
		return m.ReqHelpUserId
	}
	return 0
}

func (m *FightAskForHelpResultReq) GetHelpStageId() int32 {
	if m != nil {
		return m.HelpStageId
	}
	return 0
}

// 请求协助
type FightAskForHelpResultAck struct {
	IsAgree       bool   `protobuf:"varint,1,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
	ReqHelpUserId int32  `protobuf:"varint,2,opt,name=reqHelpUserId,proto3" json:"reqHelpUserId,omitempty"`
	HelpStageId   int32  `protobuf:"varint,3,opt,name=helpStageId,proto3" json:"helpStageId,omitempty"`
	EnterErr      string `protobuf:"bytes,4,opt,name=enterErr,proto3" json:"enterErr,omitempty"`
}

func (m *FightAskForHelpResultAck) Reset()                    { *m = FightAskForHelpResultAck{} }
func (m *FightAskForHelpResultAck) String() string            { return proto.CompactTextString(m) }
func (*FightAskForHelpResultAck) ProtoMessage()               {}
func (*FightAskForHelpResultAck) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{26} }

func (m *FightAskForHelpResultAck) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

func (m *FightAskForHelpResultAck) GetReqHelpUserId() int32 {
	if m != nil {
		return m.ReqHelpUserId
	}
	return 0
}

func (m *FightAskForHelpResultAck) GetHelpStageId() int32 {
	if m != nil {
		return m.HelpStageId
	}
	return 0
}

func (m *FightAskForHelpResultAck) GetEnterErr() string {
	if m != nil {
		return m.EnterErr
	}
	return ""
}

type FightAskForHelpResultNtf struct {
	IsAgree    bool   `protobuf:"varint,1,opt,name=isAgree,proto3" json:"isAgree,omitempty"`
	HelpUserId int32  `protobuf:"varint,2,opt,name=helpUserId,proto3" json:"helpUserId,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FightAskForHelpResultNtf) Reset()                    { *m = FightAskForHelpResultNtf{} }
func (m *FightAskForHelpResultNtf) String() string            { return proto.CompactTextString(m) }
func (*FightAskForHelpResultNtf) ProtoMessage()               {}
func (*FightAskForHelpResultNtf) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{27} }

func (m *FightAskForHelpResultNtf) GetIsAgree() bool {
	if m != nil {
		return m.IsAgree
	}
	return false
}

func (m *FightAskForHelpResultNtf) GetHelpUserId() int32 {
	if m != nil {
		return m.HelpUserId
	}
	return 0
}

func (m *FightAskForHelpResultNtf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FightItemsAddNtf struct {
	StageId   int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
	AddSource int32           `protobuf:"varint,3,opt,name=addSource,proto3" json:"addSource,omitempty"`
}

func (m *FightItemsAddNtf) Reset()                    { *m = FightItemsAddNtf{} }
func (m *FightItemsAddNtf) String() string            { return proto.CompactTextString(m) }
func (*FightItemsAddNtf) ProtoMessage()               {}
func (*FightItemsAddNtf) Descriptor() ([]byte, []int) { return fileDescriptorFight, []int{28} }

func (m *FightItemsAddNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *FightItemsAddNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *FightItemsAddNtf) GetAddSource() int32 {
	if m != nil {
		return m.AddSource
	}
	return 0
}

func init() {
	proto.RegisterType((*EnterPublicCopyReq)(nil), "pb.EnterPublicCopyReq")
	proto.RegisterType((*EnterPublicCopyAck)(nil), "pb.EnterPublicCopyAck")
	proto.RegisterType((*FightItemUseReq)(nil), "pb.FightItemUseReq")
	proto.RegisterType((*FightItemUseAck)(nil), "pb.FightItemUseAck")
	proto.RegisterType((*FightUserReliveReq)(nil), "pb.FightUserReliveReq")
	proto.RegisterType((*FightUserReliveAck)(nil), "pb.FightUserReliveAck")
	proto.RegisterType((*FightPickUpReq)(nil), "pb.FightPickUpReq")
	proto.RegisterType((*FightPickUpAck)(nil), "pb.FightPickUpAck")
	proto.RegisterType((*FightGetCheerNumReq)(nil), "pb.FightGetCheerNumReq")
	proto.RegisterType((*FightGetCheerNumNtf)(nil), "pb.FightGetCheerNumNtf")
	proto.RegisterType((*FightCheerReq)(nil), "pb.FightCheerReq")
	proto.RegisterType((*FightCheerAck)(nil), "pb.FightCheerAck")
	proto.RegisterType((*FightCheerNumChangeNtf)(nil), "pb.FightCheerNumChangeNtf")
	proto.RegisterType((*FightPotionReq)(nil), "pb.FightPotionReq")
	proto.RegisterType((*FightPotionAck)(nil), "pb.FightPotionAck")
	proto.RegisterType((*FightPotionCdReq)(nil), "pb.FightPotionCdReq")
	proto.RegisterType((*FightPotionCdAck)(nil), "pb.FightPotionCdAck")
	proto.RegisterType((*FightCollectionReq)(nil), "pb.FightCollectionReq")
	proto.RegisterType((*FightCollectionAck)(nil), "pb.FightCollectionAck")
	proto.RegisterType((*FightCollectionNtf)(nil), "pb.FightCollectionNtf")
	proto.RegisterType((*FightCollectionCancelReq)(nil), "pb.FightCollectionCancelReq")
	proto.RegisterType((*FightCollectionCancelAck)(nil), "pb.FightCollectionCancelAck")
	proto.RegisterType((*FightApplyForHelpReq)(nil), "pb.FightApplyForHelpReq")
	proto.RegisterType((*FightApplyForHelpAck)(nil), "pb.FightApplyForHelpAck")
	proto.RegisterType((*FightApplyForHelpNtf)(nil), "pb.FightApplyForHelpNtf")
	proto.RegisterType((*FightAskForHelpResultReq)(nil), "pb.FightAskForHelpResultReq")
	proto.RegisterType((*FightAskForHelpResultAck)(nil), "pb.FightAskForHelpResultAck")
	proto.RegisterType((*FightAskForHelpResultNtf)(nil), "pb.FightAskForHelpResultNtf")
	proto.RegisterType((*FightItemsAddNtf)(nil), "pb.FightItemsAddNtf")
}
func (m *EnterPublicCopyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterPublicCopyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.StageId))
	}
	if m.Condition != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Condition))
	}
	return i, nil
}

func (m *EnterPublicCopyAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterPublicCopyAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FailReason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFight(dAtA, i, uint64(len(m.FailReason)))
		i += copy(dAtA[i:], m.FailReason)
	}
	return i, nil
}

func (m *FightItemUseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightItemUseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *FightItemUseAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightItemUseAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ItemId))
	}
	if m.UseTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.UseTimes))
	}
	return i, nil
}

func (m *FightUserReliveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightUserReliveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SafeRelive {
		dAtA[i] = 0x8
		i++
		if m.SafeRelive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FightUserReliveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightUserReliveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReliveTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ReliveTimes))
	}
	if m.ReliveByIngotTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ReliveByIngotTimes))
	}
	return i, nil
}

func (m *FightPickUpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightPickUpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DropItemIds) > 0 {
		dAtA2 := make([]byte, len(m.DropItemIds)*10)
		var j1 int
		for _, num1 := range m.DropItemIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintFight(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *FightPickUpAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightPickUpAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, _ := range m.Items {
			dAtA[i] = 0xa
			i++
			v := m.Items[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFight(uint64(msgSize))
			}
			mapSize := 1 + sovFight(uint64(k)) + msgSize
			i = encodeVarintFight(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFight(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFight(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.IsOneKey {
		dAtA[i] = 0x10
		i++
		if m.IsOneKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.InMail {
		dAtA[i] = 0x18
		i++
		if m.InMail {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Err != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Err.Size()))
		n4, err := m.Err.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *FightGetCheerNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightGetCheerNumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FightGetCheerNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightGetCheerNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CheerNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.CheerNum))
	}
	if m.GuildCheerNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.GuildCheerNum))
	}
	return i, nil
}

func (m *FightCheerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCheerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FightCheerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCheerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CheerNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.CheerNum))
	}
	if m.GuildCheerNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.GuildCheerNum))
	}
	return i, nil
}

func (m *FightCheerNumChangeNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCheerNumChangeNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.GuildId))
	}
	if m.GuildCheerNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.GuildCheerNum))
	}
	return i, nil
}

func (m *FightPotionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightPotionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FightPotionAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightPotionAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CoolDown != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.CoolDown))
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ServerTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *FightPotionCdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightPotionCdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FightPotionCdAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightPotionCdAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CoolDown != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.CoolDown))
	}
	if m.ServerTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ServerTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *FightCollectionReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCollectionReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ObjId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ObjId))
	}
	return i, nil
}

func (m *FightCollectionAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCollectionAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.EndTime))
	}
	if m.ObjId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ObjId))
	}
	return i, nil
}

func (m *FightCollectionNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCollectionNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Goods.Size()))
		n5, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *FightCollectionCancelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCollectionCancelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ObjId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ObjId))
	}
	return i, nil
}

func (m *FightCollectionCancelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightCollectionCancelAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *FightApplyForHelpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightApplyForHelpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HelpUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.HelpUserId))
	}
	if m.Source != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Source))
	}
	return i, nil
}

func (m *FightApplyForHelpAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightApplyForHelpAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Result))
	}
	if len(m.FailReason) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFight(dAtA, i, uint64(len(m.FailReason)))
		i += copy(dAtA[i:], m.FailReason)
	}
	if m.HelpUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.HelpUserId))
	}
	return i, nil
}

func (m *FightApplyForHelpNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightApplyForHelpNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReqHelpUserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ReqHelpUserId))
	}
	if len(m.ReqHelpName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFight(dAtA, i, uint64(len(m.ReqHelpName)))
		i += copy(dAtA[i:], m.ReqHelpName)
	}
	if m.StageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.StageId))
	}
	if m.Source != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Source))
	}
	if m.ReqHelpUser != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ReqHelpUser.Size()))
		n6, err := m.ReqHelpUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *FightAskForHelpResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightAskForHelpResultReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAgree {
		dAtA[i] = 0x8
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReqHelpUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ReqHelpUserId))
	}
	if m.HelpStageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.HelpStageId))
	}
	return i, nil
}

func (m *FightAskForHelpResultAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightAskForHelpResultAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAgree {
		dAtA[i] = 0x8
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ReqHelpUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.ReqHelpUserId))
	}
	if m.HelpStageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.HelpStageId))
	}
	if len(m.EnterErr) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFight(dAtA, i, uint64(len(m.EnterErr)))
		i += copy(dAtA[i:], m.EnterErr)
	}
	return i, nil
}

func (m *FightAskForHelpResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightAskForHelpResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAgree {
		dAtA[i] = 0x8
		i++
		if m.IsAgree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.HelpUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.HelpUserId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFight(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *FightItemsAddNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FightItemsAddNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.StageId))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.Goods.Size()))
		n7, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.AddSource != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFight(dAtA, i, uint64(m.AddSource))
	}
	return i, nil
}

func encodeVarintFight(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EnterPublicCopyReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovFight(uint64(m.StageId))
	}
	if m.Condition != 0 {
		n += 1 + sovFight(uint64(m.Condition))
	}
	return n
}

func (m *EnterPublicCopyAck) Size() (n int) {
	var l int
	_ = l
	l = len(m.FailReason)
	if l > 0 {
		n += 1 + l + sovFight(uint64(l))
	}
	return n
}

func (m *FightItemUseReq) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovFight(uint64(m.ItemId))
	}
	return n
}

func (m *FightItemUseAck) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovFight(uint64(m.ItemId))
	}
	if m.UseTimes != 0 {
		n += 1 + sovFight(uint64(m.UseTimes))
	}
	return n
}

func (m *FightUserReliveReq) Size() (n int) {
	var l int
	_ = l
	if m.SafeRelive {
		n += 2
	}
	return n
}

func (m *FightUserReliveAck) Size() (n int) {
	var l int
	_ = l
	if m.ReliveTimes != 0 {
		n += 1 + sovFight(uint64(m.ReliveTimes))
	}
	if m.ReliveByIngotTimes != 0 {
		n += 1 + sovFight(uint64(m.ReliveByIngotTimes))
	}
	return n
}

func (m *FightPickUpReq) Size() (n int) {
	var l int
	_ = l
	if len(m.DropItemIds) > 0 {
		l = 0
		for _, e := range m.DropItemIds {
			l += sovFight(uint64(e))
		}
		n += 1 + sovFight(uint64(l)) + l
	}
	return n
}

func (m *FightPickUpAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFight(uint64(l))
			}
			mapEntrySize := 1 + sovFight(uint64(k)) + l
			n += mapEntrySize + 1 + sovFight(uint64(mapEntrySize))
		}
	}
	if m.IsOneKey {
		n += 2
	}
	if m.InMail {
		n += 2
	}
	if m.Err != nil {
		l = m.Err.Size()
		n += 1 + l + sovFight(uint64(l))
	}
	return n
}

func (m *FightGetCheerNumReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FightGetCheerNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.CheerNum != 0 {
		n += 1 + sovFight(uint64(m.CheerNum))
	}
	if m.GuildCheerNum != 0 {
		n += 1 + sovFight(uint64(m.GuildCheerNum))
	}
	return n
}

func (m *FightCheerReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FightCheerAck) Size() (n int) {
	var l int
	_ = l
	if m.CheerNum != 0 {
		n += 1 + sovFight(uint64(m.CheerNum))
	}
	if m.GuildCheerNum != 0 {
		n += 1 + sovFight(uint64(m.GuildCheerNum))
	}
	return n
}

func (m *FightCheerNumChangeNtf) Size() (n int) {
	var l int
	_ = l
	if m.GuildId != 0 {
		n += 1 + sovFight(uint64(m.GuildId))
	}
	if m.GuildCheerNum != 0 {
		n += 1 + sovFight(uint64(m.GuildCheerNum))
	}
	return n
}

func (m *FightPotionReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FightPotionAck) Size() (n int) {
	var l int
	_ = l
	if m.CoolDown != 0 {
		n += 1 + sovFight(uint64(m.CoolDown))
	}
	if m.ServerTime != 0 {
		n += 1 + sovFight(uint64(m.ServerTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovFight(uint64(m.EndTime))
	}
	return n
}

func (m *FightPotionCdReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FightPotionCdAck) Size() (n int) {
	var l int
	_ = l
	if m.CoolDown != 0 {
		n += 1 + sovFight(uint64(m.CoolDown))
	}
	if m.ServerTime != 0 {
		n += 1 + sovFight(uint64(m.ServerTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovFight(uint64(m.EndTime))
	}
	return n
}

func (m *FightCollectionReq) Size() (n int) {
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovFight(uint64(m.ObjId))
	}
	return n
}

func (m *FightCollectionAck) Size() (n int) {
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovFight(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovFight(uint64(m.EndTime))
	}
	if m.ObjId != 0 {
		n += 1 + sovFight(uint64(m.ObjId))
	}
	return n
}

func (m *FightCollectionNtf) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovFight(uint64(l))
	}
	return n
}

func (m *FightCollectionCancelReq) Size() (n int) {
	var l int
	_ = l
	if m.ObjId != 0 {
		n += 1 + sovFight(uint64(m.ObjId))
	}
	return n
}

func (m *FightCollectionCancelAck) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *FightApplyForHelpReq) Size() (n int) {
	var l int
	_ = l
	if m.HelpUserId != 0 {
		n += 1 + sovFight(uint64(m.HelpUserId))
	}
	if m.Source != 0 {
		n += 1 + sovFight(uint64(m.Source))
	}
	return n
}

func (m *FightApplyForHelpAck) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovFight(uint64(m.Result))
	}
	l = len(m.FailReason)
	if l > 0 {
		n += 1 + l + sovFight(uint64(l))
	}
	if m.HelpUserId != 0 {
		n += 1 + sovFight(uint64(m.HelpUserId))
	}
	return n
}

func (m *FightApplyForHelpNtf) Size() (n int) {
	var l int
	_ = l
	if m.ReqHelpUserId != 0 {
		n += 1 + sovFight(uint64(m.ReqHelpUserId))
	}
	l = len(m.ReqHelpName)
	if l > 0 {
		n += 1 + l + sovFight(uint64(l))
	}
	if m.StageId != 0 {
		n += 1 + sovFight(uint64(m.StageId))
	}
	if m.Source != 0 {
		n += 1 + sovFight(uint64(m.Source))
	}
	if m.ReqHelpUser != nil {
		l = m.ReqHelpUser.Size()
		n += 1 + l + sovFight(uint64(l))
	}
	return n
}

func (m *FightAskForHelpResultReq) Size() (n int) {
	var l int
	_ = l
	if m.IsAgree {
		n += 2
	}
	if m.ReqHelpUserId != 0 {
		n += 1 + sovFight(uint64(m.ReqHelpUserId))
	}
	if m.HelpStageId != 0 {
		n += 1 + sovFight(uint64(m.HelpStageId))
	}
	return n
}

func (m *FightAskForHelpResultAck) Size() (n int) {
	var l int
	_ = l
	if m.IsAgree {
		n += 2
	}
	if m.ReqHelpUserId != 0 {
		n += 1 + sovFight(uint64(m.ReqHelpUserId))
	}
	if m.HelpStageId != 0 {
		n += 1 + sovFight(uint64(m.HelpStageId))
	}
	l = len(m.EnterErr)
	if l > 0 {
		n += 1 + l + sovFight(uint64(l))
	}
	return n
}

func (m *FightAskForHelpResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.IsAgree {
		n += 2
	}
	if m.HelpUserId != 0 {
		n += 1 + sovFight(uint64(m.HelpUserId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFight(uint64(l))
	}
	return n
}

func (m *FightItemsAddNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovFight(uint64(m.StageId))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovFight(uint64(l))
	}
	if m.AddSource != 0 {
		n += 1 + sovFight(uint64(m.AddSource))
	}
	return n
}

func sovFight(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFight(x uint64) (n int) {
	return sovFight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnterPublicCopyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterPublicCopyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterPublicCopyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			m.Condition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Condition |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterPublicCopyAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterPublicCopyAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterPublicCopyAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightItemUseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightItemUseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightItemUseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightItemUseAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightItemUseAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightItemUseAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTimes", wireType)
			}
			m.UseTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightUserReliveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightUserReliveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightUserReliveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeRelive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SafeRelive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightUserReliveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightUserReliveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightUserReliveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReliveTimes", wireType)
			}
			m.ReliveTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReliveTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReliveByIngotTimes", wireType)
			}
			m.ReliveByIngotTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReliveByIngotTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightPickUpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightPickUpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightPickUpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFight
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DropItemIds = append(m.DropItemIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFight
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFight
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFight
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DropItemIds = append(m.DropItemIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DropItemIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightPickUpAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightPickUpAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightPickUpAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[int32]*ItemUnit)
			}
			var mapkey int32
			var mapvalue *ItemUnit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFight
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFight
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFight
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFight
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFight
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ItemUnit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFight(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFight
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOneKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOneKey = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InMail", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InMail = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Err == nil {
				m.Err = &ErrorAck{}
			}
			if err := m.Err.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightGetCheerNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightGetCheerNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightGetCheerNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightGetCheerNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightGetCheerNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightGetCheerNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheerNum", wireType)
			}
			m.CheerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheerNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildCheerNum", wireType)
			}
			m.GuildCheerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildCheerNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCheerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCheerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCheerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCheerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCheerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCheerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheerNum", wireType)
			}
			m.CheerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheerNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildCheerNum", wireType)
			}
			m.GuildCheerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildCheerNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCheerNumChangeNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCheerNumChangeNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCheerNumChangeNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildCheerNum", wireType)
			}
			m.GuildCheerNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildCheerNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightPotionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightPotionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightPotionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightPotionAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightPotionAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightPotionAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolDown", wireType)
			}
			m.CoolDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoolDown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightPotionCdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightPotionCdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightPotionCdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightPotionCdAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightPotionCdAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightPotionCdAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoolDown", wireType)
			}
			m.CoolDown = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoolDown |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			m.ServerTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCollectionReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCollectionReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCollectionReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCollectionAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCollectionAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCollectionAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCollectionNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCollectionNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCollectionNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCollectionCancelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCollectionCancelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCollectionCancelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjId", wireType)
			}
			m.ObjId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightCollectionCancelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightCollectionCancelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightCollectionCancelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightApplyForHelpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightApplyForHelpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightApplyForHelpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpUserId", wireType)
			}
			m.HelpUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightApplyForHelpAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightApplyForHelpAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightApplyForHelpAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpUserId", wireType)
			}
			m.HelpUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightApplyForHelpNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightApplyForHelpNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightApplyForHelpNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHelpUserId", wireType)
			}
			m.ReqHelpUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqHelpUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHelpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqHelpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHelpUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReqHelpUser == nil {
				m.ReqHelpUser = &BriefUserInfo{}
			}
			if err := m.ReqHelpUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightAskForHelpResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightAskForHelpResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightAskForHelpResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHelpUserId", wireType)
			}
			m.ReqHelpUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqHelpUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpStageId", wireType)
			}
			m.HelpStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpStageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightAskForHelpResultAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightAskForHelpResultAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightAskForHelpResultAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqHelpUserId", wireType)
			}
			m.ReqHelpUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqHelpUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpStageId", wireType)
			}
			m.HelpStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpStageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterErr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnterErr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightAskForHelpResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightAskForHelpResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightAskForHelpResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAgree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAgree = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpUserId", wireType)
			}
			m.HelpUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HelpUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FightItemsAddNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FightItemsAddNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FightItemsAddNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddSource", wireType)
			}
			m.AddSource = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddSource |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFight
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFight
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFight(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFight = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFight   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fight.proto", fileDescriptorFight) }

var fileDescriptorFight = []byte{
	// 897 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xd1, 0x6e, 0xe3, 0x44,
	0x14, 0xc5, 0x71, 0xb3, 0xdb, 0xdc, 0x6c, 0xd9, 0x32, 0x2c, 0xab, 0xa8, 0x5a, 0xa2, 0x6a, 0xb4,
	0x0f, 0x85, 0x87, 0x08, 0xa5, 0x3c, 0x20, 0x1e, 0x90, 0xd2, 0x90, 0xee, 0x56, 0x40, 0x58, 0x66,
	0xa9, 0xe0, 0xd5, 0xb1, 0x6f, 0x12, 0x13, 0x67, 0xc6, 0x1d, 0x3b, 0x45, 0x91, 0xf8, 0x90, 0xfd,
	0x21, 0x24, 0x1e, 0xf9, 0x04, 0x28, 0x3f, 0x82, 0xee, 0x78, 0xec, 0x8c, 0x93, 0x46, 0x20, 0xad,
	0xf6, 0xcd, 0xe7, 0xcc, 0x9d, 0x7b, 0xce, 0xdc, 0x99, 0xb9, 0x63, 0x68, 0x4f, 0xe3, 0xd9, 0x3c,
	0xef, 0xa5, 0x5a, 0xe5, 0x8a, 0x35, 0xd2, 0xc9, 0xc9, 0xa3, 0x50, 0x2d, 0x97, 0x4a, 0x16, 0x0c,
	0xff, 0x16, 0xd8, 0x48, 0xe6, 0xa8, 0x5f, 0xad, 0x26, 0x49, 0x1c, 0x0e, 0x55, 0xba, 0x16, 0x78,
	0xc3, 0x3a, 0xf0, 0x30, 0xcb, 0x83, 0x19, 0x5e, 0x45, 0x1d, 0xef, 0xd4, 0x3b, 0x6b, 0x8a, 0x12,
	0xb2, 0x67, 0xd0, 0x0a, 0x95, 0x8c, 0xe2, 0x3c, 0x56, 0xb2, 0xd3, 0x30, 0x63, 0x1b, 0x82, 0x7f,
	0xbe, 0x93, 0x6d, 0x10, 0x2e, 0x58, 0x17, 0x60, 0x1a, 0xc4, 0x89, 0xc0, 0x20, 0x53, 0xd2, 0x24,
	0x6c, 0x09, 0x87, 0xe1, 0x9f, 0xc0, 0xe3, 0x4b, 0x32, 0x79, 0x95, 0xe3, 0xf2, 0x3a, 0x43, 0x32,
	0xf0, 0x14, 0x1e, 0xc4, 0x39, 0x2e, 0x2b, 0x7d, 0x8b, 0xf8, 0xa8, 0x1e, 0x4a, 0xd9, 0xf7, 0x84,
	0xb2, 0x13, 0x38, 0x5c, 0x65, 0xf8, 0x63, 0xbc, 0xc4, 0xcc, 0x1a, 0xad, 0x30, 0xf9, 0x34, 0x69,
	0xae, 0x33, 0xd4, 0x02, 0x93, 0xf8, 0xd6, 0x88, 0x76, 0x01, 0xb2, 0x60, 0x8a, 0x05, 0x61, 0xb2,
	0x1d, 0x0a, 0x87, 0xe1, 0xd3, 0x9d, 0x59, 0xa4, 0x7f, 0x0a, 0x6d, 0x6d, 0x40, 0x21, 0x55, 0x98,
	0x70, 0x29, 0xd6, 0x03, 0x56, 0xc0, 0x8b, 0xf5, 0x95, 0x9c, 0xa9, 0xdc, 0xf5, 0x74, 0xcf, 0x08,
	0xef, 0xc3, 0xfb, 0x46, 0xe7, 0x55, 0x1c, 0x2e, 0xae, 0x53, 0x72, 0x76, 0x0a, 0xed, 0x48, 0xab,
	0xf4, 0xca, 0xac, 0x8c, 0x34, 0x7c, 0xd2, 0x70, 0x28, 0xfe, 0xb7, 0x57, 0x9b, 0x44, 0xc6, 0xce,
	0xa1, 0x49, 0xa5, 0x28, 0xc2, 0xdb, 0xfd, 0x8f, 0x7b, 0xe9, 0xa4, 0x57, 0x0f, 0xe9, 0xd1, 0xec,
	0x6c, 0x24, 0x73, 0xbd, 0x16, 0x45, 0x2c, 0x55, 0x2d, 0xce, 0xbe, 0x97, 0xf8, 0x0d, 0xae, 0x8d,
	0xc3, 0x43, 0x51, 0x61, 0x53, 0x69, 0xf9, 0x5d, 0x10, 0x27, 0x1d, 0xdf, 0x8c, 0x58, 0xc4, 0xba,
	0xe0, 0xa3, 0xd6, 0x9d, 0x83, 0x53, 0xef, 0xac, 0xdd, 0x7f, 0x44, 0x32, 0x23, 0xad, 0x95, 0x1e,
	0x84, 0x0b, 0x41, 0x03, 0x27, 0x97, 0x00, 0x1b, 0x21, 0x76, 0x0c, 0xfe, 0x02, 0xd7, 0xb6, 0x4e,
	0xf4, 0xc9, 0x38, 0x34, 0x6f, 0x83, 0x64, 0x85, 0x46, 0xd0, 0x66, 0x20, 0x37, 0xd7, 0x32, 0xce,
	0x45, 0x31, 0xf4, 0x65, 0xe3, 0x0b, 0x8f, 0x7f, 0x04, 0x1f, 0x1a, 0xff, 0x2f, 0x30, 0x1f, 0xce,
	0x11, 0xf5, 0x78, 0xb5, 0x14, 0x78, 0xc3, 0x7f, 0xda, 0xa5, 0xc7, 0xf9, 0x94, 0x56, 0x12, 0x5a,
	0x68, 0xc5, 0x2a, 0xcc, 0x9e, 0xc3, 0xd1, 0x6c, 0x15, 0x27, 0x51, 0x19, 0x6f, 0x37, 0xa3, 0x4e,
	0xf2, 0xc7, 0x70, 0x64, 0x12, 0x1b, 0x82, 0x94, 0x7e, 0x70, 0x09, 0x2a, 0xf1, 0xdb, 0x6b, 0xfc,
	0x0c, 0x4f, 0x37, 0x29, 0xc7, 0xab, 0xe5, 0x70, 0x1e, 0xc8, 0x19, 0x92, 0xff, 0x0e, 0x3c, 0x34,
	0xa1, 0x9b, 0x3b, 0x68, 0xe1, 0xff, 0xcc, 0x7c, 0x5c, 0x1e, 0x08, 0x45, 0x57, 0x93, 0xec, 0x4f,
	0x6b, 0x4c, 0xe9, 0x5f, 0xa9, 0xe4, 0x6b, 0xf5, 0xab, 0xac, 0xfc, 0x5b, 0x6c, 0x6e, 0x03, 0xea,
	0x5b, 0xd4, 0x74, 0x28, 0xad, 0x84, 0xc3, 0x90, 0x3f, 0x94, 0x91, 0x19, 0xf4, 0x0b, 0x7f, 0x16,
	0x72, 0x06, 0xc7, 0x8e, 0xce, 0x30, 0x22, 0xed, 0xf9, 0x16, 0xf7, 0xee, 0xd4, 0x3f, 0xb5, 0xb7,
	0x74, 0xa8, 0x92, 0x04, 0x43, 0xbb, 0x76, 0xf6, 0x04, 0x9a, 0x6a, 0xf2, 0x4b, 0x55, 0xcb, 0x02,
	0xf0, 0xc9, 0x4e, 0x2c, 0xf9, 0x7a, 0x06, 0xad, 0x2c, 0x0f, 0xb4, 0xb9, 0x8d, 0x26, 0xde, 0x17,
	0x1b, 0xc2, 0x55, 0x6e, 0x98, 0xb1, 0x12, 0x6e, 0x34, 0x7c, 0x57, 0xe3, 0xab, 0x1d, 0x0d, 0xda,
	0xdd, 0x33, 0x68, 0xce, 0x94, 0x8a, 0x8a, 0x7e, 0xd1, 0xee, 0x33, 0x3a, 0xf3, 0x2f, 0x88, 0xa8,
	0x0e, 0x80, 0x28, 0x02, 0xf8, 0x67, 0xd0, 0xd9, 0x9a, 0x3f, 0x0c, 0x64, 0x88, 0xc9, 0xfe, 0x55,
	0xf5, 0xf7, 0xcc, 0xb0, 0xdd, 0x52, 0x63, 0xb6, 0x4a, 0x72, 0xdb, 0xdf, 0x2c, 0xe2, 0x63, 0x78,
	0x62, 0xe6, 0x0c, 0xd2, 0x34, 0x59, 0x5f, 0x2a, 0xfd, 0x12, 0x93, 0xd4, 0xf6, 0xc4, 0x39, 0x26,
	0x29, 0xb5, 0xbc, 0x4a, 0xc6, 0x61, 0x28, 0x5f, 0xa6, 0x56, 0x3a, 0x2c, 0xf7, 0xc8, 0x22, 0x2e,
	0xef, 0xc9, 0xb7, 0xab, 0xdf, 0x2c, 0xf5, 0xb7, 0xde, 0x88, 0xc6, 0xf6, 0x1b, 0xb1, 0xe5, 0xc3,
	0xdf, 0xf6, 0xc1, 0x7f, 0xf7, 0xee, 0x11, 0xa4, 0x42, 0x3f, 0x87, 0x23, 0x8d, 0x37, 0x2f, 0xb7,
	0xd7, 0x50, 0x27, 0x8b, 0x26, 0x6e, 0x88, 0x71, 0x60, 0x37, 0xb6, 0x25, 0x5c, 0xca, 0x7d, 0x12,
	0xfd, 0xfa, 0x93, 0xb8, 0x29, 0xc1, 0x81, 0x5b, 0x02, 0x76, 0x5e, 0xe5, 0x24, 0x91, 0x4e, 0xd3,
	0x6c, 0xf4, 0x07, 0xb4, 0xd1, 0x17, 0x3a, 0xc6, 0xa9, 0x51, 0x96, 0x53, 0x25, 0xdc, 0x28, 0xfe,
	0x9b, 0xdd, 0xbb, 0x41, 0xb6, 0xa8, 0x76, 0x81, 0x0a, 0x64, 0x5f, 0xe5, 0x38, 0x1b, 0xcc, 0x34,
	0x96, 0x8f, 0x53, 0x09, 0x77, 0x17, 0xd9, 0xd8, 0xb3, 0x48, 0xaa, 0xd8, 0xeb, 0xda, 0x32, 0x5c,
	0x8a, 0xbf, 0xf1, 0xf6, 0xc8, 0xd3, 0xd6, 0xbd, 0x73, 0x79, 0x6a, 0x08, 0x48, 0xbf, 0x0f, 0x23,
	0xfb, 0x9a, 0xb4, 0x44, 0x85, 0xf9, 0x7c, 0x8f, 0x33, 0xdb, 0x2a, 0xf7, 0x38, 0xab, 0x1f, 0x9b,
	0xc6, 0xce, 0xf1, 0x65, 0x70, 0x20, 0x03, 0xdb, 0x43, 0x5a, 0xc2, 0x7c, 0xf3, 0xdc, 0xb6, 0x2a,
	0xf3, 0x66, 0x0d, 0xa2, 0xc8, 0x2a, 0xec, 0xf9, 0x21, 0xaa, 0x2e, 0x72, 0xe3, 0x3f, 0x2e, 0x32,
	0xb5, 0x95, 0x20, 0x8a, 0x5e, 0x17, 0x47, 0xa5, 0x58, 0xfd, 0x86, 0xb8, 0x38, 0xfe, 0xe3, 0xae,
	0xeb, 0xfd, 0x79, 0xd7, 0xf5, 0xfe, 0xba, 0xeb, 0x7a, 0x6f, 0xfe, 0xe9, 0xbe, 0x37, 0x79, 0x60,
	0xfe, 0xd0, 0xce, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xef, 0x52, 0x77, 0x1a, 0xc2, 0x09, 0x00,
	0x00,
}
