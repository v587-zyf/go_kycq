// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: applets.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入小程序
type EnterAppletsReq struct {
	AppletsType int32 `protobuf:"varint,1,opt,name=appletsType,proto3" json:"appletsType,omitempty"`
}

func (m *EnterAppletsReq) Reset()                    { *m = EnterAppletsReq{} }
func (m *EnterAppletsReq) String() string            { return proto.CompactTextString(m) }
func (*EnterAppletsReq) ProtoMessage()               {}
func (*EnterAppletsReq) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{0} }

func (m *EnterAppletsReq) GetAppletsType() int32 {
	if m != nil {
		return m.AppletsType
	}
	return 0
}

// 小程序体力推送
type AppletsEnergyNtf struct {
	Energy     int32 `protobuf:"varint,1,opt,name=energy,proto3" json:"energy,omitempty"`
	ResumeTime int64 `protobuf:"varint,2,opt,name=ResumeTime,proto3" json:"ResumeTime,omitempty"`
}

func (m *AppletsEnergyNtf) Reset()                    { *m = AppletsEnergyNtf{} }
func (m *AppletsEnergyNtf) String() string            { return proto.CompactTextString(m) }
func (*AppletsEnergyNtf) ProtoMessage()               {}
func (*AppletsEnergyNtf) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{1} }

func (m *AppletsEnergyNtf) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *AppletsEnergyNtf) GetResumeTime() int64 {
	if m != nil {
		return m.ResumeTime
	}
	return 0
}

// 领取魔法射击杀怪奖励
type AppletsReceiveReq struct {
	ReceiveId int32 `protobuf:"varint,1,opt,name=receiveId,proto3" json:"receiveId,omitempty"`
}

func (m *AppletsReceiveReq) Reset()                    { *m = AppletsReceiveReq{} }
func (m *AppletsReceiveReq) String() string            { return proto.CompactTextString(m) }
func (*AppletsReceiveReq) ProtoMessage()               {}
func (*AppletsReceiveReq) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{2} }

func (m *AppletsReceiveReq) GetReceiveId() int32 {
	if m != nil {
		return m.ReceiveId
	}
	return 0
}

type AppletsReceiveAck struct {
	ReceiveId int32           `protobuf:"varint,1,opt,name=receiveId,proto3" json:"receiveId,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *AppletsReceiveAck) Reset()                    { *m = AppletsReceiveAck{} }
func (m *AppletsReceiveAck) String() string            { return proto.CompactTextString(m) }
func (*AppletsReceiveAck) ProtoMessage()               {}
func (*AppletsReceiveAck) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{3} }

func (m *AppletsReceiveAck) GetReceiveId() int32 {
	if m != nil {
		return m.ReceiveId
	}
	return 0
}

func (m *AppletsReceiveAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 魔法射击定时奖励获取
type CronGetAwardReq struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *CronGetAwardReq) Reset()                    { *m = CronGetAwardReq{} }
func (m *CronGetAwardReq) String() string            { return proto.CompactTextString(m) }
func (*CronGetAwardReq) ProtoMessage()               {}
func (*CronGetAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{4} }

func (m *CronGetAwardReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CronGetAwardReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type CronGetAwardAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *CronGetAwardAck) Reset()                    { *m = CronGetAwardAck{} }
func (m *CronGetAwardAck) String() string            { return proto.CompactTextString(m) }
func (*CronGetAwardAck) ProtoMessage()               {}
func (*CronGetAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{5} }

func (m *CronGetAwardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 通关奖励
type EndResultReq struct {
	AppletsType int32 `protobuf:"varint,1,opt,name=appletsType,proto3" json:"appletsType,omitempty"`
	Id          int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EndResultReq) Reset()                    { *m = EndResultReq{} }
func (m *EndResultReq) String() string            { return proto.CompactTextString(m) }
func (*EndResultReq) ProtoMessage()               {}
func (*EndResultReq) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{6} }

func (m *EndResultReq) GetAppletsType() int32 {
	if m != nil {
		return m.AppletsType
	}
	return 0
}

func (m *EndResultReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EndResultAck struct {
	AppletsType int32           `protobuf:"varint,1,opt,name=appletsType,proto3" json:"appletsType,omitempty"`
	Energy      int32           `protobuf:"varint,2,opt,name=energy,proto3" json:"energy,omitempty"`
	Id          int32           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Goods       *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *EndResultAck) Reset()                    { *m = EndResultAck{} }
func (m *EndResultAck) String() string            { return proto.CompactTextString(m) }
func (*EndResultAck) ProtoMessage()               {}
func (*EndResultAck) Descriptor() ([]byte, []int) { return fileDescriptorApplets, []int{7} }

func (m *EndResultAck) GetAppletsType() int32 {
	if m != nil {
		return m.AppletsType
	}
	return 0
}

func (m *EndResultAck) GetEnergy() int32 {
	if m != nil {
		return m.Energy
	}
	return 0
}

func (m *EndResultAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EndResultAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func init() {
	proto.RegisterType((*EnterAppletsReq)(nil), "pb.EnterAppletsReq")
	proto.RegisterType((*AppletsEnergyNtf)(nil), "pb.AppletsEnergyNtf")
	proto.RegisterType((*AppletsReceiveReq)(nil), "pb.AppletsReceiveReq")
	proto.RegisterType((*AppletsReceiveAck)(nil), "pb.AppletsReceiveAck")
	proto.RegisterType((*CronGetAwardReq)(nil), "pb.CronGetAwardReq")
	proto.RegisterType((*CronGetAwardAck)(nil), "pb.CronGetAwardAck")
	proto.RegisterType((*EndResultReq)(nil), "pb.EndResultReq")
	proto.RegisterType((*EndResultAck)(nil), "pb.EndResultAck")
}
func (m *EnterAppletsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterAppletsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppletsType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.AppletsType))
	}
	return i, nil
}

func (m *AppletsEnergyNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppletsEnergyNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Energy != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Energy))
	}
	if m.ResumeTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.ResumeTime))
	}
	return i, nil
}

func (m *AppletsReceiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppletsReceiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReceiveId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.ReceiveId))
	}
	return i, nil
}

func (m *AppletsReceiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppletsReceiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReceiveId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.ReceiveId))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *CronGetAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronGetAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Id))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *CronGetAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CronGetAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *EndResultReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndResultReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppletsType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.AppletsType))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *EndResultAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndResultAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppletsType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.AppletsType))
	}
	if m.Energy != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Energy))
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Id))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApplets(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintApplets(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EnterAppletsReq) Size() (n int) {
	var l int
	_ = l
	if m.AppletsType != 0 {
		n += 1 + sovApplets(uint64(m.AppletsType))
	}
	return n
}

func (m *AppletsEnergyNtf) Size() (n int) {
	var l int
	_ = l
	if m.Energy != 0 {
		n += 1 + sovApplets(uint64(m.Energy))
	}
	if m.ResumeTime != 0 {
		n += 1 + sovApplets(uint64(m.ResumeTime))
	}
	return n
}

func (m *AppletsReceiveReq) Size() (n int) {
	var l int
	_ = l
	if m.ReceiveId != 0 {
		n += 1 + sovApplets(uint64(m.ReceiveId))
	}
	return n
}

func (m *AppletsReceiveAck) Size() (n int) {
	var l int
	_ = l
	if m.ReceiveId != 0 {
		n += 1 + sovApplets(uint64(m.ReceiveId))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovApplets(uint64(l))
	}
	return n
}

func (m *CronGetAwardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApplets(uint64(m.Id))
	}
	if m.Index != 0 {
		n += 1 + sovApplets(uint64(m.Index))
	}
	return n
}

func (m *CronGetAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovApplets(uint64(l))
	}
	return n
}

func (m *EndResultReq) Size() (n int) {
	var l int
	_ = l
	if m.AppletsType != 0 {
		n += 1 + sovApplets(uint64(m.AppletsType))
	}
	if m.Id != 0 {
		n += 1 + sovApplets(uint64(m.Id))
	}
	return n
}

func (m *EndResultAck) Size() (n int) {
	var l int
	_ = l
	if m.AppletsType != 0 {
		n += 1 + sovApplets(uint64(m.AppletsType))
	}
	if m.Energy != 0 {
		n += 1 + sovApplets(uint64(m.Energy))
	}
	if m.Id != 0 {
		n += 1 + sovApplets(uint64(m.Id))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovApplets(uint64(l))
	}
	return n
}

func sovApplets(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApplets(x uint64) (n int) {
	return sovApplets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnterAppletsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterAppletsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterAppletsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppletsType", wireType)
			}
			m.AppletsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppletsType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppletsEnergyNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppletsEnergyNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppletsEnergyNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResumeTime", wireType)
			}
			m.ResumeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResumeTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppletsReceiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppletsReceiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppletsReceiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveId", wireType)
			}
			m.ReceiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppletsReceiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppletsReceiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppletsReceiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveId", wireType)
			}
			m.ReceiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiveId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronGetAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronGetAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronGetAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CronGetAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CronGetAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CronGetAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndResultReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndResultReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndResultReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppletsType", wireType)
			}
			m.AppletsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppletsType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndResultAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndResultAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndResultAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppletsType", wireType)
			}
			m.AppletsType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppletsType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energy", wireType)
			}
			m.Energy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Energy |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApplets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApplets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApplets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApplets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApplets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApplets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApplets
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApplets
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApplets(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApplets = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApplets   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("applets.proto", fileDescriptorApplets) }

var fileDescriptorApplets = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2c, 0x28, 0xc8,
	0x49, 0x2d, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x19, 0x73, 0xf1, 0xbb, 0xe6, 0x95, 0xa4, 0x16,
	0x39, 0x42, 0xd4, 0x05, 0xa5, 0x16, 0x0a, 0x29, 0x70, 0x71, 0x43, 0x75, 0x85, 0x54, 0x16, 0xa4,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x0b, 0x29, 0x79, 0x71, 0x09, 0x40, 0xd5, 0xbb,
	0xe6, 0xa5, 0x16, 0xa5, 0x57, 0xfa, 0x95, 0xa4, 0x09, 0x89, 0x71, 0xb1, 0xa5, 0x82, 0x39, 0x50,
	0x0d, 0x50, 0x9e, 0x90, 0x1c, 0x17, 0x57, 0x50, 0x6a, 0x71, 0x69, 0x6e, 0x6a, 0x48, 0x66, 0x6e,
	0xaa, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x73, 0x10, 0x92, 0x88, 0x92, 0x21, 0x97, 0x20, 0xdc, 0xee,
	0xe4, 0xd4, 0xcc, 0xb2, 0x54, 0x90, 0x13, 0x64, 0xb8, 0x38, 0x8b, 0x20, 0x3c, 0xcf, 0x14, 0xa8,
	0x79, 0x08, 0x01, 0xa5, 0x68, 0x74, 0x2d, 0x8e, 0xc9, 0xd9, 0xf8, 0xb5, 0x08, 0x69, 0x70, 0xb1,
	0xa6, 0xe7, 0xe7, 0xa7, 0x14, 0x83, 0x1d, 0xc0, 0x6d, 0x24, 0xa4, 0x57, 0x90, 0xa4, 0xe7, 0x0e,
	0x12, 0x70, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0xf5, 0x2b, 0x49, 0x0b, 0x82, 0x28, 0x50, 0x32, 0xe7,
	0xe2, 0x77, 0x2e, 0xca, 0xcf, 0x73, 0x4f, 0x2d, 0x71, 0x2c, 0x4f, 0x2c, 0x4a, 0x01, 0xb9, 0x86,
	0x8f, 0x8b, 0x29, 0x13, 0x66, 0x26, 0x53, 0x66, 0x8a, 0x90, 0x08, 0x17, 0x6b, 0x66, 0x5e, 0x4a,
	0x6a, 0x05, 0xd8, 0x30, 0xd6, 0x20, 0x08, 0x47, 0xc9, 0x1a, 0x55, 0x23, 0xc8, 0x4d, 0xc4, 0xdb,
	0xea, 0xc0, 0xc5, 0xe3, 0x9a, 0x97, 0x02, 0x0a, 0x96, 0x9c, 0x12, 0xa2, 0xe2, 0x00, 0xea, 0x28,
	0x26, 0x98, 0xa3, 0x94, 0x9a, 0x18, 0x91, 0x8c, 0x00, 0x59, 0x4e, 0xd8, 0x08, 0x44, 0x94, 0x31,
	0xa1, 0x44, 0x19, 0xc4, 0x68, 0x66, 0xb8, 0x7f, 0xe1, 0xde, 0x60, 0x21, 0xe0, 0x0d, 0x27, 0x81,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39,
	0x86, 0x24, 0x36, 0x70, 0x32, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xbe, 0x57, 0x11,
	0x89, 0x02, 0x00, 0x00,
}
