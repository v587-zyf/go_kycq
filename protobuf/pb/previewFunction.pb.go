// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: previewFunction.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PreviewFunctionLoadReq struct {
}

func (m *PreviewFunctionLoadReq) Reset()         { *m = PreviewFunctionLoadReq{} }
func (m *PreviewFunctionLoadReq) String() string { return proto.CompactTextString(m) }
func (*PreviewFunctionLoadReq) ProtoMessage()    {}
func (*PreviewFunctionLoadReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPreviewFunction, []int{0}
}

type PreviewFunctionLoadAck struct {
	HaveBuyIds   []int32 `protobuf:"varint,1,rep,packed,name=haveBuyIds" json:"haveBuyIds,omitempty"`
	HavePointIds []int32 `protobuf:"varint,2,rep,packed,name=havePointIds" json:"havePointIds,omitempty"`
}

func (m *PreviewFunctionLoadAck) Reset()         { *m = PreviewFunctionLoadAck{} }
func (m *PreviewFunctionLoadAck) String() string { return proto.CompactTextString(m) }
func (*PreviewFunctionLoadAck) ProtoMessage()    {}
func (*PreviewFunctionLoadAck) Descriptor() ([]byte, []int) {
	return fileDescriptorPreviewFunction, []int{1}
}

func (m *PreviewFunctionLoadAck) GetHaveBuyIds() []int32 {
	if m != nil {
		return m.HaveBuyIds
	}
	return nil
}

func (m *PreviewFunctionLoadAck) GetHavePointIds() []int32 {
	if m != nil {
		return m.HavePointIds
	}
	return nil
}

type PreviewFunctionGetReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PreviewFunctionGetReq) Reset()         { *m = PreviewFunctionGetReq{} }
func (m *PreviewFunctionGetReq) String() string { return proto.CompactTextString(m) }
func (*PreviewFunctionGetReq) ProtoMessage()    {}
func (*PreviewFunctionGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPreviewFunction, []int{2}
}

func (m *PreviewFunctionGetReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PreviewFunctionGetAck struct {
	Id           int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HaveBuyIds   []int32 `protobuf:"varint,2,rep,packed,name=haveBuyIds" json:"haveBuyIds,omitempty"`
	HavePointIds []int32 `protobuf:"varint,3,rep,packed,name=havePointIds" json:"havePointIds,omitempty"`
}

func (m *PreviewFunctionGetAck) Reset()         { *m = PreviewFunctionGetAck{} }
func (m *PreviewFunctionGetAck) String() string { return proto.CompactTextString(m) }
func (*PreviewFunctionGetAck) ProtoMessage()    {}
func (*PreviewFunctionGetAck) Descriptor() ([]byte, []int) {
	return fileDescriptorPreviewFunction, []int{3}
}

func (m *PreviewFunctionGetAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PreviewFunctionGetAck) GetHaveBuyIds() []int32 {
	if m != nil {
		return m.HaveBuyIds
	}
	return nil
}

func (m *PreviewFunctionGetAck) GetHavePointIds() []int32 {
	if m != nil {
		return m.HavePointIds
	}
	return nil
}

type PreviewFunctionPointReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PreviewFunctionPointReq) Reset()         { *m = PreviewFunctionPointReq{} }
func (m *PreviewFunctionPointReq) String() string { return proto.CompactTextString(m) }
func (*PreviewFunctionPointReq) ProtoMessage()    {}
func (*PreviewFunctionPointReq) Descriptor() ([]byte, []int) {
	return fileDescriptorPreviewFunction, []int{4}
}

func (m *PreviewFunctionPointReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PreviewFunctionPointAck struct {
	HavePointIds []int32 `protobuf:"varint,1,rep,packed,name=havePointIds" json:"havePointIds,omitempty"`
}

func (m *PreviewFunctionPointAck) Reset()         { *m = PreviewFunctionPointAck{} }
func (m *PreviewFunctionPointAck) String() string { return proto.CompactTextString(m) }
func (*PreviewFunctionPointAck) ProtoMessage()    {}
func (*PreviewFunctionPointAck) Descriptor() ([]byte, []int) {
	return fileDescriptorPreviewFunction, []int{5}
}

func (m *PreviewFunctionPointAck) GetHavePointIds() []int32 {
	if m != nil {
		return m.HavePointIds
	}
	return nil
}

func init() {
	proto.RegisterType((*PreviewFunctionLoadReq)(nil), "pb.PreviewFunctionLoadReq")
	proto.RegisterType((*PreviewFunctionLoadAck)(nil), "pb.PreviewFunctionLoadAck")
	proto.RegisterType((*PreviewFunctionGetReq)(nil), "pb.PreviewFunctionGetReq")
	proto.RegisterType((*PreviewFunctionGetAck)(nil), "pb.PreviewFunctionGetAck")
	proto.RegisterType((*PreviewFunctionPointReq)(nil), "pb.PreviewFunctionPointReq")
	proto.RegisterType((*PreviewFunctionPointAck)(nil), "pb.PreviewFunctionPointAck")
}
func (m *PreviewFunctionLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewFunctionLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *PreviewFunctionLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewFunctionLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HaveBuyIds) > 0 {
		dAtA2 := make([]byte, len(m.HaveBuyIds)*10)
		var j1 int
		for _, num1 := range m.HaveBuyIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.HavePointIds) > 0 {
		dAtA4 := make([]byte, len(m.HavePointIds)*10)
		var j3 int
		for _, num1 := range m.HavePointIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *PreviewFunctionGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewFunctionGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PreviewFunctionGetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewFunctionGetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(m.Id))
	}
	if len(m.HaveBuyIds) > 0 {
		dAtA6 := make([]byte, len(m.HaveBuyIds)*10)
		var j5 int
		for _, num1 := range m.HaveBuyIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.HavePointIds) > 0 {
		dAtA8 := make([]byte, len(m.HavePointIds)*10)
		var j7 int
		for _, num1 := range m.HavePointIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *PreviewFunctionPointReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewFunctionPointReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PreviewFunctionPointAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreviewFunctionPointAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HavePointIds) > 0 {
		dAtA10 := make([]byte, len(m.HavePointIds)*10)
		var j9 int
		for _, num1 := range m.HavePointIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPreviewFunction(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	return i, nil
}

func encodeVarintPreviewFunction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PreviewFunctionLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *PreviewFunctionLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HaveBuyIds) > 0 {
		l = 0
		for _, e := range m.HaveBuyIds {
			l += sovPreviewFunction(uint64(e))
		}
		n += 1 + sovPreviewFunction(uint64(l)) + l
	}
	if len(m.HavePointIds) > 0 {
		l = 0
		for _, e := range m.HavePointIds {
			l += sovPreviewFunction(uint64(e))
		}
		n += 1 + sovPreviewFunction(uint64(l)) + l
	}
	return n
}

func (m *PreviewFunctionGetReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPreviewFunction(uint64(m.Id))
	}
	return n
}

func (m *PreviewFunctionGetAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPreviewFunction(uint64(m.Id))
	}
	if len(m.HaveBuyIds) > 0 {
		l = 0
		for _, e := range m.HaveBuyIds {
			l += sovPreviewFunction(uint64(e))
		}
		n += 1 + sovPreviewFunction(uint64(l)) + l
	}
	if len(m.HavePointIds) > 0 {
		l = 0
		for _, e := range m.HavePointIds {
			l += sovPreviewFunction(uint64(e))
		}
		n += 1 + sovPreviewFunction(uint64(l)) + l
	}
	return n
}

func (m *PreviewFunctionPointReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPreviewFunction(uint64(m.Id))
	}
	return n
}

func (m *PreviewFunctionPointAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HavePointIds) > 0 {
		l = 0
		for _, e := range m.HavePointIds {
			l += sovPreviewFunction(uint64(e))
		}
		n += 1 + sovPreviewFunction(uint64(l)) + l
	}
	return n
}

func sovPreviewFunction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPreviewFunction(x uint64) (n int) {
	return sovPreviewFunction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PreviewFunctionLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewFunctionLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewFunctionLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPreviewFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPreviewFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviewFunctionLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewFunctionLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewFunctionLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HaveBuyIds = append(m.HaveBuyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPreviewFunction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPreviewFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HaveBuyIds = append(m.HaveBuyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveBuyIds", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HavePointIds = append(m.HavePointIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPreviewFunction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPreviewFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HavePointIds = append(m.HavePointIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HavePointIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPreviewFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPreviewFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviewFunctionGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewFunctionGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewFunctionGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreviewFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPreviewFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPreviewFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviewFunctionGetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewFunctionGetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewFunctionGetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreviewFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HaveBuyIds = append(m.HaveBuyIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPreviewFunction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPreviewFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HaveBuyIds = append(m.HaveBuyIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveBuyIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HavePointIds = append(m.HavePointIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPreviewFunction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPreviewFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HavePointIds = append(m.HavePointIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HavePointIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPreviewFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPreviewFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviewFunctionPointReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewFunctionPointReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewFunctionPointReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPreviewFunction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPreviewFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPreviewFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreviewFunctionPointAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreviewFunctionPointAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreviewFunctionPointAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HavePointIds = append(m.HavePointIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPreviewFunction
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPreviewFunction
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HavePointIds = append(m.HavePointIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HavePointIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPreviewFunction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPreviewFunction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPreviewFunction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPreviewFunction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPreviewFunction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPreviewFunction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPreviewFunction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPreviewFunction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPreviewFunction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPreviewFunction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPreviewFunction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("previewFunction.proto", fileDescriptorPreviewFunction) }

var fileDescriptorPreviewFunction = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0x4a, 0x2d,
	0xcb, 0x4c, 0x2d, 0x77, 0x2b, 0xcd, 0x4b, 0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe0, 0x12, 0x0b, 0x40, 0x95, 0xf4, 0xc9, 0x4f, 0x4c,
	0x09, 0x4a, 0x2d, 0x54, 0x8a, 0xc1, 0x2a, 0xe3, 0x98, 0x9c, 0x2d, 0x24, 0xc7, 0xc5, 0x95, 0x91,
	0x58, 0x96, 0xea, 0x54, 0x5a, 0xe9, 0x99, 0x52, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x1a, 0x84,
	0x24, 0x22, 0xa4, 0xc4, 0xc5, 0x03, 0xe2, 0x05, 0xe4, 0x67, 0xe6, 0x95, 0x80, 0x54, 0x30, 0x81,
	0x55, 0xa0, 0x88, 0x29, 0xa9, 0x73, 0x89, 0xa2, 0x99, 0xee, 0x9e, 0x5a, 0x12, 0x94, 0x5a, 0x28,
	0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0xc4, 0x94, 0x99, 0xa2,
	0x94, 0x8d, 0x4d, 0x21, 0xc8, 0x15, 0x68, 0x0a, 0xd1, 0x5c, 0xc5, 0x44, 0xd0, 0x55, 0xcc, 0x58,
	0x5c, 0xa5, 0xc9, 0x25, 0x8e, 0x66, 0x19, 0x58, 0x0a, 0x9b, 0xbb, 0x6c, 0xb1, 0x2b, 0x05, 0xb9,
	0x0c, 0xdd, 0x26, 0x46, 0x4c, 0x9b, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0x91, 0x62, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x38, 0x19, 0xdd, 0xa9, 0xad, 0x01, 0x00, 0x00,
}
