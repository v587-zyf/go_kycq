// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dailyRank.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 获取每日排行榜
type DailyRankLoadReq struct {
}

func (m *DailyRankLoadReq) Reset()                    { *m = DailyRankLoadReq{} }
func (m *DailyRankLoadReq) String() string            { return proto.CompactTextString(m) }
func (*DailyRankLoadReq) ProtoMessage()               {}
func (*DailyRankLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorDailyRank, []int{0} }

type DailyRankLoadAck struct {
	Ranks        []*RankInfo     `protobuf:"bytes,1,rep,name=ranks" json:"ranks,omitempty"`
	Self         int32           `protobuf:"varint,2,opt,name=self,proto3" json:"self,omitempty"`
	Type         int32           `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	SelfScore    int64           `protobuf:"varint,4,opt,name=selfScore,proto3" json:"selfScore,omitempty"`
	HaveGetIds   []int32         `protobuf:"varint,5,rep,packed,name=haveGetIds" json:"haveGetIds,omitempty"`
	BuyGiftInfos map[int32]int32 `protobuf:"bytes,6,rep,name=buyGiftInfos" json:"buyGiftInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *DailyRankLoadAck) Reset()                    { *m = DailyRankLoadAck{} }
func (m *DailyRankLoadAck) String() string            { return proto.CompactTextString(m) }
func (*DailyRankLoadAck) ProtoMessage()               {}
func (*DailyRankLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorDailyRank, []int{1} }

func (m *DailyRankLoadAck) GetRanks() []*RankInfo {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *DailyRankLoadAck) GetSelf() int32 {
	if m != nil {
		return m.Self
	}
	return 0
}

func (m *DailyRankLoadAck) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *DailyRankLoadAck) GetSelfScore() int64 {
	if m != nil {
		return m.SelfScore
	}
	return 0
}

func (m *DailyRankLoadAck) GetHaveGetIds() []int32 {
	if m != nil {
		return m.HaveGetIds
	}
	return nil
}

func (m *DailyRankLoadAck) GetBuyGiftInfos() map[int32]int32 {
	if m != nil {
		return m.BuyGiftInfos
	}
	return nil
}

type DailyRankGetMarkRewardReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DailyRankGetMarkRewardReq) Reset()         { *m = DailyRankGetMarkRewardReq{} }
func (m *DailyRankGetMarkRewardReq) String() string { return proto.CompactTextString(m) }
func (*DailyRankGetMarkRewardReq) ProtoMessage()    {}
func (*DailyRankGetMarkRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyRank, []int{2}
}

func (m *DailyRankGetMarkRewardReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DailyRankGetMarkRewardAck struct {
	Id         int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	HaveGetIds []int32 `protobuf:"varint,2,rep,packed,name=haveGetIds" json:"haveGetIds,omitempty"`
}

func (m *DailyRankGetMarkRewardAck) Reset()         { *m = DailyRankGetMarkRewardAck{} }
func (m *DailyRankGetMarkRewardAck) String() string { return proto.CompactTextString(m) }
func (*DailyRankGetMarkRewardAck) ProtoMessage()    {}
func (*DailyRankGetMarkRewardAck) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyRank, []int{3}
}

func (m *DailyRankGetMarkRewardAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DailyRankGetMarkRewardAck) GetHaveGetIds() []int32 {
	if m != nil {
		return m.HaveGetIds
	}
	return nil
}

type DailyRankBuyGiftReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DailyRankBuyGiftReq) Reset()                    { *m = DailyRankBuyGiftReq{} }
func (m *DailyRankBuyGiftReq) String() string            { return proto.CompactTextString(m) }
func (*DailyRankBuyGiftReq) ProtoMessage()               {}
func (*DailyRankBuyGiftReq) Descriptor() ([]byte, []int) { return fileDescriptorDailyRank, []int{4} }

func (m *DailyRankBuyGiftReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DailyRankBuyGiftAck struct {
	Id           int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyGiftInfos map[int32]int32 `protobuf:"bytes,2,rep,name=buyGiftInfos" json:"buyGiftInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *DailyRankBuyGiftAck) Reset()                    { *m = DailyRankBuyGiftAck{} }
func (m *DailyRankBuyGiftAck) String() string            { return proto.CompactTextString(m) }
func (*DailyRankBuyGiftAck) ProtoMessage()               {}
func (*DailyRankBuyGiftAck) Descriptor() ([]byte, []int) { return fileDescriptorDailyRank, []int{5} }

func (m *DailyRankBuyGiftAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DailyRankBuyGiftAck) GetBuyGiftInfos() map[int32]int32 {
	if m != nil {
		return m.BuyGiftInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*DailyRankLoadReq)(nil), "pb.DailyRankLoadReq")
	proto.RegisterType((*DailyRankLoadAck)(nil), "pb.DailyRankLoadAck")
	proto.RegisterType((*DailyRankGetMarkRewardReq)(nil), "pb.DailyRankGetMarkRewardReq")
	proto.RegisterType((*DailyRankGetMarkRewardAck)(nil), "pb.DailyRankGetMarkRewardAck")
	proto.RegisterType((*DailyRankBuyGiftReq)(nil), "pb.DailyRankBuyGiftReq")
	proto.RegisterType((*DailyRankBuyGiftAck)(nil), "pb.DailyRankBuyGiftAck")
}
func (m *DailyRankLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyRankLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DailyRankLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyRankLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, msg := range m.Ranks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDailyRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Self != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.Self))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.Type))
	}
	if m.SelfScore != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.SelfScore))
	}
	if len(m.HaveGetIds) > 0 {
		dAtA2 := make([]byte, len(m.HaveGetIds)*10)
		var j1 int
		for _, num1 := range m.HaveGetIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.BuyGiftInfos) > 0 {
		for k, _ := range m.BuyGiftInfos {
			dAtA[i] = 0x32
			i++
			v := m.BuyGiftInfos[k]
			mapSize := 1 + sovDailyRank(uint64(k)) + 1 + sovDailyRank(uint64(v))
			i = encodeVarintDailyRank(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintDailyRank(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintDailyRank(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *DailyRankGetMarkRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyRankGetMarkRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *DailyRankGetMarkRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyRankGetMarkRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.Id))
	}
	if len(m.HaveGetIds) > 0 {
		dAtA4 := make([]byte, len(m.HaveGetIds)*10)
		var j3 int
		for _, num1 := range m.HaveGetIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *DailyRankBuyGiftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyRankBuyGiftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *DailyRankBuyGiftAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyRankBuyGiftAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyRank(dAtA, i, uint64(m.Id))
	}
	if len(m.BuyGiftInfos) > 0 {
		for k, _ := range m.BuyGiftInfos {
			dAtA[i] = 0x12
			i++
			v := m.BuyGiftInfos[k]
			mapSize := 1 + sovDailyRank(uint64(k)) + 1 + sovDailyRank(uint64(v))
			i = encodeVarintDailyRank(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintDailyRank(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintDailyRank(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeVarintDailyRank(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DailyRankLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DailyRankLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovDailyRank(uint64(l))
		}
	}
	if m.Self != 0 {
		n += 1 + sovDailyRank(uint64(m.Self))
	}
	if m.Type != 0 {
		n += 1 + sovDailyRank(uint64(m.Type))
	}
	if m.SelfScore != 0 {
		n += 1 + sovDailyRank(uint64(m.SelfScore))
	}
	if len(m.HaveGetIds) > 0 {
		l = 0
		for _, e := range m.HaveGetIds {
			l += sovDailyRank(uint64(e))
		}
		n += 1 + sovDailyRank(uint64(l)) + l
	}
	if len(m.BuyGiftInfos) > 0 {
		for k, v := range m.BuyGiftInfos {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDailyRank(uint64(k)) + 1 + sovDailyRank(uint64(v))
			n += mapEntrySize + 1 + sovDailyRank(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DailyRankGetMarkRewardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDailyRank(uint64(m.Id))
	}
	return n
}

func (m *DailyRankGetMarkRewardAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDailyRank(uint64(m.Id))
	}
	if len(m.HaveGetIds) > 0 {
		l = 0
		for _, e := range m.HaveGetIds {
			l += sovDailyRank(uint64(e))
		}
		n += 1 + sovDailyRank(uint64(l)) + l
	}
	return n
}

func (m *DailyRankBuyGiftReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDailyRank(uint64(m.Id))
	}
	return n
}

func (m *DailyRankBuyGiftAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDailyRank(uint64(m.Id))
	}
	if len(m.BuyGiftInfos) > 0 {
		for k, v := range m.BuyGiftInfos {
			_ = k
			_ = v
			mapEntrySize := 1 + sovDailyRank(uint64(k)) + 1 + sovDailyRank(uint64(v))
			n += mapEntrySize + 1 + sovDailyRank(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDailyRank(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDailyRank(x uint64) (n int) {
	return sovDailyRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DailyRankLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyRankLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyRankLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDailyRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyRankLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyRankLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyRankLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &RankInfo{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			m.Self = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Self |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfScore", wireType)
			}
			m.SelfScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfScore |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HaveGetIds = append(m.HaveGetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDailyRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HaveGetIds = append(m.HaveGetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGetIds", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyGiftInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyGiftInfos == nil {
				m.BuyGiftInfos = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDailyRank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDailyRank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyGiftInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDailyRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyRankGetMarkRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyRankGetMarkRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyRankGetMarkRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyRankGetMarkRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyRankGetMarkRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyRankGetMarkRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.HaveGetIds = append(m.HaveGetIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDailyRank
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.HaveGetIds = append(m.HaveGetIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGetIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyRankBuyGiftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyRankBuyGiftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyRankBuyGiftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyRankBuyGiftAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyRankBuyGiftAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyRankBuyGiftAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyGiftInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuyGiftInfos == nil {
				m.BuyGiftInfos = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyRank
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDailyRank(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthDailyRank
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuyGiftInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDailyRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDailyRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDailyRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDailyRank
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDailyRank
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDailyRank(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDailyRank = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDailyRank   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dailyRank.proto", fileDescriptorDailyRank) }

var fileDescriptorDailyRank = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x4f, 0x4a, 0xc3, 0x40,
	0x18, 0xc5, 0x9d, 0x49, 0x53, 0xf0, 0xb3, 0x68, 0x1d, 0x5d, 0x8c, 0x45, 0x42, 0x08, 0x28, 0x11,
	0x21, 0x0b, 0xdd, 0x88, 0x1b, 0xb1, 0x28, 0xa5, 0x6a, 0x37, 0xe3, 0x09, 0x26, 0xcd, 0x14, 0x43,
	0xda, 0x4c, 0x4c, 0xd2, 0x4a, 0x6e, 0xe2, 0x15, 0x3c, 0x80, 0x77, 0x70, 0xe9, 0x11, 0xa4, 0x5e,
	0x44, 0x26, 0x89, 0xfd, 0x93, 0xd6, 0xa5, 0xbb, 0x2f, 0xef, 0x7b, 0x33, 0xef, 0xcd, 0x8f, 0xc0,
	0x8e, 0xc7, 0xfd, 0x61, 0xc6, 0x78, 0x18, 0x38, 0x51, 0x2c, 0x53, 0x49, 0x70, 0xe4, 0xb6, 0x1a,
	0x7d, 0x39, 0x1a, 0xc9, 0xb0, 0x50, 0x2c, 0x02, 0xcd, 0x9b, 0x5f, 0xd3, 0x83, 0xe4, 0x1e, 0x13,
	0xcf, 0xd6, 0x1b, 0xae, 0x88, 0xd7, 0xfd, 0x80, 0x58, 0xa0, 0xc7, 0x3c, 0x0c, 0x12, 0x8a, 0x4c,
	0xcd, 0xde, 0x3a, 0x6b, 0x38, 0x91, 0xeb, 0xa8, 0x7d, 0x37, 0x1c, 0x48, 0x56, 0xac, 0x08, 0x81,
	0x5a, 0x22, 0x86, 0x03, 0x8a, 0x4d, 0x64, 0xeb, 0x2c, 0x9f, 0x95, 0x96, 0x66, 0x91, 0xa0, 0x5a,
	0xa1, 0xa9, 0x99, 0x1c, 0xc2, 0xa6, 0xda, 0x3d, 0xf6, 0x65, 0x2c, 0x68, 0xcd, 0x44, 0xb6, 0xc6,
	0xe6, 0x02, 0x31, 0x00, 0x9e, 0xf8, 0x44, 0x74, 0x44, 0xda, 0xf5, 0x12, 0xaa, 0x9b, 0x9a, 0xad,
	0xb3, 0x05, 0x85, 0xdc, 0x41, 0xc3, 0x1d, 0x67, 0x1d, 0x7f, 0x90, 0xaa, 0xec, 0x84, 0xd6, 0xf3,
	0x42, 0xc7, 0xaa, 0x50, 0xb5, 0xb5, 0xd3, 0x5e, 0x30, 0xde, 0x86, 0x69, 0x9c, 0xb1, 0xa5, 0xb3,
	0xad, 0x2b, 0xd8, 0x5d, 0xb1, 0x90, 0x26, 0x68, 0x81, 0xc8, 0x28, 0xca, 0x1b, 0xab, 0x91, 0xec,
	0x83, 0x3e, 0xe1, 0xc3, 0xb1, 0x28, 0x5f, 0x56, 0x7c, 0x5c, 0xe2, 0x0b, 0x64, 0x9d, 0xc2, 0xc1,
	0x2c, 0xb4, 0x23, 0xd2, 0x1e, 0x8f, 0x03, 0x26, 0x5e, 0x78, 0xac, 0x40, 0x92, 0x6d, 0xc0, 0xbe,
	0x57, 0xde, 0x83, 0x7d, 0xcf, 0xba, 0xff, 0xcb, 0xac, 0x00, 0x57, 0xcc, 0x15, 0x0c, 0xb8, 0x8a,
	0xc1, 0x3a, 0x82, 0xbd, 0xd9, 0x65, 0xe5, 0x1b, 0xd6, 0x65, 0xbe, 0xa3, 0x55, 0xdf, 0xba, 0xb8,
	0x5e, 0x85, 0x2a, 0xce, 0xa9, 0x9e, 0x2c, 0x51, 0x9d, 0x1f, 0xff, 0x77, 0xb0, 0xed, 0xe6, 0xc7,
	0xd4, 0x40, 0x9f, 0x53, 0x03, 0x7d, 0x4d, 0x0d, 0xf4, 0xfa, 0x6d, 0x6c, 0xb8, 0xf5, 0xfc, 0x8f,
	0x3d, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x97, 0x65, 0x2b, 0xdc, 0xd6, 0x02, 0x00, 0x00,
}
