// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: monthCard.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 月卡购买
type MonthCardBuyReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MonthCardBuyReq) Reset()                    { *m = MonthCardBuyReq{} }
func (m *MonthCardBuyReq) String() string            { return proto.CompactTextString(m) }
func (*MonthCardBuyReq) ProtoMessage()               {}
func (*MonthCardBuyReq) Descriptor() ([]byte, []int) { return fileDescriptorMonthCard, []int{0} }

func (m *MonthCardBuyReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MonthCardBuyAck struct {
	Id            int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MonthCardType int32          `protobuf:"varint,2,opt,name=monthCardType,proto3" json:"monthCardType,omitempty"`
	MonthCard     *MonthCardUnit `protobuf:"bytes,3,opt,name=monthCard" json:"monthCard,omitempty"`
}

func (m *MonthCardBuyAck) Reset()                    { *m = MonthCardBuyAck{} }
func (m *MonthCardBuyAck) String() string            { return proto.CompactTextString(m) }
func (*MonthCardBuyAck) ProtoMessage()               {}
func (*MonthCardBuyAck) Descriptor() ([]byte, []int) { return fileDescriptorMonthCard, []int{1} }

func (m *MonthCardBuyAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MonthCardBuyAck) GetMonthCardType() int32 {
	if m != nil {
		return m.MonthCardType
	}
	return 0
}

func (m *MonthCardBuyAck) GetMonthCard() *MonthCardUnit {
	if m != nil {
		return m.MonthCard
	}
	return nil
}

// 月卡领取每日礼包
type MonthCardDailyRewardReq struct {
	MonthCardType int32 `protobuf:"varint,1,opt,name=monthCardType,proto3" json:"monthCardType,omitempty"`
}

func (m *MonthCardDailyRewardReq) Reset()                    { *m = MonthCardDailyRewardReq{} }
func (m *MonthCardDailyRewardReq) String() string            { return proto.CompactTextString(m) }
func (*MonthCardDailyRewardReq) ProtoMessage()               {}
func (*MonthCardDailyRewardReq) Descriptor() ([]byte, []int) { return fileDescriptorMonthCard, []int{2} }

func (m *MonthCardDailyRewardReq) GetMonthCardType() int32 {
	if m != nil {
		return m.MonthCardType
	}
	return 0
}

type MonthCardDailyRewardAck struct {
	MonthCardType int32           `protobuf:"varint,1,opt,name=monthCardType,proto3" json:"monthCardType,omitempty"`
	Goods         *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *MonthCardDailyRewardAck) Reset()                    { *m = MonthCardDailyRewardAck{} }
func (m *MonthCardDailyRewardAck) String() string            { return proto.CompactTextString(m) }
func (*MonthCardDailyRewardAck) ProtoMessage()               {}
func (*MonthCardDailyRewardAck) Descriptor() ([]byte, []int) { return fileDescriptorMonthCard, []int{3} }

func (m *MonthCardDailyRewardAck) GetMonthCardType() int32 {
	if m != nil {
		return m.MonthCardType
	}
	return 0
}

func (m *MonthCardDailyRewardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func init() {
	proto.RegisterType((*MonthCardBuyReq)(nil), "pb.MonthCardBuyReq")
	proto.RegisterType((*MonthCardBuyAck)(nil), "pb.MonthCardBuyAck")
	proto.RegisterType((*MonthCardDailyRewardReq)(nil), "pb.MonthCardDailyRewardReq")
	proto.RegisterType((*MonthCardDailyRewardAck)(nil), "pb.MonthCardDailyRewardAck")
}
func (m *MonthCardBuyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthCardBuyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MonthCardBuyAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthCardBuyAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.Id))
	}
	if m.MonthCardType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.MonthCardType))
	}
	if m.MonthCard != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.MonthCard.Size()))
		n1, err := m.MonthCard.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MonthCardDailyRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthCardDailyRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MonthCardType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.MonthCardType))
	}
	return i, nil
}

func (m *MonthCardDailyRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonthCardDailyRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MonthCardType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.MonthCardType))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMonthCard(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintMonthCard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MonthCardBuyReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMonthCard(uint64(m.Id))
	}
	return n
}

func (m *MonthCardBuyAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMonthCard(uint64(m.Id))
	}
	if m.MonthCardType != 0 {
		n += 1 + sovMonthCard(uint64(m.MonthCardType))
	}
	if m.MonthCard != nil {
		l = m.MonthCard.Size()
		n += 1 + l + sovMonthCard(uint64(l))
	}
	return n
}

func (m *MonthCardDailyRewardReq) Size() (n int) {
	var l int
	_ = l
	if m.MonthCardType != 0 {
		n += 1 + sovMonthCard(uint64(m.MonthCardType))
	}
	return n
}

func (m *MonthCardDailyRewardAck) Size() (n int) {
	var l int
	_ = l
	if m.MonthCardType != 0 {
		n += 1 + sovMonthCard(uint64(m.MonthCardType))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovMonthCard(uint64(l))
	}
	return n
}

func sovMonthCard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMonthCard(x uint64) (n int) {
	return sovMonthCard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MonthCardBuyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonthCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthCardBuyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthCardBuyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonthCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthCardBuyAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonthCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthCardBuyAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthCardBuyAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthCardType", wireType)
			}
			m.MonthCardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthCardType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonthCard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MonthCard == nil {
				m.MonthCard = &MonthCardUnit{}
			}
			if err := m.MonthCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonthCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthCardDailyRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonthCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthCardDailyRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthCardDailyRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthCardType", wireType)
			}
			m.MonthCardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthCardType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonthCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonthCardDailyRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonthCard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonthCardDailyRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonthCardDailyRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthCardType", wireType)
			}
			m.MonthCardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthCardType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonthCard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonthCard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonthCard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonthCard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonthCard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonthCard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMonthCard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMonthCard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMonthCard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMonthCard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonthCard   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("monthCard.proto", fileDescriptorMonthCard) }

var fileDescriptorMonthCard = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcd, 0xcf, 0x2b,
	0xc9, 0x70, 0x4e, 0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92,
	0xe2, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x29, 0x72, 0xf1, 0xfb, 0xc2, 0x14,
	0x39, 0x95, 0x56, 0x06, 0xa5, 0x16, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0x31, 0x65, 0xa6, 0x28, 0x55, 0xa0, 0x2a, 0x71, 0x4c, 0xce, 0x46, 0x57, 0x22,
	0xa4, 0xc2, 0xc5, 0x0b, 0xb7, 0x2a, 0xa4, 0xb2, 0x20, 0x55, 0x82, 0x09, 0x2c, 0x85, 0x2a, 0x28,
	0xa4, 0xcf, 0xc5, 0x09, 0x17, 0x90, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd4, 0x2b, 0x48,
	0xd2, 0x83, 0x9b, 0x1e, 0x9a, 0x97, 0x59, 0x12, 0x84, 0x50, 0xa3, 0x64, 0xcf, 0x25, 0x0e, 0x97,
	0x73, 0x49, 0xcc, 0xcc, 0xa9, 0x0c, 0x4a, 0x2d, 0x4f, 0x2c, 0x4a, 0x01, 0x39, 0x12, 0xc3, 0x46,
	0x46, 0x2c, 0x36, 0x2a, 0x65, 0x62, 0x37, 0x00, 0xe4, 0x05, 0xa2, 0x0c, 0x10, 0xd2, 0xe0, 0x62,
	0x4d, 0xcf, 0xcf, 0x4f, 0x29, 0x06, 0x7b, 0x88, 0xdb, 0x48, 0x08, 0xe4, 0x5c, 0x77, 0x90, 0x80,
	0x73, 0x46, 0x62, 0x5e, 0x7a, 0xaa, 0x5f, 0x49, 0x5a, 0x10, 0x44, 0x81, 0x93, 0xc0, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12,
	0x1b, 0x38, 0x84, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x22, 0x9a, 0xac, 0x86, 0x01,
	0x00, 0x00,
}
