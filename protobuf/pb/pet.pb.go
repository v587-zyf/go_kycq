// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pet.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 战宠激活
type PetActiveReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PetActiveReq) Reset()                    { *m = PetActiveReq{} }
func (m *PetActiveReq) String() string            { return proto.CompactTextString(m) }
func (*PetActiveReq) ProtoMessage()               {}
func (*PetActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{0} }

func (m *PetActiveReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PetActiveAck struct {
	Id      int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PetInfo *PetInfo `protobuf:"bytes,2,opt,name=petInfo" json:"petInfo,omitempty"`
}

func (m *PetActiveAck) Reset()                    { *m = PetActiveAck{} }
func (m *PetActiveAck) String() string            { return proto.CompactTextString(m) }
func (*PetActiveAck) ProtoMessage()               {}
func (*PetActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{1} }

func (m *PetActiveAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PetActiveAck) GetPetInfo() *PetInfo {
	if m != nil {
		return m.PetInfo
	}
	return nil
}

// 战宠升级
type PetUpLvReq struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemId  int32 `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ItemNum int32 `protobuf:"varint,3,opt,name=itemNum,proto3" json:"itemNum,omitempty"`
}

func (m *PetUpLvReq) Reset()                    { *m = PetUpLvReq{} }
func (m *PetUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*PetUpLvReq) ProtoMessage()               {}
func (*PetUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{2} }

func (m *PetUpLvReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PetUpLvReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *PetUpLvReq) GetItemNum() int32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

type PetUpLvAck struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Lv  int32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
	Exp int32 `protobuf:"varint,3,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *PetUpLvAck) Reset()                    { *m = PetUpLvAck{} }
func (m *PetUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*PetUpLvAck) ProtoMessage()               {}
func (*PetUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{3} }

func (m *PetUpLvAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PetUpLvAck) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *PetUpLvAck) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

// 战宠升阶
type PetUpGradeReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PetUpGradeReq) Reset()                    { *m = PetUpGradeReq{} }
func (m *PetUpGradeReq) String() string            { return proto.CompactTextString(m) }
func (*PetUpGradeReq) ProtoMessage()               {}
func (*PetUpGradeReq) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{4} }

func (m *PetUpGradeReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PetUpGradeAck struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Grade int32 `protobuf:"varint,2,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (m *PetUpGradeAck) Reset()                    { *m = PetUpGradeAck{} }
func (m *PetUpGradeAck) String() string            { return proto.CompactTextString(m) }
func (*PetUpGradeAck) ProtoMessage()               {}
func (*PetUpGradeAck) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{5} }

func (m *PetUpGradeAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PetUpGradeAck) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

// 战宠突破
type PetBreakReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PetBreakReq) Reset()                    { *m = PetBreakReq{} }
func (m *PetBreakReq) String() string            { return proto.CompactTextString(m) }
func (*PetBreakReq) ProtoMessage()               {}
func (*PetBreakReq) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{6} }

func (m *PetBreakReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PetBreakAck struct {
	Id    int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Break int32 `protobuf:"varint,2,opt,name=break,proto3" json:"break,omitempty"`
}

func (m *PetBreakAck) Reset()                    { *m = PetBreakAck{} }
func (m *PetBreakAck) String() string            { return proto.CompactTextString(m) }
func (*PetBreakAck) ProtoMessage()               {}
func (*PetBreakAck) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{7} }

func (m *PetBreakAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PetBreakAck) GetBreak() int32 {
	if m != nil {
		return m.Break
	}
	return 0
}

// 战宠出战、休息
type PetChangeWearReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *PetChangeWearReq) Reset()                    { *m = PetChangeWearReq{} }
func (m *PetChangeWearReq) String() string            { return proto.CompactTextString(m) }
func (*PetChangeWearReq) ProtoMessage()               {}
func (*PetChangeWearReq) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{8} }

func (m *PetChangeWearReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PetChangeWearAck struct {
	PetId int32 `protobuf:"varint,1,opt,name=petId,proto3" json:"petId,omitempty"`
}

func (m *PetChangeWearAck) Reset()                    { *m = PetChangeWearAck{} }
func (m *PetChangeWearAck) String() string            { return proto.CompactTextString(m) }
func (*PetChangeWearAck) ProtoMessage()               {}
func (*PetChangeWearAck) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{9} }

func (m *PetChangeWearAck) GetPetId() int32 {
	if m != nil {
		return m.PetId
	}
	return 0
}

// 战宠附体
type PetAppendageReq struct {
	PetId int32 `protobuf:"varint,1,opt,name=petId,proto3" json:"petId,omitempty"`
}

func (m *PetAppendageReq) Reset()                    { *m = PetAppendageReq{} }
func (m *PetAppendageReq) String() string            { return proto.CompactTextString(m) }
func (*PetAppendageReq) ProtoMessage()               {}
func (*PetAppendageReq) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{10} }

func (m *PetAppendageReq) GetPetId() int32 {
	if m != nil {
		return m.PetId
	}
	return 0
}

type PetAppendageAck struct {
	PetId int32 `protobuf:"varint,1,opt,name=petId,proto3" json:"petId,omitempty"`
	Lv    int32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *PetAppendageAck) Reset()                    { *m = PetAppendageAck{} }
func (m *PetAppendageAck) String() string            { return proto.CompactTextString(m) }
func (*PetAppendageAck) ProtoMessage()               {}
func (*PetAppendageAck) Descriptor() ([]byte, []int) { return fileDescriptorPet, []int{11} }

func (m *PetAppendageAck) GetPetId() int32 {
	if m != nil {
		return m.PetId
	}
	return 0
}

func (m *PetAppendageAck) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func init() {
	proto.RegisterType((*PetActiveReq)(nil), "pb.PetActiveReq")
	proto.RegisterType((*PetActiveAck)(nil), "pb.PetActiveAck")
	proto.RegisterType((*PetUpLvReq)(nil), "pb.PetUpLvReq")
	proto.RegisterType((*PetUpLvAck)(nil), "pb.PetUpLvAck")
	proto.RegisterType((*PetUpGradeReq)(nil), "pb.PetUpGradeReq")
	proto.RegisterType((*PetUpGradeAck)(nil), "pb.PetUpGradeAck")
	proto.RegisterType((*PetBreakReq)(nil), "pb.PetBreakReq")
	proto.RegisterType((*PetBreakAck)(nil), "pb.PetBreakAck")
	proto.RegisterType((*PetChangeWearReq)(nil), "pb.PetChangeWearReq")
	proto.RegisterType((*PetChangeWearAck)(nil), "pb.PetChangeWearAck")
	proto.RegisterType((*PetAppendageReq)(nil), "pb.PetAppendageReq")
	proto.RegisterType((*PetAppendageAck)(nil), "pb.PetAppendageAck")
}
func (m *PetActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PetActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	if m.PetInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.PetInfo.Size()))
		n1, err := m.PetInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PetUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.ItemId))
	}
	if m.ItemNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.ItemNum))
	}
	return i, nil
}

func (m *PetUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Lv))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *PetUpGradeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetUpGradeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PetUpGradeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetUpGradeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	if m.Grade != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Grade))
	}
	return i, nil
}

func (m *PetBreakReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetBreakReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PetBreakAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetBreakAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	if m.Break != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Break))
	}
	return i, nil
}

func (m *PetChangeWearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetChangeWearReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *PetChangeWearAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetChangeWearAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.PetId))
	}
	return i, nil
}

func (m *PetAppendageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetAppendageReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.PetId))
	}
	return i, nil
}

func (m *PetAppendageAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PetAppendageAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PetId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.PetId))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPet(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func encodeVarintPet(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PetActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	return n
}

func (m *PetActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	if m.PetInfo != nil {
		l = m.PetInfo.Size()
		n += 1 + l + sovPet(uint64(l))
	}
	return n
}

func (m *PetUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	if m.ItemId != 0 {
		n += 1 + sovPet(uint64(m.ItemId))
	}
	if m.ItemNum != 0 {
		n += 1 + sovPet(uint64(m.ItemNum))
	}
	return n
}

func (m *PetUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovPet(uint64(m.Lv))
	}
	if m.Exp != 0 {
		n += 1 + sovPet(uint64(m.Exp))
	}
	return n
}

func (m *PetUpGradeReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	return n
}

func (m *PetUpGradeAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	if m.Grade != 0 {
		n += 1 + sovPet(uint64(m.Grade))
	}
	return n
}

func (m *PetBreakReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	return n
}

func (m *PetBreakAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	if m.Break != 0 {
		n += 1 + sovPet(uint64(m.Break))
	}
	return n
}

func (m *PetChangeWearReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPet(uint64(m.Id))
	}
	return n
}

func (m *PetChangeWearAck) Size() (n int) {
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sovPet(uint64(m.PetId))
	}
	return n
}

func (m *PetAppendageReq) Size() (n int) {
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sovPet(uint64(m.PetId))
	}
	return n
}

func (m *PetAppendageAck) Size() (n int) {
	var l int
	_ = l
	if m.PetId != 0 {
		n += 1 + sovPet(uint64(m.PetId))
	}
	if m.Lv != 0 {
		n += 1 + sovPet(uint64(m.Lv))
	}
	return n
}

func sovPet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPet(x uint64) (n int) {
	return sovPet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PetActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PetInfo == nil {
				m.PetInfo = &PetInfo{}
			}
			if err := m.PetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNum", wireType)
			}
			m.ItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetUpGradeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetUpGradeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetUpGradeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetUpGradeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetUpGradeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetUpGradeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetBreakReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetBreakReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetBreakReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetBreakAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetBreakAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetBreakAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Break", wireType)
			}
			m.Break = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Break |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetChangeWearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetChangeWearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetChangeWearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetChangeWearAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetChangeWearAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetChangeWearAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			m.PetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetAppendageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetAppendageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetAppendageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			m.PetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PetAppendageAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PetAppendageAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PetAppendageAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PetId", wireType)
			}
			m.PetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PetId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPet(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPet   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("pet.proto", fileDescriptorPet) }

var fileDescriptorPet = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x2d, 0x69, 0x71, 0x5a, 0x6b, 0x59, 0x8a, 0x04, 0xc1, 0x58, 0x16, 0xc4, 0x9e,
	0x7a, 0xb0, 0x88, 0x37, 0xa1, 0x15, 0x91, 0x82, 0x94, 0x10, 0x10, 0xcf, 0x49, 0x33, 0xd6, 0xd0,
	0x26, 0x59, 0xc3, 0x1a, 0x7c, 0x14, 0x1f, 0xc9, 0xa3, 0x8f, 0x20, 0xf5, 0x45, 0x64, 0x37, 0x89,
	0xd6, 0xb0, 0xbd, 0xcd, 0x3f, 0xff, 0x9f, 0x6f, 0x32, 0x93, 0xc0, 0xbe, 0x40, 0x39, 0x12, 0x59,
	0x2a, 0x53, 0x46, 0x45, 0x70, 0xdc, 0x59, 0xa4, 0x71, 0x9c, 0x26, 0x45, 0x87, 0x3b, 0xd0, 0x71,
	0x51, 0x4e, 0x16, 0x32, 0xca, 0xd1, 0xc3, 0x17, 0xd6, 0x05, 0x1a, 0x85, 0x36, 0x19, 0x90, 0xa1,
	0xe5, 0xd1, 0x28, 0xe4, 0xb7, 0x5b, 0xfe, 0x64, 0xb1, 0xaa, 0xfb, 0xec, 0x0c, 0x5a, 0x02, 0xe5,
	0x2c, 0x79, 0x4a, 0x6d, 0x3a, 0x20, 0xc3, 0xf6, 0x45, 0x7b, 0x24, 0x82, 0x91, 0x5b, 0xb4, 0xbc,
	0xca, 0xe3, 0x73, 0x00, 0x17, 0xe5, 0x83, 0xb8, 0xcf, 0x0d, 0x43, 0xd8, 0x11, 0x34, 0x23, 0x89,
	0xf1, 0x2c, 0xd4, 0x0c, 0xcb, 0x2b, 0x15, 0xb3, 0xa1, 0xa5, 0xaa, 0xf9, 0x6b, 0x6c, 0x37, 0xb4,
	0x51, 0x49, 0x7e, 0xfd, 0xcb, 0x33, 0xbd, 0x54, 0x17, 0xe8, 0x3a, 0x2f, 0x59, 0x74, 0x9d, 0xb3,
	0x1e, 0x34, 0xf0, 0x4d, 0x94, 0x0c, 0x55, 0xf2, 0x53, 0x38, 0xd0, 0xcf, 0xdf, 0x65, 0x7e, 0x68,
	0xdc, 0xfb, 0x72, 0x3b, 0x60, 0x9a, 0xd1, 0x07, 0x6b, 0xa9, 0xbc, 0x72, 0x4c, 0x21, 0xf8, 0x09,
	0xb4, 0x5d, 0x94, 0xd3, 0x0c, 0xfd, 0x95, 0x89, 0x3a, 0xfe, 0xb3, 0x77, 0x30, 0x03, 0xe5, 0x55,
	0x4c, 0x2d, 0x38, 0x87, 0x9e, 0x8b, 0xf2, 0xe6, 0xd9, 0x4f, 0x96, 0xf8, 0x88, 0x7e, 0x66, 0x02,
	0x0f, 0x6b, 0x19, 0x45, 0xef, 0x83, 0xa5, 0xce, 0x5f, 0xc5, 0x0a, 0xc1, 0xcf, 0xe1, 0x50, 0x7d,
	0x50, 0x21, 0x30, 0x09, 0xfd, 0xa5, 0xde, 0xdd, 0x1c, 0xbc, 0xfa, 0x1f, 0xdc, 0x49, 0xac, 0x5f,
	0x7b, 0xda, 0xfb, 0xd8, 0x38, 0xe4, 0x73, 0xe3, 0x90, 0xaf, 0x8d, 0x43, 0xde, 0xbf, 0x9d, 0xbd,
	0xa0, 0xa9, 0xff, 0xb5, 0xf1, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xac, 0x3a, 0x94, 0x8a,
	0x02, 0x00, 0x00,
}
