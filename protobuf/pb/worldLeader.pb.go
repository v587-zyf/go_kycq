// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: worldLeader.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoadWorldLeaderReq struct {
}

func (m *LoadWorldLeaderReq) Reset()                    { *m = LoadWorldLeaderReq{} }
func (m *LoadWorldLeaderReq) String() string            { return proto.CompactTextString(m) }
func (*LoadWorldLeaderReq) ProtoMessage()               {}
func (*LoadWorldLeaderReq) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{0} }

type LoadWorldLeaderAck struct {
	NowStageId             int32                      `protobuf:"varint,1,opt,name=nowStageId,proto3" json:"nowStageId,omitempty"`
	GuildJoinNum           int32                      `protobuf:"varint,2,opt,name=guildJoinNum,proto3" json:"guildJoinNum,omitempty"`
	BossHp                 int32                      `protobuf:"varint,3,opt,name=bossHp,proto3" json:"bossHp,omitempty"`
	WorldLeaderInfoByStage map[int32]*WorldLeaderInfo `protobuf:"bytes,4,rep,name=worldLeaderInfoByStage" json:"worldLeaderInfoByStage,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *LoadWorldLeaderAck) Reset()                    { *m = LoadWorldLeaderAck{} }
func (m *LoadWorldLeaderAck) String() string            { return proto.CompactTextString(m) }
func (*LoadWorldLeaderAck) ProtoMessage()               {}
func (*LoadWorldLeaderAck) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{1} }

func (m *LoadWorldLeaderAck) GetNowStageId() int32 {
	if m != nil {
		return m.NowStageId
	}
	return 0
}

func (m *LoadWorldLeaderAck) GetGuildJoinNum() int32 {
	if m != nil {
		return m.GuildJoinNum
	}
	return 0
}

func (m *LoadWorldLeaderAck) GetBossHp() int32 {
	if m != nil {
		return m.BossHp
	}
	return 0
}

func (m *LoadWorldLeaderAck) GetWorldLeaderInfoByStage() map[int32]*WorldLeaderInfo {
	if m != nil {
		return m.WorldLeaderInfoByStage
	}
	return nil
}

type WorldLeaderInfo struct {
	GuildJoinNum int32 `protobuf:"varint,1,opt,name=guildJoinNum,proto3" json:"guildJoinNum,omitempty"`
}

func (m *WorldLeaderInfo) Reset()                    { *m = WorldLeaderInfo{} }
func (m *WorldLeaderInfo) String() string            { return proto.CompactTextString(m) }
func (*WorldLeaderInfo) ProtoMessage()               {}
func (*WorldLeaderInfo) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{2} }

func (m *WorldLeaderInfo) GetGuildJoinNum() int32 {
	if m != nil {
		return m.GuildJoinNum
	}
	return 0
}

type GetWorldLeaderRankInfoReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *GetWorldLeaderRankInfoReq) Reset()         { *m = GetWorldLeaderRankInfoReq{} }
func (m *GetWorldLeaderRankInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetWorldLeaderRankInfoReq) ProtoMessage()    {}
func (*GetWorldLeaderRankInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptorWorldLeader, []int{3}
}

func (m *GetWorldLeaderRankInfoReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type GetWorldLeaderRankInfoAck struct {
	Ranks   []*WorldLeaderRankUnit `protobuf:"bytes,1,rep,name=ranks" json:"ranks,omitempty"`
	BossHp  int32                  `protobuf:"varint,2,opt,name=bossHp,proto3" json:"bossHp,omitempty"`
	StageId int32                  `protobuf:"varint,3,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *GetWorldLeaderRankInfoAck) Reset()         { *m = GetWorldLeaderRankInfoAck{} }
func (m *GetWorldLeaderRankInfoAck) String() string { return proto.CompactTextString(m) }
func (*GetWorldLeaderRankInfoAck) ProtoMessage()    {}
func (*GetWorldLeaderRankInfoAck) Descriptor() ([]byte, []int) {
	return fileDescriptorWorldLeader, []int{4}
}

func (m *GetWorldLeaderRankInfoAck) GetRanks() []*WorldLeaderRankUnit {
	if m != nil {
		return m.Ranks
	}
	return nil
}

func (m *GetWorldLeaderRankInfoAck) GetBossHp() int32 {
	if m != nil {
		return m.BossHp
	}
	return 0
}

func (m *GetWorldLeaderRankInfoAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 世界首领复活推送
type WorldLeaderStartNtf struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *WorldLeaderStartNtf) Reset()                    { *m = WorldLeaderStartNtf{} }
func (m *WorldLeaderStartNtf) String() string            { return proto.CompactTextString(m) }
func (*WorldLeaderStartNtf) ProtoMessage()               {}
func (*WorldLeaderStartNtf) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{5} }

func (m *WorldLeaderStartNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 世界首领进入校验
type WorldLeaderEnterReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *WorldLeaderEnterReq) Reset()                    { *m = WorldLeaderEnterReq{} }
func (m *WorldLeaderEnterReq) String() string            { return proto.CompactTextString(m) }
func (*WorldLeaderEnterReq) ProtoMessage()               {}
func (*WorldLeaderEnterReq) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{6} }

func (m *WorldLeaderEnterReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type WorldLeaderEnterAck struct {
	EnterState bool `protobuf:"varint,1,opt,name=enterState,proto3" json:"enterState,omitempty"`
}

func (m *WorldLeaderEnterAck) Reset()                    { *m = WorldLeaderEnterAck{} }
func (m *WorldLeaderEnterAck) String() string            { return proto.CompactTextString(m) }
func (*WorldLeaderEnterAck) ProtoMessage()               {}
func (*WorldLeaderEnterAck) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{7} }

func (m *WorldLeaderEnterAck) GetEnterState() bool {
	if m != nil {
		return m.EnterState
	}
	return false
}

// 结束奖励推送
type WorldLeaderEndRewardNtf struct {
	StageId int32          `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Owner   *BriefUserInfo `protobuf:"bytes,2,opt,name=owner" json:"owner,omitempty"`
	Rank    int32          `protobuf:"varint,3,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *WorldLeaderEndRewardNtf) Reset()         { *m = WorldLeaderEndRewardNtf{} }
func (m *WorldLeaderEndRewardNtf) String() string { return proto.CompactTextString(m) }
func (*WorldLeaderEndRewardNtf) ProtoMessage()    {}
func (*WorldLeaderEndRewardNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorWorldLeader, []int{8}
}

func (m *WorldLeaderEndRewardNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *WorldLeaderEndRewardNtf) GetOwner() *BriefUserInfo {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *WorldLeaderEndRewardNtf) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type WorldLeaderRankUnit struct {
	Rank       int32  `protobuf:"varint,1,opt,name=rank,proto3" json:"rank,omitempty"`
	GuildId    int32  `protobuf:"varint,2,opt,name=guildId,proto3" json:"guildId,omitempty"`
	GuildName  string `protobuf:"bytes,3,opt,name=guildName,proto3" json:"guildName,omitempty"`
	Score      int64  `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	ServerId   int32  `protobuf:"varint,5,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerName string `protobuf:"bytes,6,opt,name=serverName,proto3" json:"serverName,omitempty"`
}

func (m *WorldLeaderRankUnit) Reset()                    { *m = WorldLeaderRankUnit{} }
func (m *WorldLeaderRankUnit) String() string            { return proto.CompactTextString(m) }
func (*WorldLeaderRankUnit) ProtoMessage()               {}
func (*WorldLeaderRankUnit) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{9} }

func (m *WorldLeaderRankUnit) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *WorldLeaderRankUnit) GetGuildId() int32 {
	if m != nil {
		return m.GuildId
	}
	return 0
}

func (m *WorldLeaderRankUnit) GetGuildName() string {
	if m != nil {
		return m.GuildName
	}
	return ""
}

func (m *WorldLeaderRankUnit) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *WorldLeaderRankUnit) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *WorldLeaderRankUnit) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

// 血量推送
type WorldLeaderBossHpNtf struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	BossHp  int32 `protobuf:"varint,2,opt,name=bossHp,proto3" json:"bossHp,omitempty"`
}

func (m *WorldLeaderBossHpNtf) Reset()                    { *m = WorldLeaderBossHpNtf{} }
func (m *WorldLeaderBossHpNtf) String() string            { return proto.CompactTextString(m) }
func (*WorldLeaderBossHpNtf) ProtoMessage()               {}
func (*WorldLeaderBossHpNtf) Descriptor() ([]byte, []int) { return fileDescriptorWorldLeader, []int{10} }

func (m *WorldLeaderBossHpNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *WorldLeaderBossHpNtf) GetBossHp() int32 {
	if m != nil {
		return m.BossHp
	}
	return 0
}

func init() {
	proto.RegisterType((*LoadWorldLeaderReq)(nil), "pb.LoadWorldLeaderReq")
	proto.RegisterType((*LoadWorldLeaderAck)(nil), "pb.LoadWorldLeaderAck")
	proto.RegisterType((*WorldLeaderInfo)(nil), "pb.WorldLeaderInfo")
	proto.RegisterType((*GetWorldLeaderRankInfoReq)(nil), "pb.GetWorldLeaderRankInfoReq")
	proto.RegisterType((*GetWorldLeaderRankInfoAck)(nil), "pb.GetWorldLeaderRankInfoAck")
	proto.RegisterType((*WorldLeaderStartNtf)(nil), "pb.WorldLeaderStartNtf")
	proto.RegisterType((*WorldLeaderEnterReq)(nil), "pb.WorldLeaderEnterReq")
	proto.RegisterType((*WorldLeaderEnterAck)(nil), "pb.WorldLeaderEnterAck")
	proto.RegisterType((*WorldLeaderEndRewardNtf)(nil), "pb.WorldLeaderEndRewardNtf")
	proto.RegisterType((*WorldLeaderRankUnit)(nil), "pb.WorldLeaderRankUnit")
	proto.RegisterType((*WorldLeaderBossHpNtf)(nil), "pb.WorldLeaderBossHpNtf")
}
func (m *LoadWorldLeaderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadWorldLeaderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LoadWorldLeaderAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadWorldLeaderAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NowStageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.NowStageId))
	}
	if m.GuildJoinNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.GuildJoinNum))
	}
	if m.BossHp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.BossHp))
	}
	if len(m.WorldLeaderInfoByStage) > 0 {
		for k, _ := range m.WorldLeaderInfoByStage {
			dAtA[i] = 0x22
			i++
			v := m.WorldLeaderInfoByStage[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovWorldLeader(uint64(msgSize))
			}
			mapSize := 1 + sovWorldLeader(uint64(k)) + msgSize
			i = encodeVarintWorldLeader(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintWorldLeader(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintWorldLeader(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *WorldLeaderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GuildJoinNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.GuildJoinNum))
	}
	return i, nil
}

func (m *GetWorldLeaderRankInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorldLeaderRankInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *GetWorldLeaderRankInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetWorldLeaderRankInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, msg := range m.Ranks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintWorldLeader(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BossHp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.BossHp))
	}
	if m.StageId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *WorldLeaderStartNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderStartNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *WorldLeaderEnterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderEnterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *WorldLeaderEnterAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderEnterAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EnterState {
		dAtA[i] = 0x8
		i++
		if m.EnterState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WorldLeaderEndRewardNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderEndRewardNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.StageId))
	}
	if m.Owner != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.Owner.Size()))
		n2, err := m.Owner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Rank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.Rank))
	}
	return i, nil
}

func (m *WorldLeaderRankUnit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderRankUnit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.Rank))
	}
	if m.GuildId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.GuildId))
	}
	if len(m.GuildName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(len(m.GuildName)))
		i += copy(dAtA[i:], m.GuildName)
	}
	if m.Score != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.Score))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.ServerId))
	}
	if len(m.ServerName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(len(m.ServerName)))
		i += copy(dAtA[i:], m.ServerName)
	}
	return i, nil
}

func (m *WorldLeaderBossHpNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WorldLeaderBossHpNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.StageId))
	}
	if m.BossHp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWorldLeader(dAtA, i, uint64(m.BossHp))
	}
	return i, nil
}

func encodeVarintWorldLeader(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LoadWorldLeaderReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LoadWorldLeaderAck) Size() (n int) {
	var l int
	_ = l
	if m.NowStageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.NowStageId))
	}
	if m.GuildJoinNum != 0 {
		n += 1 + sovWorldLeader(uint64(m.GuildJoinNum))
	}
	if m.BossHp != 0 {
		n += 1 + sovWorldLeader(uint64(m.BossHp))
	}
	if len(m.WorldLeaderInfoByStage) > 0 {
		for k, v := range m.WorldLeaderInfoByStage {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovWorldLeader(uint64(l))
			}
			mapEntrySize := 1 + sovWorldLeader(uint64(k)) + l
			n += mapEntrySize + 1 + sovWorldLeader(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *WorldLeaderInfo) Size() (n int) {
	var l int
	_ = l
	if m.GuildJoinNum != 0 {
		n += 1 + sovWorldLeader(uint64(m.GuildJoinNum))
	}
	return n
}

func (m *GetWorldLeaderRankInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.StageId))
	}
	return n
}

func (m *GetWorldLeaderRankInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Ranks) > 0 {
		for _, e := range m.Ranks {
			l = e.Size()
			n += 1 + l + sovWorldLeader(uint64(l))
		}
	}
	if m.BossHp != 0 {
		n += 1 + sovWorldLeader(uint64(m.BossHp))
	}
	if m.StageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.StageId))
	}
	return n
}

func (m *WorldLeaderStartNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.StageId))
	}
	return n
}

func (m *WorldLeaderEnterReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.StageId))
	}
	return n
}

func (m *WorldLeaderEnterAck) Size() (n int) {
	var l int
	_ = l
	if m.EnterState {
		n += 2
	}
	return n
}

func (m *WorldLeaderEndRewardNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.StageId))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovWorldLeader(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovWorldLeader(uint64(m.Rank))
	}
	return n
}

func (m *WorldLeaderRankUnit) Size() (n int) {
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovWorldLeader(uint64(m.Rank))
	}
	if m.GuildId != 0 {
		n += 1 + sovWorldLeader(uint64(m.GuildId))
	}
	l = len(m.GuildName)
	if l > 0 {
		n += 1 + l + sovWorldLeader(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovWorldLeader(uint64(m.Score))
	}
	if m.ServerId != 0 {
		n += 1 + sovWorldLeader(uint64(m.ServerId))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovWorldLeader(uint64(l))
	}
	return n
}

func (m *WorldLeaderBossHpNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovWorldLeader(uint64(m.StageId))
	}
	if m.BossHp != 0 {
		n += 1 + sovWorldLeader(uint64(m.BossHp))
	}
	return n
}

func sovWorldLeader(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWorldLeader(x uint64) (n int) {
	return sovWorldLeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoadWorldLeaderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadWorldLeaderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadWorldLeaderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadWorldLeaderAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadWorldLeaderAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadWorldLeaderAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowStageId", wireType)
			}
			m.NowStageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowStageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildJoinNum", wireType)
			}
			m.GuildJoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildJoinNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossHp", wireType)
			}
			m.BossHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossHp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorldLeaderInfoByStage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorldLeader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorldLeaderInfoByStage == nil {
				m.WorldLeaderInfoByStage = make(map[int32]*WorldLeaderInfo)
			}
			var mapkey int32
			var mapvalue *WorldLeaderInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowWorldLeader
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorldLeader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowWorldLeader
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthWorldLeader
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthWorldLeader
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &WorldLeaderInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipWorldLeader(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthWorldLeader
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorldLeaderInfoByStage[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildJoinNum", wireType)
			}
			m.GuildJoinNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildJoinNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorldLeaderRankInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorldLeaderRankInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorldLeaderRankInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetWorldLeaderRankInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetWorldLeaderRankInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetWorldLeaderRankInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorldLeader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranks = append(m.Ranks, &WorldLeaderRankUnit{})
			if err := m.Ranks[len(m.Ranks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossHp", wireType)
			}
			m.BossHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossHp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderStartNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderStartNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderStartNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderEnterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderEnterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderEnterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderEnterAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderEnterAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderEnterAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnterState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnterState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderEndRewardNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderEndRewardNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderEndRewardNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorldLeader
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &BriefUserInfo{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderRankUnit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderRankUnit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderRankUnit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildId", wireType)
			}
			m.GuildId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GuildId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuildName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorldLeader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuildName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorldLeader
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WorldLeaderBossHpNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WorldLeaderBossHpNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WorldLeaderBossHpNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossHp", wireType)
			}
			m.BossHp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossHp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorldLeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorldLeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorldLeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorldLeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorldLeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWorldLeader
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorldLeader
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorldLeader(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorldLeader = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorldLeader   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("worldLeader.proto", fileDescriptorWorldLeader) }

var fileDescriptorWorldLeader = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xc1, 0x6e, 0xda, 0x40,
	0x10, 0xed, 0xe2, 0x98, 0x26, 0x93, 0x48, 0x4d, 0x36, 0x28, 0x71, 0x69, 0x65, 0x45, 0xbe, 0x94,
	0x1e, 0x4a, 0x25, 0x2a, 0xa4, 0xaa, 0xb7, 0x22, 0x45, 0x0d, 0x55, 0xc4, 0xc1, 0x28, 0xca, 0xad,
	0xd2, 0x82, 0x97, 0x88, 0x02, 0xbb, 0xce, 0x7a, 0x09, 0x42, 0xea, 0x87, 0xf4, 0x3f, 0x7a, 0xed,
	0x07, 0xf4, 0xd8, 0x4f, 0xa8, 0xe8, 0x8f, 0x54, 0x3b, 0x36, 0x61, 0x8d, 0x8b, 0x6f, 0x33, 0xb3,
	0xf3, 0x9e, 0xdf, 0xbe, 0xb7, 0x00, 0x27, 0x0b, 0xa9, 0xa6, 0xd1, 0x35, 0x67, 0x11, 0x57, 0xcd,
	0x58, 0x49, 0x2d, 0x69, 0x25, 0x1e, 0xd4, 0x8f, 0x86, 0x72, 0x36, 0x93, 0x22, 0x9d, 0x04, 0x35,
	0xa0, 0xd7, 0x92, 0x45, 0xb7, 0x9b, 0xd5, 0x90, 0xdf, 0x07, 0x3f, 0x2b, 0x85, 0xf1, 0xc7, 0xe1,
	0x84, 0xfa, 0x00, 0x42, 0x2e, 0xfa, 0x9a, 0xdd, 0xf1, 0x6e, 0xe4, 0x91, 0x0b, 0xd2, 0x70, 0x43,
	0x6b, 0x42, 0x03, 0x38, 0xba, 0x9b, 0x8f, 0xa7, 0xd1, 0x67, 0x39, 0x16, 0xbd, 0xf9, 0xcc, 0xab,
	0xe0, 0x46, 0x6e, 0x46, 0xcf, 0xa0, 0x3a, 0x90, 0x49, 0x72, 0x15, 0x7b, 0x0e, 0x9e, 0x66, 0x1d,
	0xfd, 0x0a, 0x67, 0x96, 0xde, 0xae, 0x18, 0xc9, 0xce, 0x12, 0x79, 0xbd, 0xbd, 0x0b, 0xa7, 0x71,
	0xd8, 0x6a, 0x35, 0xe3, 0x41, 0xb3, 0xa8, 0xa9, 0x79, 0xfb, 0x5f, 0xd0, 0xa5, 0xd0, 0x6a, 0x19,
	0xee, 0x60, 0xac, 0x7f, 0x81, 0x17, 0x25, 0x30, 0x7a, 0x0c, 0xce, 0x84, 0x2f, 0xb3, 0xfb, 0x99,
	0x92, 0xbe, 0x06, 0xf7, 0x81, 0x4d, 0xe7, 0x1c, 0x6f, 0x74, 0xd8, 0x3a, 0x35, 0x5a, 0xb6, 0x18,
	0xc2, 0x74, 0xe3, 0x43, 0xe5, 0x3d, 0x09, 0xda, 0xf0, 0x6c, 0xeb, 0xb4, 0x60, 0x0d, 0x29, 0x5a,
	0x13, 0xb4, 0xe1, 0xf9, 0x27, 0xae, 0xed, 0x28, 0x98, 0x98, 0x20, 0x37, 0xbf, 0xa7, 0x1e, 0x3c,
	0x4d, 0x72, 0xc6, 0xaf, 0xdb, 0xe0, 0xdb, 0x2e, 0x98, 0x89, 0xec, 0x0d, 0xb8, 0x8a, 0x89, 0x49,
	0xe2, 0x11, 0x74, 0xf1, 0x7c, 0x4b, 0xb9, 0x59, 0xbd, 0x11, 0x63, 0x1d, 0xa6, 0x5b, 0x56, 0x3a,
	0x95, 0x5c, 0x3a, 0xd6, 0xd7, 0x9d, 0xfc, 0xd7, 0xdf, 0xc2, 0xa9, 0xc5, 0xd7, 0xd7, 0x4c, 0xe9,
	0x9e, 0x1e, 0x95, 0xc8, 0xcd, 0x03, 0x2e, 0x85, 0xc6, 0x27, 0x57, 0x02, 0x68, 0x17, 0x01, 0xd9,
	0x63, 0xe4, 0xa6, 0xee, 0x6b, 0xa6, 0x39, 0x62, 0xf6, 0x43, 0x6b, 0x12, 0xc4, 0x70, 0x9e, 0x83,
	0x45, 0x21, 0x5f, 0x30, 0x15, 0x95, 0x8a, 0xa3, 0xaf, 0xc0, 0x95, 0x0b, 0xc1, 0x55, 0x16, 0xf4,
	0x89, 0xb1, 0xab, 0xa3, 0xc6, 0x7c, 0x74, 0x93, 0xac, 0x63, 0xc6, 0x73, 0x4a, 0x61, 0xcf, 0x38,
	0x96, 0xb9, 0x81, 0x75, 0xf0, 0x83, 0xe4, 0x94, 0xae, 0xbd, 0x7d, 0xdc, 0x25, 0x9b, 0x5d, 0x23,
	0x01, 0xb3, 0xef, 0x46, 0x99, 0xd3, 0xeb, 0x96, 0xbe, 0x84, 0x03, 0x2c, 0x7b, 0x6c, 0xc6, 0x91,
	0xfe, 0x20, 0xdc, 0x0c, 0x68, 0x0d, 0xdc, 0x64, 0x28, 0x95, 0xf9, 0x55, 0x90, 0x86, 0x13, 0xa6,
	0x0d, 0xad, 0xc3, 0x7e, 0xc2, 0xd5, 0x03, 0x57, 0xdd, 0xc8, 0x73, 0x91, 0xee, 0xb1, 0x37, 0x3e,
	0xa5, 0x35, 0x12, 0x56, 0x91, 0xd0, 0x9a, 0x04, 0x57, 0x50, 0xb3, 0x44, 0x77, 0x30, 0xef, 0x72,
	0x93, 0x76, 0x3c, 0x92, 0xce, 0xf1, 0xaf, 0x95, 0x4f, 0x7e, 0xaf, 0x7c, 0xf2, 0x67, 0xe5, 0x93,
	0xef, 0x7f, 0xfd, 0x27, 0x83, 0x2a, 0xfe, 0xc9, 0xbc, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0x6d,
	0xb1, 0x38, 0xf5, 0x8b, 0x04, 0x00, 0x00,
}
