// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: killMonster.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 本服击杀
type KillMonsterUniLoadReq struct {
}

func (m *KillMonsterUniLoadReq) Reset()                    { *m = KillMonsterUniLoadReq{} }
func (m *KillMonsterUniLoadReq) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterUniLoadReq) ProtoMessage()               {}
func (*KillMonsterUniLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{0} }

type KillMonsterUniLoadAck struct {
	List []*KillMonsterUniInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *KillMonsterUniLoadAck) Reset()                    { *m = KillMonsterUniLoadAck{} }
func (m *KillMonsterUniLoadAck) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterUniLoadAck) ProtoMessage()               {}
func (*KillMonsterUniLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{1} }

func (m *KillMonsterUniLoadAck) GetList() []*KillMonsterUniInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// 本服击杀奖励
type KillMonsterUniFirstDrawReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *KillMonsterUniFirstDrawReq) Reset()         { *m = KillMonsterUniFirstDrawReq{} }
func (m *KillMonsterUniFirstDrawReq) String() string { return proto.CompactTextString(m) }
func (*KillMonsterUniFirstDrawReq) ProtoMessage()    {}
func (*KillMonsterUniFirstDrawReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{2}
}

func (m *KillMonsterUniFirstDrawReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type KillMonsterUniFirstDrawAck struct {
	StageId int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *KillMonsterUniFirstDrawAck) Reset()         { *m = KillMonsterUniFirstDrawAck{} }
func (m *KillMonsterUniFirstDrawAck) String() string { return proto.CompactTextString(m) }
func (*KillMonsterUniFirstDrawAck) ProtoMessage()    {}
func (*KillMonsterUniFirstDrawAck) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{3}
}

func (m *KillMonsterUniFirstDrawAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterUniFirstDrawAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 本服奖励
type KillMonsterUniDrawReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *KillMonsterUniDrawReq) Reset()                    { *m = KillMonsterUniDrawReq{} }
func (m *KillMonsterUniDrawReq) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterUniDrawReq) ProtoMessage()               {}
func (*KillMonsterUniDrawReq) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{4} }

func (m *KillMonsterUniDrawReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type KillMonsterUniDrawAck struct {
	StageId int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *KillMonsterUniDrawAck) Reset()                    { *m = KillMonsterUniDrawAck{} }
func (m *KillMonsterUniDrawAck) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterUniDrawAck) ProtoMessage()               {}
func (*KillMonsterUniDrawAck) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{5} }

func (m *KillMonsterUniDrawAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterUniDrawAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 本服击杀推送
type KillMonsterUniKillNtf struct {
	StageId      int32  `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	KlillUserId  int32  `protobuf:"varint,2,opt,name=klillUserId,proto3" json:"klillUserId,omitempty"`
	KillUserName string `protobuf:"bytes,3,opt,name=killUserName,proto3" json:"killUserName,omitempty"`
}

func (m *KillMonsterUniKillNtf) Reset()                    { *m = KillMonsterUniKillNtf{} }
func (m *KillMonsterUniKillNtf) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterUniKillNtf) ProtoMessage()               {}
func (*KillMonsterUniKillNtf) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{6} }

func (m *KillMonsterUniKillNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterUniKillNtf) GetKlillUserId() int32 {
	if m != nil {
		return m.KlillUserId
	}
	return 0
}

func (m *KillMonsterUniKillNtf) GetKillUserName() string {
	if m != nil {
		return m.KillUserName
	}
	return ""
}

// 个人首通
type KillMonsterPerLoadReq struct {
}

func (m *KillMonsterPerLoadReq) Reset()                    { *m = KillMonsterPerLoadReq{} }
func (m *KillMonsterPerLoadReq) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterPerLoadReq) ProtoMessage()               {}
func (*KillMonsterPerLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{7} }

type KillMonsterPerLoadAck struct {
	List []*KillMonsterPerInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *KillMonsterPerLoadAck) Reset()                    { *m = KillMonsterPerLoadAck{} }
func (m *KillMonsterPerLoadAck) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterPerLoadAck) ProtoMessage()               {}
func (*KillMonsterPerLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{8} }

func (m *KillMonsterPerLoadAck) GetList() []*KillMonsterPerInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// 个人首通奖励
type KillMonsterPerDrawReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *KillMonsterPerDrawReq) Reset()                    { *m = KillMonsterPerDrawReq{} }
func (m *KillMonsterPerDrawReq) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterPerDrawReq) ProtoMessage()               {}
func (*KillMonsterPerDrawReq) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{9} }

func (m *KillMonsterPerDrawReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type KillMonsterPerDrawAck struct {
	StageId int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *KillMonsterPerDrawAck) Reset()         { *m = KillMonsterPerDrawAck{} }
func (m *KillMonsterPerDrawAck) String() string { return proto.CompactTextString(m) }
func (*KillMonsterPerDrawAck) ProtoMessage()    {}
func (*KillMonsterPerDrawAck) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{10}
}

func (m *KillMonsterPerDrawAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterPerDrawAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 个人首通推送
type KillMonsterPerKillNtf struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *KillMonsterPerKillNtf) Reset()         { *m = KillMonsterPerKillNtf{} }
func (m *KillMonsterPerKillNtf) String() string { return proto.CompactTextString(m) }
func (*KillMonsterPerKillNtf) ProtoMessage()    {}
func (*KillMonsterPerKillNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{11}
}

func (m *KillMonsterPerKillNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 里程碑
type KillMonsterMilLoadReq struct {
}

func (m *KillMonsterMilLoadReq) Reset()         { *m = KillMonsterMilLoadReq{} }
func (m *KillMonsterMilLoadReq) String() string { return proto.CompactTextString(m) }
func (*KillMonsterMilLoadReq) ProtoMessage()    {}
func (*KillMonsterMilLoadReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{12}
}

type KillMonsterMilLoadAck struct {
	List []*KillMonsterMilInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *KillMonsterMilLoadAck) Reset()         { *m = KillMonsterMilLoadAck{} }
func (m *KillMonsterMilLoadAck) String() string { return proto.CompactTextString(m) }
func (*KillMonsterMilLoadAck) ProtoMessage()    {}
func (*KillMonsterMilLoadAck) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{13}
}

func (m *KillMonsterMilLoadAck) GetList() []*KillMonsterMilInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// 里程碑领取
type KillMonsterMilDrawReq struct {
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *KillMonsterMilDrawReq) Reset()         { *m = KillMonsterMilDrawReq{} }
func (m *KillMonsterMilDrawReq) String() string { return proto.CompactTextString(m) }
func (*KillMonsterMilDrawReq) ProtoMessage()    {}
func (*KillMonsterMilDrawReq) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{14}
}

func (m *KillMonsterMilDrawReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type KillMonsterMilDrawAck struct {
	Type  int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Level int32           `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Goods *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
}

func (m *KillMonsterMilDrawAck) Reset()         { *m = KillMonsterMilDrawAck{} }
func (m *KillMonsterMilDrawAck) String() string { return proto.CompactTextString(m) }
func (*KillMonsterMilDrawAck) ProtoMessage()    {}
func (*KillMonsterMilDrawAck) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{15}
}

func (m *KillMonsterMilDrawAck) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *KillMonsterMilDrawAck) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *KillMonsterMilDrawAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 里程碑推送
type KillMonsterMilKillNtf struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	KillNum int32 `protobuf:"varint,2,opt,name=killNum,proto3" json:"killNum,omitempty"`
}

func (m *KillMonsterMilKillNtf) Reset()         { *m = KillMonsterMilKillNtf{} }
func (m *KillMonsterMilKillNtf) String() string { return proto.CompactTextString(m) }
func (*KillMonsterMilKillNtf) ProtoMessage()    {}
func (*KillMonsterMilKillNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorKillMonster, []int{16}
}

func (m *KillMonsterMilKillNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterMilKillNtf) GetKillNum() int32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

type KillMonsterUniInfo struct {
	StageId         int32  `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	KlillUserId     int32  `protobuf:"varint,2,opt,name=klillUserId,proto3" json:"klillUserId,omitempty"`
	KillUserName    string `protobuf:"bytes,3,opt,name=killUserName,proto3" json:"killUserName,omitempty"`
	ServerFirstKill bool   `protobuf:"varint,4,opt,name=serverFirstKill,proto3" json:"serverFirstKill,omitempty"`
	ServerKill      bool   `protobuf:"varint,5,opt,name=serverKill,proto3" json:"serverKill,omitempty"`
}

func (m *KillMonsterUniInfo) Reset()                    { *m = KillMonsterUniInfo{} }
func (m *KillMonsterUniInfo) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterUniInfo) ProtoMessage()               {}
func (*KillMonsterUniInfo) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{17} }

func (m *KillMonsterUniInfo) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterUniInfo) GetKlillUserId() int32 {
	if m != nil {
		return m.KlillUserId
	}
	return 0
}

func (m *KillMonsterUniInfo) GetKillUserName() string {
	if m != nil {
		return m.KillUserName
	}
	return ""
}

func (m *KillMonsterUniInfo) GetServerFirstKill() bool {
	if m != nil {
		return m.ServerFirstKill
	}
	return false
}

func (m *KillMonsterUniInfo) GetServerKill() bool {
	if m != nil {
		return m.ServerKill
	}
	return false
}

type KillMonsterPerInfo struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Kill    bool  `protobuf:"varint,2,opt,name=kill,proto3" json:"kill,omitempty"`
	Receive bool  `protobuf:"varint,3,opt,name=receive,proto3" json:"receive,omitempty"`
}

func (m *KillMonsterPerInfo) Reset()                    { *m = KillMonsterPerInfo{} }
func (m *KillMonsterPerInfo) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterPerInfo) ProtoMessage()               {}
func (*KillMonsterPerInfo) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{18} }

func (m *KillMonsterPerInfo) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *KillMonsterPerInfo) GetKill() bool {
	if m != nil {
		return m.Kill
	}
	return false
}

func (m *KillMonsterPerInfo) GetReceive() bool {
	if m != nil {
		return m.Receive
	}
	return false
}

type KillMonsterMilInfo struct {
	Type    int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Level   int32 `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	KillNum int32 `protobuf:"varint,3,opt,name=killNum,proto3" json:"killNum,omitempty"`
	Receive bool  `protobuf:"varint,4,opt,name=receive,proto3" json:"receive,omitempty"`
}

func (m *KillMonsterMilInfo) Reset()                    { *m = KillMonsterMilInfo{} }
func (m *KillMonsterMilInfo) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterMilInfo) ProtoMessage()               {}
func (*KillMonsterMilInfo) Descriptor() ([]byte, []int) { return fileDescriptorKillMonster, []int{19} }

func (m *KillMonsterMilInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *KillMonsterMilInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *KillMonsterMilInfo) GetKillNum() int32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

func (m *KillMonsterMilInfo) GetReceive() bool {
	if m != nil {
		return m.Receive
	}
	return false
}

func init() {
	proto.RegisterType((*KillMonsterUniLoadReq)(nil), "pb.KillMonsterUniLoadReq")
	proto.RegisterType((*KillMonsterUniLoadAck)(nil), "pb.KillMonsterUniLoadAck")
	proto.RegisterType((*KillMonsterUniFirstDrawReq)(nil), "pb.KillMonsterUniFirstDrawReq")
	proto.RegisterType((*KillMonsterUniFirstDrawAck)(nil), "pb.KillMonsterUniFirstDrawAck")
	proto.RegisterType((*KillMonsterUniDrawReq)(nil), "pb.KillMonsterUniDrawReq")
	proto.RegisterType((*KillMonsterUniDrawAck)(nil), "pb.KillMonsterUniDrawAck")
	proto.RegisterType((*KillMonsterUniKillNtf)(nil), "pb.KillMonsterUniKillNtf")
	proto.RegisterType((*KillMonsterPerLoadReq)(nil), "pb.KillMonsterPerLoadReq")
	proto.RegisterType((*KillMonsterPerLoadAck)(nil), "pb.KillMonsterPerLoadAck")
	proto.RegisterType((*KillMonsterPerDrawReq)(nil), "pb.KillMonsterPerDrawReq")
	proto.RegisterType((*KillMonsterPerDrawAck)(nil), "pb.KillMonsterPerDrawAck")
	proto.RegisterType((*KillMonsterPerKillNtf)(nil), "pb.KillMonsterPerKillNtf")
	proto.RegisterType((*KillMonsterMilLoadReq)(nil), "pb.KillMonsterMilLoadReq")
	proto.RegisterType((*KillMonsterMilLoadAck)(nil), "pb.KillMonsterMilLoadAck")
	proto.RegisterType((*KillMonsterMilDrawReq)(nil), "pb.KillMonsterMilDrawReq")
	proto.RegisterType((*KillMonsterMilDrawAck)(nil), "pb.KillMonsterMilDrawAck")
	proto.RegisterType((*KillMonsterMilKillNtf)(nil), "pb.KillMonsterMilKillNtf")
	proto.RegisterType((*KillMonsterUniInfo)(nil), "pb.KillMonsterUniInfo")
	proto.RegisterType((*KillMonsterPerInfo)(nil), "pb.KillMonsterPerInfo")
	proto.RegisterType((*KillMonsterMilInfo)(nil), "pb.KillMonsterMilInfo")
}
func (m *KillMonsterUniLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *KillMonsterUniLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintKillMonster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KillMonsterUniFirstDrawReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniFirstDrawReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *KillMonsterUniFirstDrawAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniFirstDrawAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *KillMonsterUniDrawReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniDrawReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *KillMonsterUniDrawAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniDrawAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *KillMonsterUniKillNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniKillNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.KlillUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.KlillUserId))
	}
	if len(m.KillUserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(len(m.KillUserName)))
		i += copy(dAtA[i:], m.KillUserName)
	}
	return i, nil
}

func (m *KillMonsterPerLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterPerLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *KillMonsterPerLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterPerLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintKillMonster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KillMonsterPerDrawReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterPerDrawReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *KillMonsterPerDrawAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterPerDrawAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *KillMonsterPerKillNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterPerKillNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *KillMonsterMilLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterMilLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *KillMonsterMilLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterMilLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintKillMonster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *KillMonsterMilDrawReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterMilDrawReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *KillMonsterMilDrawAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterMilDrawAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Type))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Level))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Goods.Size()))
		n4, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *KillMonsterMilKillNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterMilKillNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.KillNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.KillNum))
	}
	return i, nil
}

func (m *KillMonsterUniInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterUniInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.KlillUserId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.KlillUserId))
	}
	if len(m.KillUserName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(len(m.KillUserName)))
		i += copy(dAtA[i:], m.KillUserName)
	}
	if m.ServerFirstKill {
		dAtA[i] = 0x20
		i++
		if m.ServerFirstKill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ServerKill {
		dAtA[i] = 0x28
		i++
		if m.ServerKill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KillMonsterPerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterPerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.StageId))
	}
	if m.Kill {
		dAtA[i] = 0x10
		i++
		if m.Kill {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Receive {
		dAtA[i] = 0x18
		i++
		if m.Receive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *KillMonsterMilInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterMilInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Type))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.Level))
	}
	if m.KillNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintKillMonster(dAtA, i, uint64(m.KillNum))
	}
	if m.Receive {
		dAtA[i] = 0x20
		i++
		if m.Receive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintKillMonster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KillMonsterUniLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *KillMonsterUniLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovKillMonster(uint64(l))
		}
	}
	return n
}

func (m *KillMonsterUniFirstDrawReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	return n
}

func (m *KillMonsterUniFirstDrawAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovKillMonster(uint64(l))
	}
	return n
}

func (m *KillMonsterUniDrawReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	return n
}

func (m *KillMonsterUniDrawAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovKillMonster(uint64(l))
	}
	return n
}

func (m *KillMonsterUniKillNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.KlillUserId != 0 {
		n += 1 + sovKillMonster(uint64(m.KlillUserId))
	}
	l = len(m.KillUserName)
	if l > 0 {
		n += 1 + l + sovKillMonster(uint64(l))
	}
	return n
}

func (m *KillMonsterPerLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *KillMonsterPerLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovKillMonster(uint64(l))
		}
	}
	return n
}

func (m *KillMonsterPerDrawReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	return n
}

func (m *KillMonsterPerDrawAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovKillMonster(uint64(l))
	}
	return n
}

func (m *KillMonsterPerKillNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	return n
}

func (m *KillMonsterMilLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *KillMonsterMilLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovKillMonster(uint64(l))
		}
	}
	return n
}

func (m *KillMonsterMilDrawReq) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovKillMonster(uint64(m.Type))
	}
	return n
}

func (m *KillMonsterMilDrawAck) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovKillMonster(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovKillMonster(uint64(m.Level))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovKillMonster(uint64(l))
	}
	return n
}

func (m *KillMonsterMilKillNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.KillNum != 0 {
		n += 1 + sovKillMonster(uint64(m.KillNum))
	}
	return n
}

func (m *KillMonsterUniInfo) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.KlillUserId != 0 {
		n += 1 + sovKillMonster(uint64(m.KlillUserId))
	}
	l = len(m.KillUserName)
	if l > 0 {
		n += 1 + l + sovKillMonster(uint64(l))
	}
	if m.ServerFirstKill {
		n += 2
	}
	if m.ServerKill {
		n += 2
	}
	return n
}

func (m *KillMonsterPerInfo) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovKillMonster(uint64(m.StageId))
	}
	if m.Kill {
		n += 2
	}
	if m.Receive {
		n += 2
	}
	return n
}

func (m *KillMonsterMilInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovKillMonster(uint64(m.Type))
	}
	if m.Level != 0 {
		n += 1 + sovKillMonster(uint64(m.Level))
	}
	if m.KillNum != 0 {
		n += 1 + sovKillMonster(uint64(m.KillNum))
	}
	if m.Receive {
		n += 2
	}
	return n
}

func sovKillMonster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKillMonster(x uint64) (n int) {
	return sovKillMonster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KillMonsterUniLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &KillMonsterUniInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniFirstDrawReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniFirstDrawReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniFirstDrawReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniFirstDrawAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniFirstDrawAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniFirstDrawAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniDrawReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniDrawReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniDrawReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniDrawAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniDrawAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniDrawAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniKillNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniKillNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniKillNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KlillUserId", wireType)
			}
			m.KlillUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KlillUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterPerLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPerLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPerLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterPerLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPerLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPerLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &KillMonsterPerInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterPerDrawReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPerDrawReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPerDrawReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterPerDrawAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPerDrawAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPerDrawAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterPerKillNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPerKillNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPerKillNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterMilLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterMilLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterMilLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterMilLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterMilLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterMilLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &KillMonsterMilInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterMilDrawReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterMilDrawReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterMilDrawReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterMilDrawAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterMilDrawAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterMilDrawAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterMilKillNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterMilKillNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterMilKillNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterUniInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterUniInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterUniInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KlillUserId", wireType)
			}
			m.KlillUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KlillUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillUserName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKillMonster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KillUserName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerFirstKill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerFirstKill = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServerKill = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterPerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterPerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterPerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kill", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kill = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Receive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterMilInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterMilInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterMilInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Receive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKillMonster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKillMonster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKillMonster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKillMonster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKillMonster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKillMonster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKillMonster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKillMonster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKillMonster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKillMonster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("killMonster.proto", fileDescriptorKillMonster) }

var fileDescriptorKillMonster = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x1b, 0x9b, 0x86, 0x49, 0x25, 0x60, 0xc5, 0x8f, 0xd5, 0x83, 0x65, 0xed, 0xc9, 0x02,
	0x29, 0x52, 0x8b, 0xc4, 0x1d, 0x8a, 0x40, 0x51, 0x49, 0x14, 0xad, 0xd4, 0x13, 0x1c, 0x70, 0x92,
	0x49, 0xb0, 0xbc, 0xf1, 0xa6, 0x6b, 0x93, 0x8a, 0x37, 0xe1, 0x69, 0x38, 0x73, 0xe4, 0x11, 0x50,
	0x78, 0x11, 0xb4, 0xeb, 0xb5, 0x6a, 0x1b, 0xb7, 0x56, 0xa5, 0xf6, 0xb6, 0x33, 0xf3, 0xcd, 0xcc,
	0xe7, 0x6f, 0x3f, 0xad, 0xe1, 0x71, 0x12, 0x0b, 0x31, 0x96, 0x69, 0x96, 0xa3, 0x1a, 0x6e, 0x94,
	0xcc, 0x25, 0xdd, 0xdb, 0xcc, 0x0e, 0x0f, 0xe6, 0x72, 0xbd, 0x96, 0x69, 0x91, 0x61, 0xcf, 0xe1,
	0xe9, 0xe9, 0x25, 0xec, 0x2c, 0x8d, 0x3f, 0xca, 0x68, 0xc1, 0xf1, 0x9c, 0x9d, 0xb4, 0x15, 0xde,
	0xcc, 0x13, 0xfa, 0x02, 0x1c, 0x11, 0x67, 0xb9, 0x47, 0x82, 0x5e, 0x38, 0x38, 0x7e, 0x36, 0xdc,
	0xcc, 0x86, 0x75, 0xe0, 0x28, 0x5d, 0x4a, 0x6e, 0x30, 0xec, 0x35, 0x1c, 0xd6, 0x6b, 0xef, 0x63,
	0x95, 0xe5, 0xef, 0x54, 0x74, 0xc1, 0xf1, 0x9c, 0x7a, 0xb0, 0x9f, 0xe5, 0xd1, 0x0a, 0x47, 0x0b,
	0x8f, 0x04, 0x24, 0x74, 0x79, 0x19, 0xb2, 0x2f, 0x57, 0xf6, 0x69, 0x06, 0x57, 0xf6, 0xd1, 0x10,
	0xdc, 0x95, 0x94, 0x8b, 0xcc, 0xdb, 0x0b, 0x48, 0x38, 0x38, 0xa6, 0x9a, 0xdc, 0x07, 0x9d, 0x38,
	0xf9, 0x1a, 0xa5, 0x2b, 0x9c, 0xe4, 0x4b, 0x5e, 0x00, 0xd8, 0x51, 0xf3, 0xf3, 0xba, 0x49, 0x7d,
	0x6a, 0x6b, 0xb9, 0x2d, 0x3e, 0x17, 0xcd, 0xe1, 0x3a, 0x9a, 0xe4, 0xcb, 0x6b, 0x86, 0x07, 0x30,
	0x48, 0x44, 0x2c, 0xc4, 0x59, 0x86, 0x6a, 0xb4, 0x30, 0x2b, 0x5c, 0x5e, 0x4d, 0x51, 0x06, 0x07,
	0x89, 0x8d, 0x26, 0xd1, 0x1a, 0xbd, 0x5e, 0x40, 0xc2, 0x07, 0xbc, 0x96, 0x6b, 0x18, 0x60, 0x8a,
	0xaa, 0xdd, 0x00, 0xb6, 0xd0, 0x6d, 0x80, 0x29, 0xaa, 0x8a, 0x01, 0x8e, 0x9a, 0x43, 0x6e, 0x2a,
	0xb3, 0x6d, 0xb9, 0x9b, 0x6b, 0x9f, 0xa2, 0xea, 0x94, 0xb9, 0x21, 0xd0, 0x38, 0x16, 0xed, 0x02,
	0xd9, 0x42, 0xb7, 0x40, 0xe3, 0x58, 0x54, 0x04, 0x7a, 0xd9, 0x1c, 0x52, 0x0a, 0x44, 0xc1, 0xc9,
	0xbf, 0x6f, 0xd0, 0xb2, 0x31, 0x67, 0x96, 0xb4, 0x81, 0xf5, 0xc6, 0x16, 0x30, 0x7d, 0x02, 0xae,
	0xc0, 0x2d, 0x0a, 0x6b, 0x8c, 0x22, 0xb8, 0x94, 0xaa, 0xd7, 0x25, 0xd5, 0x69, 0x73, 0x59, 0xb7,
	0x23, 0x3d, 0xd8, 0xd7, 0xde, 0x9a, 0x7c, 0x5b, 0xdb, 0xa5, 0x65, 0xc8, 0x7e, 0x12, 0xa0, 0xff,
	0xbf, 0x12, 0x77, 0x6d, 0x6e, 0x1a, 0xc2, 0xc3, 0x0c, 0xd5, 0x16, 0x95, 0x79, 0x3f, 0x34, 0x01,
	0xcf, 0x09, 0x48, 0xd8, 0xe7, 0xcd, 0x34, 0xf5, 0x01, 0x8a, 0x94, 0x01, 0xb9, 0x06, 0x54, 0xc9,
	0xb0, 0xcf, 0x35, 0xfe, 0xd6, 0xe4, 0xd7, 0xf0, 0xa7, 0xe0, 0x68, 0x26, 0x86, 0x78, 0x9f, 0x9b,
	0xb3, 0x46, 0x2b, 0x9c, 0x63, 0xbc, 0x2d, 0xc8, 0xf6, 0x79, 0x19, 0x32, 0x55, 0x9b, 0x6e, 0x1d,
	0x72, 0x83, 0x5b, 0xad, 0x08, 0xdf, 0xab, 0x09, 0x5f, 0xdd, 0xe9, 0xd4, 0x76, 0xbe, 0x7d, 0xf4,
	0x6b, 0xe7, 0x93, 0xdf, 0x3b, 0x9f, 0xfc, 0xd9, 0xf9, 0xe4, 0xc7, 0x5f, 0xff, 0xde, 0xec, 0xbe,
	0xf9, 0x25, 0xbc, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x91, 0x55, 0x20, 0x39, 0x06, 0x00,
	0x00,
}
