// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: holyBeast.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 圣兽load
type HolyBeastLoadInfoReq struct {
}

func (m *HolyBeastLoadInfoReq) Reset()                    { *m = HolyBeastLoadInfoReq{} }
func (m *HolyBeastLoadInfoReq) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastLoadInfoReq) ProtoMessage()               {}
func (*HolyBeastLoadInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{0} }

type HolyBeastLoadInfoAck struct {
	HolyBeastInfos map[int32]*HolyBeastInfos `protobuf:"bytes,1,rep,name=holyBeastInfos" json:"holyBeastInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HolyBeastLoadInfoAck) Reset()                    { *m = HolyBeastLoadInfoAck{} }
func (m *HolyBeastLoadInfoAck) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastLoadInfoAck) ProtoMessage()               {}
func (*HolyBeastLoadInfoAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{1} }

func (m *HolyBeastLoadInfoAck) GetHolyBeastInfos() map[int32]*HolyBeastInfos {
	if m != nil {
		return m.HolyBeastInfos
	}
	return nil
}

// 圣兽激活
type HolyBeastActivateReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *HolyBeastActivateReq) Reset()                    { *m = HolyBeastActivateReq{} }
func (m *HolyBeastActivateReq) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastActivateReq) ProtoMessage()               {}
func (*HolyBeastActivateReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{2} }

func (m *HolyBeastActivateReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *HolyBeastActivateReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type HolyBeastActivateAck struct {
	HolyBeastInfos map[int32]*HolyBeastInfos `protobuf:"bytes,1,rep,name=holyBeastInfos" json:"holyBeastInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	HolyPoint      int32                     `protobuf:"varint,2,opt,name=HolyPoint,proto3" json:"HolyPoint,omitempty"`
}

func (m *HolyBeastActivateAck) Reset()                    { *m = HolyBeastActivateAck{} }
func (m *HolyBeastActivateAck) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastActivateAck) ProtoMessage()               {}
func (*HolyBeastActivateAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{3} }

func (m *HolyBeastActivateAck) GetHolyBeastInfos() map[int32]*HolyBeastInfos {
	if m != nil {
		return m.HolyBeastInfos
	}
	return nil
}

func (m *HolyBeastActivateAck) GetHolyPoint() int32 {
	if m != nil {
		return m.HolyPoint
	}
	return 0
}

// 圣兽升星
type HolyBeastUpStarReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *HolyBeastUpStarReq) Reset()                    { *m = HolyBeastUpStarReq{} }
func (m *HolyBeastUpStarReq) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastUpStarReq) ProtoMessage()               {}
func (*HolyBeastUpStarReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{4} }

func (m *HolyBeastUpStarReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *HolyBeastUpStarReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type HolyBeastUpStarAck struct {
	HolyBeastInfos map[int32]*HolyBeastInfos `protobuf:"bytes,1,rep,name=holyBeastInfos" json:"holyBeastInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	HolyPoint      int32                     `protobuf:"varint,2,opt,name=HolyPoint,proto3" json:"HolyPoint,omitempty"`
}

func (m *HolyBeastUpStarAck) Reset()                    { *m = HolyBeastUpStarAck{} }
func (m *HolyBeastUpStarAck) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastUpStarAck) ProtoMessage()               {}
func (*HolyBeastUpStarAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{5} }

func (m *HolyBeastUpStarAck) GetHolyBeastInfos() map[int32]*HolyBeastInfos {
	if m != nil {
		return m.HolyBeastInfos
	}
	return nil
}

func (m *HolyBeastUpStarAck) GetHolyPoint() int32 {
	if m != nil {
		return m.HolyPoint
	}
	return 0
}

// 增加圣灵点
type HolyBeastPointAddReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	UseItemId int32 `protobuf:"varint,2,opt,name=useItemId,proto3" json:"useItemId,omitempty"`
	Count     int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *HolyBeastPointAddReq) Reset()                    { *m = HolyBeastPointAddReq{} }
func (m *HolyBeastPointAddReq) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastPointAddReq) ProtoMessage()               {}
func (*HolyBeastPointAddReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{6} }

func (m *HolyBeastPointAddReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *HolyBeastPointAddReq) GetUseItemId() int32 {
	if m != nil {
		return m.UseItemId
	}
	return 0
}

func (m *HolyBeastPointAddReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type HolyBeastPointAddAck struct {
	HeroIndex int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	HolyPoint int32           `protobuf:"varint,2,opt,name=HolyPoint,proto3" json:"HolyPoint,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
}

func (m *HolyBeastPointAddAck) Reset()                    { *m = HolyBeastPointAddAck{} }
func (m *HolyBeastPointAddAck) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastPointAddAck) ProtoMessage()               {}
func (*HolyBeastPointAddAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{7} }

func (m *HolyBeastPointAddAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *HolyBeastPointAddAck) GetHolyPoint() int32 {
	if m != nil {
		return m.HolyPoint
	}
	return 0
}

func (m *HolyBeastPointAddAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 特殊属性选择
type HolyBeastChoosePropReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Index     int32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *HolyBeastChoosePropReq) Reset()                    { *m = HolyBeastChoosePropReq{} }
func (m *HolyBeastChoosePropReq) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastChoosePropReq) ProtoMessage()               {}
func (*HolyBeastChoosePropReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{8} }

func (m *HolyBeastChoosePropReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *HolyBeastChoosePropReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *HolyBeastChoosePropReq) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type HolyBeastChoosePropAck struct {
	HolyBeastInfos map[int32]*HolyBeastInfos `protobuf:"bytes,1,rep,name=holyBeastInfos" json:"holyBeastInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HolyBeastChoosePropAck) Reset()                    { *m = HolyBeastChoosePropAck{} }
func (m *HolyBeastChoosePropAck) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastChoosePropAck) ProtoMessage()               {}
func (*HolyBeastChoosePropAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{9} }

func (m *HolyBeastChoosePropAck) GetHolyBeastInfos() map[int32]*HolyBeastInfos {
	if m != nil {
		return m.HolyBeastInfos
	}
	return nil
}

// 重置
type HolyBeastRestReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Type      int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *HolyBeastRestReq) Reset()                    { *m = HolyBeastRestReq{} }
func (m *HolyBeastRestReq) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastRestReq) ProtoMessage()               {}
func (*HolyBeastRestReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{10} }

func (m *HolyBeastRestReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *HolyBeastRestReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type HolyBeastRestAck struct {
	HolyBeastInfos map[int32]*HolyBeastInfos `protobuf:"bytes,1,rep,name=holyBeastInfos" json:"holyBeastInfos,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	HolyPoint      int32                     `protobuf:"varint,2,opt,name=HolyPoint,proto3" json:"HolyPoint,omitempty"`
	Goods          *GoodsChangeNtf           `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
}

func (m *HolyBeastRestAck) Reset()                    { *m = HolyBeastRestAck{} }
func (m *HolyBeastRestAck) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastRestAck) ProtoMessage()               {}
func (*HolyBeastRestAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{11} }

func (m *HolyBeastRestAck) GetHolyBeastInfos() map[int32]*HolyBeastInfos {
	if m != nil {
		return m.HolyBeastInfos
	}
	return nil
}

func (m *HolyBeastRestAck) GetHolyPoint() int32 {
	if m != nil {
		return m.HolyPoint
	}
	return 0
}

func (m *HolyBeastRestAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type HolyBeastInfos struct {
	HolyBeastInfo []*HolyBeastInfo `protobuf:"bytes,1,rep,name=holyBeastInfo" json:"holyBeastInfo,omitempty"`
	AllPonts      int32            `protobuf:"varint,2,opt,name=allPonts,proto3" json:"allPonts,omitempty"`
	HeroIndex     int32            `protobuf:"varint,3,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *HolyBeastInfos) Reset()                    { *m = HolyBeastInfos{} }
func (m *HolyBeastInfos) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastInfos) ProtoMessage()               {}
func (*HolyBeastInfos) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{12} }

func (m *HolyBeastInfos) GetHolyBeastInfo() []*HolyBeastInfo {
	if m != nil {
		return m.HolyBeastInfo
	}
	return nil
}

func (m *HolyBeastInfos) GetAllPonts() int32 {
	if m != nil {
		return m.AllPonts
	}
	return 0
}

func (m *HolyBeastInfos) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type HolyBeastInfo struct {
	Type           int32           `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Star           int32           `protobuf:"varint,2,opt,name=star,proto3" json:"star,omitempty"`
	ChooseProperty map[int32]int32 `protobuf:"bytes,3,rep,name=chooseProperty" json:"chooseProperty,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *HolyBeastInfo) Reset()                    { *m = HolyBeastInfo{} }
func (m *HolyBeastInfo) String() string            { return proto.CompactTextString(m) }
func (*HolyBeastInfo) ProtoMessage()               {}
func (*HolyBeastInfo) Descriptor() ([]byte, []int) { return fileDescriptorHolyBeast, []int{13} }

func (m *HolyBeastInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *HolyBeastInfo) GetStar() int32 {
	if m != nil {
		return m.Star
	}
	return 0
}

func (m *HolyBeastInfo) GetChooseProperty() map[int32]int32 {
	if m != nil {
		return m.ChooseProperty
	}
	return nil
}

func init() {
	proto.RegisterType((*HolyBeastLoadInfoReq)(nil), "pb.HolyBeastLoadInfoReq")
	proto.RegisterType((*HolyBeastLoadInfoAck)(nil), "pb.HolyBeastLoadInfoAck")
	proto.RegisterType((*HolyBeastActivateReq)(nil), "pb.HolyBeastActivateReq")
	proto.RegisterType((*HolyBeastActivateAck)(nil), "pb.HolyBeastActivateAck")
	proto.RegisterType((*HolyBeastUpStarReq)(nil), "pb.HolyBeastUpStarReq")
	proto.RegisterType((*HolyBeastUpStarAck)(nil), "pb.HolyBeastUpStarAck")
	proto.RegisterType((*HolyBeastPointAddReq)(nil), "pb.HolyBeastPointAddReq")
	proto.RegisterType((*HolyBeastPointAddAck)(nil), "pb.HolyBeastPointAddAck")
	proto.RegisterType((*HolyBeastChoosePropReq)(nil), "pb.HolyBeastChoosePropReq")
	proto.RegisterType((*HolyBeastChoosePropAck)(nil), "pb.HolyBeastChoosePropAck")
	proto.RegisterType((*HolyBeastRestReq)(nil), "pb.HolyBeastRestReq")
	proto.RegisterType((*HolyBeastRestAck)(nil), "pb.HolyBeastRestAck")
	proto.RegisterType((*HolyBeastInfos)(nil), "pb.HolyBeastInfos")
	proto.RegisterType((*HolyBeastInfo)(nil), "pb.HolyBeastInfo")
}
func (m *HolyBeastLoadInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastLoadInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *HolyBeastLoadInfoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastLoadInfoAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, _ := range m.HolyBeastInfos {
			dAtA[i] = 0xa
			i++
			v := m.HolyBeastInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHolyBeast(uint64(msgSize))
			}
			mapSize := 1 + sovHolyBeast(uint64(k)) + msgSize
			i = encodeVarintHolyBeast(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHolyBeast(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *HolyBeastActivateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastActivateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *HolyBeastActivateAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastActivateAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, _ := range m.HolyBeastInfos {
			dAtA[i] = 0xa
			i++
			v := m.HolyBeastInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHolyBeast(uint64(msgSize))
			}
			mapSize := 1 + sovHolyBeast(uint64(k)) + msgSize
			i = encodeVarintHolyBeast(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHolyBeast(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.HolyPoint != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HolyPoint))
	}
	return i, nil
}

func (m *HolyBeastUpStarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastUpStarReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *HolyBeastUpStarAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastUpStarAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, _ := range m.HolyBeastInfos {
			dAtA[i] = 0xa
			i++
			v := m.HolyBeastInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHolyBeast(uint64(msgSize))
			}
			mapSize := 1 + sovHolyBeast(uint64(k)) + msgSize
			i = encodeVarintHolyBeast(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHolyBeast(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.HolyPoint != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HolyPoint))
	}
	return i, nil
}

func (m *HolyBeastPointAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastPointAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	if m.UseItemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.UseItemId))
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *HolyBeastPointAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastPointAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	if m.HolyPoint != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HolyPoint))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Goods.Size()))
		n4, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *HolyBeastChoosePropReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastChoosePropReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Type))
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *HolyBeastChoosePropAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastChoosePropAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, _ := range m.HolyBeastInfos {
			dAtA[i] = 0xa
			i++
			v := m.HolyBeastInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHolyBeast(uint64(msgSize))
			}
			mapSize := 1 + sovHolyBeast(uint64(k)) + msgSize
			i = encodeVarintHolyBeast(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHolyBeast(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func (m *HolyBeastRestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastRestReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *HolyBeastRestAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastRestAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, _ := range m.HolyBeastInfos {
			dAtA[i] = 0xa
			i++
			v := m.HolyBeastInfos[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovHolyBeast(uint64(msgSize))
			}
			mapSize := 1 + sovHolyBeast(uint64(k)) + msgSize
			i = encodeVarintHolyBeast(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintHolyBeast(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	if m.HolyPoint != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HolyPoint))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Goods.Size()))
		n7, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *HolyBeastInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastInfos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HolyBeastInfo) > 0 {
		for _, msg := range m.HolyBeastInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AllPonts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.AllPonts))
	}
	if m.HeroIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *HolyBeastInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyBeastInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Type))
	}
	if m.Star != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyBeast(dAtA, i, uint64(m.Star))
	}
	if len(m.ChooseProperty) > 0 {
		for k, _ := range m.ChooseProperty {
			dAtA[i] = 0x1a
			i++
			v := m.ChooseProperty[k]
			mapSize := 1 + sovHolyBeast(uint64(k)) + 1 + sovHolyBeast(uint64(v))
			i = encodeVarintHolyBeast(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintHolyBeast(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeVarintHolyBeast(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HolyBeastLoadInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *HolyBeastLoadInfoAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, v := range m.HolyBeastInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHolyBeast(uint64(l))
			}
			mapEntrySize := 1 + sovHolyBeast(uint64(k)) + l
			n += mapEntrySize + 1 + sovHolyBeast(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HolyBeastActivateReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		n += 1 + sovHolyBeast(uint64(m.Type))
	}
	return n
}

func (m *HolyBeastActivateAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, v := range m.HolyBeastInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHolyBeast(uint64(l))
			}
			mapEntrySize := 1 + sovHolyBeast(uint64(k)) + l
			n += mapEntrySize + 1 + sovHolyBeast(uint64(mapEntrySize))
		}
	}
	if m.HolyPoint != 0 {
		n += 1 + sovHolyBeast(uint64(m.HolyPoint))
	}
	return n
}

func (m *HolyBeastUpStarReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		n += 1 + sovHolyBeast(uint64(m.Type))
	}
	return n
}

func (m *HolyBeastUpStarAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, v := range m.HolyBeastInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHolyBeast(uint64(l))
			}
			mapEntrySize := 1 + sovHolyBeast(uint64(k)) + l
			n += mapEntrySize + 1 + sovHolyBeast(uint64(mapEntrySize))
		}
	}
	if m.HolyPoint != 0 {
		n += 1 + sovHolyBeast(uint64(m.HolyPoint))
	}
	return n
}

func (m *HolyBeastPointAddReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	if m.UseItemId != 0 {
		n += 1 + sovHolyBeast(uint64(m.UseItemId))
	}
	if m.Count != 0 {
		n += 1 + sovHolyBeast(uint64(m.Count))
	}
	return n
}

func (m *HolyBeastPointAddAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	if m.HolyPoint != 0 {
		n += 1 + sovHolyBeast(uint64(m.HolyPoint))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovHolyBeast(uint64(l))
	}
	return n
}

func (m *HolyBeastChoosePropReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		n += 1 + sovHolyBeast(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovHolyBeast(uint64(m.Index))
	}
	return n
}

func (m *HolyBeastChoosePropAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, v := range m.HolyBeastInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHolyBeast(uint64(l))
			}
			mapEntrySize := 1 + sovHolyBeast(uint64(k)) + l
			n += mapEntrySize + 1 + sovHolyBeast(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *HolyBeastRestReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	if m.Type != 0 {
		n += 1 + sovHolyBeast(uint64(m.Type))
	}
	return n
}

func (m *HolyBeastRestAck) Size() (n int) {
	var l int
	_ = l
	if len(m.HolyBeastInfos) > 0 {
		for k, v := range m.HolyBeastInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovHolyBeast(uint64(l))
			}
			mapEntrySize := 1 + sovHolyBeast(uint64(k)) + l
			n += mapEntrySize + 1 + sovHolyBeast(uint64(mapEntrySize))
		}
	}
	if m.HolyPoint != 0 {
		n += 1 + sovHolyBeast(uint64(m.HolyPoint))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovHolyBeast(uint64(l))
	}
	return n
}

func (m *HolyBeastInfos) Size() (n int) {
	var l int
	_ = l
	if len(m.HolyBeastInfo) > 0 {
		for _, e := range m.HolyBeastInfo {
			l = e.Size()
			n += 1 + l + sovHolyBeast(uint64(l))
		}
	}
	if m.AllPonts != 0 {
		n += 1 + sovHolyBeast(uint64(m.AllPonts))
	}
	if m.HeroIndex != 0 {
		n += 1 + sovHolyBeast(uint64(m.HeroIndex))
	}
	return n
}

func (m *HolyBeastInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHolyBeast(uint64(m.Type))
	}
	if m.Star != 0 {
		n += 1 + sovHolyBeast(uint64(m.Star))
	}
	if len(m.ChooseProperty) > 0 {
		for k, v := range m.ChooseProperty {
			_ = k
			_ = v
			mapEntrySize := 1 + sovHolyBeast(uint64(k)) + 1 + sovHolyBeast(uint64(v))
			n += mapEntrySize + 1 + sovHolyBeast(uint64(mapEntrySize))
		}
	}
	return n
}

func sovHolyBeast(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHolyBeast(x uint64) (n int) {
	return sovHolyBeast(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HolyBeastLoadInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastLoadInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastLoadInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastLoadInfoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastLoadInfoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastLoadInfoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyBeastInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HolyBeastInfos == nil {
				m.HolyBeastInfos = make(map[int32]*HolyBeastInfos)
			}
			var mapkey int32
			var mapvalue *HolyBeastInfos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HolyBeastInfos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHolyBeast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HolyBeastInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastActivateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastActivateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastActivateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastActivateAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastActivateAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastActivateAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyBeastInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HolyBeastInfos == nil {
				m.HolyBeastInfos = make(map[int32]*HolyBeastInfos)
			}
			var mapkey int32
			var mapvalue *HolyBeastInfos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HolyBeastInfos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHolyBeast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HolyBeastInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyPoint", wireType)
			}
			m.HolyPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HolyPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastUpStarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastUpStarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastUpStarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastUpStarAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastUpStarAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastUpStarAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyBeastInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HolyBeastInfos == nil {
				m.HolyBeastInfos = make(map[int32]*HolyBeastInfos)
			}
			var mapkey int32
			var mapvalue *HolyBeastInfos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HolyBeastInfos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHolyBeast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HolyBeastInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyPoint", wireType)
			}
			m.HolyPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HolyPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastPointAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastPointAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastPointAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseItemId", wireType)
			}
			m.UseItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastPointAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastPointAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastPointAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyPoint", wireType)
			}
			m.HolyPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HolyPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastChoosePropReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastChoosePropReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastChoosePropReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastChoosePropAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastChoosePropAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastChoosePropAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyBeastInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HolyBeastInfos == nil {
				m.HolyBeastInfos = make(map[int32]*HolyBeastInfos)
			}
			var mapkey int32
			var mapvalue *HolyBeastInfos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HolyBeastInfos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHolyBeast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HolyBeastInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastRestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastRestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastRestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastRestAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastRestAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastRestAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyBeastInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HolyBeastInfos == nil {
				m.HolyBeastInfos = make(map[int32]*HolyBeastInfos)
			}
			var mapkey int32
			var mapvalue *HolyBeastInfos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HolyBeastInfos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHolyBeast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HolyBeastInfos[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyPoint", wireType)
			}
			m.HolyPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HolyPoint |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HolyBeastInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HolyBeastInfo = append(m.HolyBeastInfo, &HolyBeastInfo{})
			if err := m.HolyBeastInfo[len(m.HolyBeastInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPonts", wireType)
			}
			m.AllPonts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllPonts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyBeastInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyBeastInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyBeastInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Star", wireType)
			}
			m.Star = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Star |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChooseProperty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyBeast
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChooseProperty == nil {
				m.ChooseProperty = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowHolyBeast
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipHolyBeast(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthHolyBeast
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChooseProperty[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyBeast(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyBeast
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHolyBeast(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHolyBeast
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHolyBeast
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHolyBeast
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHolyBeast
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHolyBeast(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHolyBeast = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHolyBeast   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("holyBeast.proto", fileDescriptorHolyBeast) }

var fileDescriptorHolyBeast = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0xdd, 0x8a, 0xd3, 0x40,
	0x14, 0x76, 0x9a, 0x8d, 0xb8, 0x67, 0xdd, 0x5a, 0x67, 0xcb, 0x12, 0xca, 0x52, 0x4a, 0x40, 0x08,
	0x22, 0xb9, 0x58, 0x2f, 0x14, 0xef, 0xba, 0xf5, 0x67, 0x0b, 0x2a, 0x65, 0x74, 0xbd, 0x36, 0x4d,
	0x66, 0x37, 0x65, 0xdb, 0x4c, 0x36, 0x99, 0x2e, 0x06, 0xbc, 0xdb, 0x97, 0xf0, 0x7d, 0xbc, 0x50,
	0xef, 0x7c, 0x01, 0x41, 0xeb, 0x8b, 0xc8, 0x4c, 0xd2, 0x34, 0xd3, 0xa6, 0x6c, 0xa9, 0x14, 0xbd,
	0x28, 0xcc, 0x9c, 0xf3, 0x9d, 0x9f, 0xef, 0x3b, 0x67, 0x1a, 0xb8, 0xe3, 0xb3, 0x61, 0x72, 0x44,
	0x9d, 0x98, 0xdb, 0x61, 0xc4, 0x38, 0xc3, 0x95, 0xb0, 0xdf, 0xb8, 0xed, 0xb2, 0xd1, 0x88, 0x05,
	0xa9, 0xc5, 0xdc, 0x87, 0xfa, 0xf1, 0x14, 0xf4, 0x92, 0x39, 0x5e, 0x37, 0x38, 0x65, 0x84, 0x5e,
	0x98, 0x9f, 0x51, 0x89, 0xa3, 0xed, 0x9e, 0xe3, 0xb7, 0x50, 0xcd, 0xb3, 0x0a, 0x5b, 0x6c, 0xa0,
	0x96, 0x66, 0xed, 0x1c, 0x3e, 0xb0, 0xc3, 0xbe, 0x5d, 0x16, 0x31, 0x33, 0x4a, 0xf8, 0xb3, 0x80,
	0x47, 0x09, 0x99, 0xcb, 0xd1, 0x38, 0x81, 0xbd, 0x12, 0x18, 0xae, 0x81, 0x76, 0x4e, 0x13, 0x03,
	0xb5, 0x90, 0xa5, 0x13, 0x71, 0xc4, 0x16, 0xe8, 0x97, 0xce, 0x70, 0x4c, 0x8d, 0x4a, 0x0b, 0x59,
	0x3b, 0x87, 0x58, 0xa9, 0x2a, 0x23, 0x49, 0x0a, 0x78, 0x52, 0x79, 0x8c, 0xcc, 0xe3, 0x02, 0x89,
	0xb6, 0xcb, 0x07, 0x97, 0x0e, 0xa7, 0x84, 0x5e, 0xe0, 0x03, 0xd8, 0xf6, 0x69, 0xc4, 0xba, 0x81,
	0x47, 0x3f, 0x64, 0xd9, 0x67, 0x06, 0x8c, 0x61, 0x8b, 0x27, 0x61, 0x5a, 0x42, 0x27, 0xf2, 0x6c,
	0xfe, 0x42, 0x25, 0xa9, 0x56, 0xd7, 0xa3, 0x10, 0xb1, 0x8a, 0x1e, 0xa2, 0x41, 0x01, 0xeb, 0xb1,
	0x41, 0xc0, 0xb3, 0x3e, 0x66, 0x86, 0x4d, 0xa9, 0xf5, 0x1c, 0x70, 0xee, 0x3c, 0x09, 0xdf, 0x70,
	0x27, 0x5a, 0x4f, 0xab, 0x1f, 0x68, 0x21, 0x91, 0x50, 0x8a, 0x2c, 0x51, 0xea, 0xbe, 0xd2, 0x55,
	0x8e, 0xff, 0x7f, 0x75, 0xf2, 0x0b, 0xab, 0x20, 0x0b, 0xb5, 0x3d, 0xef, 0x7a, 0xa5, 0x0e, 0x60,
	0x7b, 0x1c, 0xd3, 0x2e, 0xa7, 0xa3, 0xae, 0x37, 0x6d, 0x35, 0x37, 0xe0, 0x3a, 0xe8, 0x2e, 0x1b,
	0x07, 0xdc, 0xd0, 0xa4, 0x27, 0xbd, 0x98, 0x1f, 0x4b, 0x2a, 0x09, 0x29, 0xaf, 0xad, 0xb4, 0x5c,
	0x14, 0xc1, 0xf5, 0x8c, 0x31, 0x2f, 0x96, 0x95, 0x32, 0xae, 0x2f, 0x84, 0xa1, 0xe3, 0x3b, 0xc1,
	0x19, 0x7d, 0xcd, 0x4f, 0x49, 0x0a, 0x30, 0xdf, 0xc3, 0x7e, 0x5e, 0xbd, 0xe3, 0x33, 0x16, 0xd3,
	0x5e, 0xc4, 0xc2, 0xb5, 0x76, 0x42, 0xf0, 0x1b, 0x48, 0x74, 0xc6, 0x4f, 0x5e, 0xcc, 0x2f, 0xa8,
	0xb4, 0x84, 0xa0, 0xf8, 0x6e, 0xc9, 0xb6, 0xd8, 0xca, 0x6c, 0x94, 0x98, 0x7f, 0xf9, 0x4f, 0xf3,
	0x14, 0x6a, 0xb9, 0x93, 0x50, 0xf1, 0x5b, 0xe7, 0xe5, 0x5c, 0x55, 0xe6, 0xd2, 0x08, 0x25, 0x7a,
	0x4b, 0x94, 0xb0, 0x94, 0x8e, 0x32, 0xf4, 0xdf, 0xbf, 0x9a, 0xd5, 0x17, 0x64, 0x53, 0x5a, 0x5e,
	0x21, 0xa8, 0xaa, 0x5e, 0xfc, 0x08, 0x76, 0x15, 0x0e, 0x99, 0x04, 0x77, 0x17, 0x12, 0x11, 0x15,
	0x87, 0x1b, 0x70, 0xcb, 0x19, 0x0e, 0x7b, 0x2c, 0xe0, 0x71, 0xc6, 0x34, 0xbf, 0xab, 0xf3, 0xd1,
	0xe6, 0xe6, 0x63, 0x7e, 0x43, 0xb0, 0xab, 0xa4, 0xce, 0x27, 0x86, 0x0a, 0x7b, 0x8d, 0x61, 0x2b,
	0xe6, 0x4e, 0x34, 0x9d, 0xa2, 0x38, 0xe3, 0x57, 0x50, 0x75, 0xf3, 0xbd, 0xa4, 0x11, 0x4f, 0x0c,
	0x4d, 0x76, 0x7b, 0x6f, 0xa1, 0x5b, 0xbb, 0xa3, 0xe0, 0xb2, 0x69, 0xa9, 0xc1, 0x8d, 0x36, 0xec,
	0x95, 0xc0, 0x4a, 0x54, 0xae, 0x17, 0x55, 0xd6, 0x0b, 0x8a, 0x1e, 0xd5, 0xbe, 0x4e, 0x9a, 0xe8,
	0xfb, 0xa4, 0x89, 0x7e, 0x4e, 0x9a, 0xe8, 0xd3, 0xef, 0xe6, 0x8d, 0xfe, 0x4d, 0xf9, 0xf9, 0x7f,
	0xf8, 0x27, 0x00, 0x00, 0xff, 0xff, 0xc3, 0x91, 0x82, 0xa1, 0x23, 0x08, 0x00, 0x00,
}
