// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ancientBoss.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 加载列表
type AncientBossLoadReq struct {
	Area int32 `protobuf:"varint,1,opt,name=area,proto3" json:"area,omitempty"`
}

func (m *AncientBossLoadReq) Reset()                    { *m = AncientBossLoadReq{} }
func (m *AncientBossLoadReq) String() string            { return proto.CompactTextString(m) }
func (*AncientBossLoadReq) ProtoMessage()               {}
func (*AncientBossLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{0} }

func (m *AncientBossLoadReq) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

type AncientBossLoadAck struct {
	AncientBoss []*AncientBossNtf `protobuf:"bytes,1,rep,name=ancientBoss" json:"ancientBoss,omitempty"`
}

func (m *AncientBossLoadAck) Reset()                    { *m = AncientBossLoadAck{} }
func (m *AncientBossLoadAck) String() string            { return proto.CompactTextString(m) }
func (*AncientBossLoadAck) ProtoMessage()               {}
func (*AncientBossLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{1} }

func (m *AncientBossLoadAck) GetAncientBoss() []*AncientBossNtf {
	if m != nil {
		return m.AncientBoss
	}
	return nil
}

// 购买次数
type AncientBossBuyNumReq struct {
	Use    bool  `protobuf:"varint,1,opt,name=use,proto3" json:"use,omitempty"`
	BuyNum int32 `protobuf:"varint,2,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
}

func (m *AncientBossBuyNumReq) Reset()                    { *m = AncientBossBuyNumReq{} }
func (m *AncientBossBuyNumReq) String() string            { return proto.CompactTextString(m) }
func (*AncientBossBuyNumReq) ProtoMessage()               {}
func (*AncientBossBuyNumReq) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{2} }

func (m *AncientBossBuyNumReq) GetUse() bool {
	if m != nil {
		return m.Use
	}
	return false
}

func (m *AncientBossBuyNumReq) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

type AncientBossBuyNumAck struct {
	BuyNum int32 `protobuf:"varint,1,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
}

func (m *AncientBossBuyNumAck) Reset()                    { *m = AncientBossBuyNumAck{} }
func (m *AncientBossBuyNumAck) String() string            { return proto.CompactTextString(m) }
func (*AncientBossBuyNumAck) ProtoMessage()               {}
func (*AncientBossBuyNumAck) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{3} }

func (m *AncientBossBuyNumAck) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

// 战斗
type EnterAncientBossFightReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterAncientBossFightReq) Reset()         { *m = EnterAncientBossFightReq{} }
func (m *EnterAncientBossFightReq) String() string { return proto.CompactTextString(m) }
func (*EnterAncientBossFightReq) ProtoMessage()    {}
func (*EnterAncientBossFightReq) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientBoss, []int{4}
}

func (m *EnterAncientBossFightReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type EnterAncientBossFightAck struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	DareNum int32 `protobuf:"varint,2,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
}

func (m *EnterAncientBossFightAck) Reset()         { *m = EnterAncientBossFightAck{} }
func (m *EnterAncientBossFightAck) String() string { return proto.CompactTextString(m) }
func (*EnterAncientBossFightAck) ProtoMessage()    {}
func (*EnterAncientBossFightAck) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientBoss, []int{5}
}

func (m *EnterAncientBossFightAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *EnterAncientBossFightAck) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

type AncientBossFightResultNtf struct {
	StageId int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Result  int32           `protobuf:"varint,2,opt,name=result,proto3" json:"result,omitempty"`
	DareNum int32           `protobuf:"varint,3,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
	Winner  *BriefUserInfo  `protobuf:"bytes,4,opt,name=winner" json:"winner,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,5,opt,name=goods" json:"goods,omitempty"`
}

func (m *AncientBossFightResultNtf) Reset()         { *m = AncientBossFightResultNtf{} }
func (m *AncientBossFightResultNtf) String() string { return proto.CompactTextString(m) }
func (*AncientBossFightResultNtf) ProtoMessage()    {}
func (*AncientBossFightResultNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorAncientBoss, []int{6}
}

func (m *AncientBossFightResultNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *AncientBossFightResultNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *AncientBossFightResultNtf) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func (m *AncientBossFightResultNtf) GetWinner() *BriefUserInfo {
	if m != nil {
		return m.Winner
	}
	return nil
}

func (m *AncientBossFightResultNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 归属列表
type AncientBossOwnerReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *AncientBossOwnerReq) Reset()                    { *m = AncientBossOwnerReq{} }
func (m *AncientBossOwnerReq) String() string            { return proto.CompactTextString(m) }
func (*AncientBossOwnerReq) ProtoMessage()               {}
func (*AncientBossOwnerReq) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{7} }

func (m *AncientBossOwnerReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type AncientBossOwnerAck struct {
	StageId int32                   `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	List    []*AncientBossOwnerInfo `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
}

func (m *AncientBossOwnerAck) Reset()                    { *m = AncientBossOwnerAck{} }
func (m *AncientBossOwnerAck) String() string            { return proto.CompactTextString(m) }
func (*AncientBossOwnerAck) ProtoMessage()               {}
func (*AncientBossOwnerAck) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{8} }

func (m *AncientBossOwnerAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *AncientBossOwnerAck) GetList() []*AncientBossOwnerInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type AncientBossOwnerInfo struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Time int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *AncientBossOwnerInfo) Reset()                    { *m = AncientBossOwnerInfo{} }
func (m *AncientBossOwnerInfo) String() string            { return proto.CompactTextString(m) }
func (*AncientBossOwnerInfo) ProtoMessage()               {}
func (*AncientBossOwnerInfo) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{9} }

func (m *AncientBossOwnerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AncientBossOwnerInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type AncientBossNtf struct {
	StageId    int32   `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Blood      float32 `protobuf:"fixed32,2,opt,name=blood,proto3" json:"blood,omitempty"`
	ReliveTime int64   `protobuf:"varint,3,opt,name=reliveTime,proto3" json:"reliveTime,omitempty"`
	Area       int32   `protobuf:"varint,4,opt,name=area,proto3" json:"area,omitempty"`
	UserCount  int32   `protobuf:"varint,5,opt,name=userCount,proto3" json:"userCount,omitempty"`
}

func (m *AncientBossNtf) Reset()                    { *m = AncientBossNtf{} }
func (m *AncientBossNtf) String() string            { return proto.CompactTextString(m) }
func (*AncientBossNtf) ProtoMessage()               {}
func (*AncientBossNtf) Descriptor() ([]byte, []int) { return fileDescriptorAncientBoss, []int{10} }

func (m *AncientBossNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *AncientBossNtf) GetBlood() float32 {
	if m != nil {
		return m.Blood
	}
	return 0
}

func (m *AncientBossNtf) GetReliveTime() int64 {
	if m != nil {
		return m.ReliveTime
	}
	return 0
}

func (m *AncientBossNtf) GetArea() int32 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *AncientBossNtf) GetUserCount() int32 {
	if m != nil {
		return m.UserCount
	}
	return 0
}

func init() {
	proto.RegisterType((*AncientBossLoadReq)(nil), "pb.AncientBossLoadReq")
	proto.RegisterType((*AncientBossLoadAck)(nil), "pb.AncientBossLoadAck")
	proto.RegisterType((*AncientBossBuyNumReq)(nil), "pb.AncientBossBuyNumReq")
	proto.RegisterType((*AncientBossBuyNumAck)(nil), "pb.AncientBossBuyNumAck")
	proto.RegisterType((*EnterAncientBossFightReq)(nil), "pb.EnterAncientBossFightReq")
	proto.RegisterType((*EnterAncientBossFightAck)(nil), "pb.EnterAncientBossFightAck")
	proto.RegisterType((*AncientBossFightResultNtf)(nil), "pb.AncientBossFightResultNtf")
	proto.RegisterType((*AncientBossOwnerReq)(nil), "pb.AncientBossOwnerReq")
	proto.RegisterType((*AncientBossOwnerAck)(nil), "pb.AncientBossOwnerAck")
	proto.RegisterType((*AncientBossOwnerInfo)(nil), "pb.AncientBossOwnerInfo")
	proto.RegisterType((*AncientBossNtf)(nil), "pb.AncientBossNtf")
}
func (m *AncientBossLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Area != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.Area))
	}
	return i, nil
}

func (m *AncientBossLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AncientBoss) > 0 {
		for _, msg := range m.AncientBoss {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAncientBoss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AncientBossBuyNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossBuyNumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Use {
		dAtA[i] = 0x8
		i++
		if m.Use {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BuyNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.BuyNum))
	}
	return i, nil
}

func (m *AncientBossBuyNumAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossBuyNumAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BuyNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.BuyNum))
	}
	return i, nil
}

func (m *EnterAncientBossFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterAncientBossFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *EnterAncientBossFightAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterAncientBossFightAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.StageId))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.DareNum))
	}
	return i, nil
}

func (m *AncientBossFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.StageId))
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.Result))
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.DareNum))
	}
	if m.Winner != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.Winner.Size()))
		n1, err := m.Winner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Goods != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *AncientBossOwnerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossOwnerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *AncientBossOwnerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossOwnerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.StageId))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAncientBoss(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AncientBossOwnerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossOwnerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.Time))
	}
	return i, nil
}

func (m *AncientBossNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AncientBossNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.StageId))
	}
	if m.Blood != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Blood))))
		i += 4
	}
	if m.ReliveTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.ReliveTime))
	}
	if m.Area != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.Area))
	}
	if m.UserCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAncientBoss(dAtA, i, uint64(m.UserCount))
	}
	return i, nil
}

func encodeVarintAncientBoss(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AncientBossLoadReq) Size() (n int) {
	var l int
	_ = l
	if m.Area != 0 {
		n += 1 + sovAncientBoss(uint64(m.Area))
	}
	return n
}

func (m *AncientBossLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.AncientBoss) > 0 {
		for _, e := range m.AncientBoss {
			l = e.Size()
			n += 1 + l + sovAncientBoss(uint64(l))
		}
	}
	return n
}

func (m *AncientBossBuyNumReq) Size() (n int) {
	var l int
	_ = l
	if m.Use {
		n += 2
	}
	if m.BuyNum != 0 {
		n += 1 + sovAncientBoss(uint64(m.BuyNum))
	}
	return n
}

func (m *AncientBossBuyNumAck) Size() (n int) {
	var l int
	_ = l
	if m.BuyNum != 0 {
		n += 1 + sovAncientBoss(uint64(m.BuyNum))
	}
	return n
}

func (m *EnterAncientBossFightReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovAncientBoss(uint64(m.StageId))
	}
	return n
}

func (m *EnterAncientBossFightAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovAncientBoss(uint64(m.StageId))
	}
	if m.DareNum != 0 {
		n += 1 + sovAncientBoss(uint64(m.DareNum))
	}
	return n
}

func (m *AncientBossFightResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovAncientBoss(uint64(m.StageId))
	}
	if m.Result != 0 {
		n += 1 + sovAncientBoss(uint64(m.Result))
	}
	if m.DareNum != 0 {
		n += 1 + sovAncientBoss(uint64(m.DareNum))
	}
	if m.Winner != nil {
		l = m.Winner.Size()
		n += 1 + l + sovAncientBoss(uint64(l))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovAncientBoss(uint64(l))
	}
	return n
}

func (m *AncientBossOwnerReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovAncientBoss(uint64(m.StageId))
	}
	return n
}

func (m *AncientBossOwnerAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovAncientBoss(uint64(m.StageId))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAncientBoss(uint64(l))
		}
	}
	return n
}

func (m *AncientBossOwnerInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAncientBoss(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovAncientBoss(uint64(m.Time))
	}
	return n
}

func (m *AncientBossNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovAncientBoss(uint64(m.StageId))
	}
	if m.Blood != 0 {
		n += 5
	}
	if m.ReliveTime != 0 {
		n += 1 + sovAncientBoss(uint64(m.ReliveTime))
	}
	if m.Area != 0 {
		n += 1 + sovAncientBoss(uint64(m.Area))
	}
	if m.UserCount != 0 {
		n += 1 + sovAncientBoss(uint64(m.UserCount))
	}
	return n
}

func sovAncientBoss(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAncientBoss(x uint64) (n int) {
	return sovAncientBoss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AncientBossLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AncientBoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncientBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AncientBoss = append(m.AncientBoss, &AncientBossNtf{})
			if err := m.AncientBoss[len(m.AncientBoss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossBuyNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossBuyNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossBuyNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Use = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossBuyNumAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossBuyNumAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossBuyNumAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterAncientBossFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterAncientBossFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterAncientBossFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterAncientBossFightAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterAncientBossFightAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterAncientBossFightAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Winner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncientBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Winner == nil {
				m.Winner = &BriefUserInfo{}
			}
			if err := m.Winner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncientBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossOwnerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossOwnerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossOwnerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossOwnerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossOwnerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossOwnerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncientBoss
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AncientBossOwnerInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossOwnerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossOwnerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossOwnerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAncientBoss
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AncientBossNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AncientBossNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AncientBossNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blood", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Blood = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReliveTime", wireType)
			}
			m.ReliveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReliveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCount", wireType)
			}
			m.UserCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncientBoss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncientBoss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAncientBoss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAncientBoss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncientBoss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAncientBoss
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAncientBoss
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAncientBoss(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAncientBoss = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAncientBoss   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("ancientBoss.proto", fileDescriptorAncientBoss) }

var fileDescriptorAncientBoss = []byte{
	// 458 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0xe3, 0x38, 0xd0, 0x09, 0x42, 0xed, 0x52, 0x55, 0x06, 0x21, 0x2b, 0xda, 0x93, 0x91,
	0x50, 0x90, 0x4a, 0xcf, 0x88, 0xa6, 0x02, 0x54, 0x84, 0x82, 0xb4, 0x82, 0x23, 0x07, 0x3b, 0x9e,
	0xa4, 0x16, 0xf1, 0x6e, 0xd8, 0x5d, 0x53, 0xf1, 0x1a, 0x9c, 0x78, 0x18, 0x1e, 0x80, 0x23, 0x8f,
	0x80, 0xc2, 0x8b, 0xa0, 0x1d, 0x27, 0xb5, 0x43, 0x48, 0x6e, 0xf3, 0xf3, 0xcd, 0x7c, 0xdf, 0xce,
	0xce, 0xc0, 0x51, 0xaa, 0x26, 0x05, 0x2a, 0x37, 0xd2, 0xd6, 0x0e, 0x17, 0x46, 0x3b, 0xcd, 0x3b,
	0x8b, 0xec, 0xe1, 0xdd, 0x89, 0x2e, 0x4b, 0xad, 0xea, 0x88, 0x48, 0x80, 0x9f, 0x37, 0xb0, 0xb7,
	0x3a, 0xcd, 0x25, 0x7e, 0xe6, 0x1c, 0xba, 0xa9, 0xc1, 0x34, 0x62, 0x03, 0x96, 0x84, 0x92, 0x6c,
	0xf1, 0x66, 0x0b, 0x79, 0x3e, 0xf9, 0xc4, 0xcf, 0xa0, 0xdf, 0xa2, 0x89, 0xd8, 0x20, 0x48, 0xfa,
	0xa7, 0x7c, 0xb8, 0xc8, 0x86, 0x2d, 0xf0, 0xd8, 0x4d, 0x65, 0x1b, 0x26, 0x5e, 0xc0, 0x71, 0x2b,
	0x3d, 0xaa, 0xbe, 0x8e, 0xab, 0xd2, 0xf3, 0x1e, 0x42, 0x50, 0x59, 0x24, 0xda, 0x3b, 0xd2, 0x9b,
	0xfc, 0x04, 0x7a, 0x19, 0xa5, 0xa3, 0x0e, 0x69, 0x59, 0x79, 0x62, 0xf8, 0x9f, 0x0e, 0x5e, 0x4f,
	0x83, 0x67, 0x1b, 0xf8, 0x33, 0x88, 0x5e, 0x2a, 0x87, 0xa6, 0x55, 0xf4, 0xaa, 0x98, 0x5d, 0x39,
	0xcf, 0x1a, 0xc1, 0x6d, 0xeb, 0xd2, 0x19, 0x5e, 0xe6, 0xab, 0xa2, 0xb5, 0x2b, 0xc6, 0x3b, 0xaa,
	0x3c, 0xd3, 0xce, 0x2a, 0x9f, 0xc9, 0x53, 0x83, 0x8d, 0xe8, 0xb5, 0x2b, 0x7e, 0x30, 0x78, 0xb0,
	0xad, 0xc0, 0x56, 0x73, 0x37, 0x76, 0xd3, 0x3d, 0x1d, 0x4f, 0xa0, 0x67, 0x08, 0xb6, 0x9e, 0x42,
	0xed, 0xb5, 0x99, 0x82, 0x0d, 0x26, 0xfe, 0x18, 0x7a, 0xd7, 0x85, 0x52, 0x68, 0xa2, 0xee, 0x80,
	0x25, 0xfd, 0xd3, 0x23, 0xff, 0x25, 0x23, 0x53, 0xe0, 0xf4, 0x83, 0x45, 0x73, 0xa9, 0xa6, 0x5a,
	0xae, 0x00, 0x3c, 0x81, 0x70, 0xa6, 0x75, 0x6e, 0xa3, 0x90, 0x90, 0xf4, 0x79, 0xaf, 0x7d, 0xe0,
	0xe2, 0x2a, 0x55, 0x33, 0xf4, 0x9f, 0x57, 0x03, 0xc4, 0x53, 0xb8, 0xdf, 0x52, 0xff, 0xee, 0x5a,
	0xa1, 0xd9, 0x3f, 0xbf, 0x8f, 0xdb, 0x05, 0xfb, 0x47, 0xf7, 0x04, 0xba, 0xf3, 0xc2, 0xfa, 0x67,
	0xfa, 0x3d, 0x8a, 0xfe, 0xd9, 0x23, 0x6a, 0x40, 0xda, 0x09, 0x25, 0x9e, 0x6f, 0x2c, 0xc1, 0x4d,
	0xd6, 0xaf, 0xaf, 0x4a, 0xcb, 0x7a, 0x8f, 0x0e, 0x24, 0xd9, 0x3e, 0xe6, 0x8a, 0x12, 0x69, 0x80,
	0x81, 0x24, 0x5b, 0x7c, 0x63, 0x70, 0x6f, 0x73, 0x4d, 0xf7, 0x48, 0x3b, 0x86, 0x30, 0x9b, 0x6b,
	0x9d, 0x53, 0x87, 0x8e, 0xac, 0x1d, 0x1e, 0x03, 0x18, 0x9c, 0x17, 0x5f, 0xf0, 0xbd, 0x6f, 0x1e,
	0x50, 0xf3, 0x56, 0xe4, 0xe6, 0x92, 0xba, 0xcd, 0x25, 0xf1, 0x47, 0x70, 0x50, 0x59, 0x34, 0x17,
	0xba, 0x52, 0x8e, 0x86, 0x1e, 0xca, 0x26, 0x30, 0x3a, 0xfc, 0xb9, 0x8c, 0xd9, 0xaf, 0x65, 0xcc,
	0x7e, 0x2f, 0x63, 0xf6, 0xfd, 0x4f, 0x7c, 0x2b, 0xeb, 0xd1, 0xa9, 0x3e, 0xfb, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x0f, 0x23, 0x95, 0x24, 0xd1, 0x03, 0x00, 0x00,
}
