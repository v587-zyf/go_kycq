// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mail.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MailReadReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MailReadReq) Reset()                    { *m = MailReadReq{} }
func (m *MailReadReq) String() string            { return proto.CompactTextString(m) }
func (*MailReadReq) ProtoMessage()               {}
func (*MailReadReq) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{0} }

func (m *MailReadReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MailReadAck struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MailReadAck) Reset()                    { *m = MailReadAck{} }
func (m *MailReadAck) String() string            { return proto.CompactTextString(m) }
func (*MailReadAck) ProtoMessage()               {}
func (*MailReadAck) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{1} }

func (m *MailReadAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MailRedeemReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MailRedeemReq) Reset()                    { *m = MailRedeemReq{} }
func (m *MailRedeemReq) String() string            { return proto.CompactTextString(m) }
func (*MailRedeemReq) ProtoMessage()               {}
func (*MailRedeemReq) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{2} }

func (m *MailRedeemReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MailRedeemAck struct {
	Id           int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GoodsChanges *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goodsChanges" json:"goodsChanges,omitempty"`
	Mail         *MailNtf        `protobuf:"bytes,3,opt,name=mail" json:"mail,omitempty"`
}

func (m *MailRedeemAck) Reset()                    { *m = MailRedeemAck{} }
func (m *MailRedeemAck) String() string            { return proto.CompactTextString(m) }
func (*MailRedeemAck) ProtoMessage()               {}
func (*MailRedeemAck) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{3} }

func (m *MailRedeemAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MailRedeemAck) GetGoodsChanges() *GoodsChangeNtf {
	if m != nil {
		return m.GoodsChanges
	}
	return nil
}

func (m *MailRedeemAck) GetMail() *MailNtf {
	if m != nil {
		return m.Mail
	}
	return nil
}

type MailRedeemAllReq struct {
}

func (m *MailRedeemAllReq) Reset()                    { *m = MailRedeemAllReq{} }
func (m *MailRedeemAllReq) String() string            { return proto.CompactTextString(m) }
func (*MailRedeemAllReq) ProtoMessage()               {}
func (*MailRedeemAllReq) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{4} }

type MailRedeemAllAck struct {
	Ids          []int32         `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"`
	GoodsChanges *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goodsChanges" json:"goodsChanges,omitempty"`
	Mail         []*MailNtf      `protobuf:"bytes,3,rep,name=mail" json:"mail,omitempty"`
}

func (m *MailRedeemAllAck) Reset()                    { *m = MailRedeemAllAck{} }
func (m *MailRedeemAllAck) String() string            { return proto.CompactTextString(m) }
func (*MailRedeemAllAck) ProtoMessage()               {}
func (*MailRedeemAllAck) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{5} }

func (m *MailRedeemAllAck) GetIds() []int32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *MailRedeemAllAck) GetGoodsChanges() *GoodsChangeNtf {
	if m != nil {
		return m.GoodsChanges
	}
	return nil
}

func (m *MailRedeemAllAck) GetMail() []*MailNtf {
	if m != nil {
		return m.Mail
	}
	return nil
}

type MailNtf struct {
	Id         int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       int32       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Sender     string      `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Title      string      `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Content    string      `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
	Status     int32       `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	ExpireAt   int32       `protobuf:"varint,7,opt,name=expireAt,proto3" json:"expireAt,omitempty"`
	CreatedAt  int32       `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	RedeemedAt int32       `protobuf:"varint,9,opt,name=redeemedAt,proto3" json:"redeemedAt,omitempty"`
	Args       []string    `protobuf:"bytes,11,rep,name=args" json:"args,omitempty"`
	Items      []*ItemUnit `protobuf:"bytes,12,rep,name=items" json:"items,omitempty"`
}

func (m *MailNtf) Reset()                    { *m = MailNtf{} }
func (m *MailNtf) String() string            { return proto.CompactTextString(m) }
func (*MailNtf) ProtoMessage()               {}
func (*MailNtf) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{6} }

func (m *MailNtf) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MailNtf) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MailNtf) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MailNtf) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MailNtf) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MailNtf) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *MailNtf) GetExpireAt() int32 {
	if m != nil {
		return m.ExpireAt
	}
	return 0
}

func (m *MailNtf) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *MailNtf) GetRedeemedAt() int32 {
	if m != nil {
		return m.RedeemedAt
	}
	return 0
}

func (m *MailNtf) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *MailNtf) GetItems() []*ItemUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

type MailLoadReq struct {
}

func (m *MailLoadReq) Reset()                    { *m = MailLoadReq{} }
func (m *MailLoadReq) String() string            { return proto.CompactTextString(m) }
func (*MailLoadReq) ProtoMessage()               {}
func (*MailLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{7} }

type MailLoadAck struct {
	Mails []*MailNtf `protobuf:"bytes,1,rep,name=mails" json:"mails,omitempty"`
}

func (m *MailLoadAck) Reset()                    { *m = MailLoadAck{} }
func (m *MailLoadAck) String() string            { return proto.CompactTextString(m) }
func (*MailLoadAck) ProtoMessage()               {}
func (*MailLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{8} }

func (m *MailLoadAck) GetMails() []*MailNtf {
	if m != nil {
		return m.Mails
	}
	return nil
}

type MailDeleteReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MailDeleteReq) Reset()                    { *m = MailDeleteReq{} }
func (m *MailDeleteReq) String() string            { return proto.CompactTextString(m) }
func (*MailDeleteReq) ProtoMessage()               {}
func (*MailDeleteReq) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{9} }

func (m *MailDeleteReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MailDeleteAck struct {
	Mail *MailNtf `protobuf:"bytes,1,opt,name=mail" json:"mail,omitempty"`
}

func (m *MailDeleteAck) Reset()                    { *m = MailDeleteAck{} }
func (m *MailDeleteAck) String() string            { return proto.CompactTextString(m) }
func (*MailDeleteAck) ProtoMessage()               {}
func (*MailDeleteAck) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{10} }

func (m *MailDeleteAck) GetMail() *MailNtf {
	if m != nil {
		return m.Mail
	}
	return nil
}

type MailDeleteAllReq struct {
}

func (m *MailDeleteAllReq) Reset()                    { *m = MailDeleteAllReq{} }
func (m *MailDeleteAllReq) String() string            { return proto.CompactTextString(m) }
func (*MailDeleteAllReq) ProtoMessage()               {}
func (*MailDeleteAllReq) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{11} }

type MailDeleteAllAck struct {
	Mails []*MailNtf `protobuf:"bytes,1,rep,name=mails" json:"mails,omitempty"`
}

func (m *MailDeleteAllAck) Reset()                    { *m = MailDeleteAllAck{} }
func (m *MailDeleteAllAck) String() string            { return proto.CompactTextString(m) }
func (*MailDeleteAllAck) ProtoMessage()               {}
func (*MailDeleteAllAck) Descriptor() ([]byte, []int) { return fileDescriptorMail, []int{12} }

func (m *MailDeleteAllAck) GetMails() []*MailNtf {
	if m != nil {
		return m.Mails
	}
	return nil
}

func init() {
	proto.RegisterType((*MailReadReq)(nil), "pb.MailReadReq")
	proto.RegisterType((*MailReadAck)(nil), "pb.MailReadAck")
	proto.RegisterType((*MailRedeemReq)(nil), "pb.MailRedeemReq")
	proto.RegisterType((*MailRedeemAck)(nil), "pb.MailRedeemAck")
	proto.RegisterType((*MailRedeemAllReq)(nil), "pb.MailRedeemAllReq")
	proto.RegisterType((*MailRedeemAllAck)(nil), "pb.MailRedeemAllAck")
	proto.RegisterType((*MailNtf)(nil), "pb.MailNtf")
	proto.RegisterType((*MailLoadReq)(nil), "pb.MailLoadReq")
	proto.RegisterType((*MailLoadAck)(nil), "pb.MailLoadAck")
	proto.RegisterType((*MailDeleteReq)(nil), "pb.MailDeleteReq")
	proto.RegisterType((*MailDeleteAck)(nil), "pb.MailDeleteAck")
	proto.RegisterType((*MailDeleteAllReq)(nil), "pb.MailDeleteAllReq")
	proto.RegisterType((*MailDeleteAllAck)(nil), "pb.MailDeleteAllAck")
}
func (m *MailReadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailReadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MailReadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailReadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MailRedeemReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailRedeemReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MailRedeemAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailRedeemAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	if m.GoodsChanges != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.GoodsChanges.Size()))
		n1, err := m.GoodsChanges.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Mail != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Mail.Size()))
		n2, err := m.Mail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *MailRedeemAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailRedeemAllReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MailRedeemAllAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailRedeemAllAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintMail(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.GoodsChanges != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.GoodsChanges.Size()))
		n5, err := m.GoodsChanges.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Mail) > 0 {
		for _, msg := range m.Mail {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MailNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Type))
	}
	if len(m.Sender) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Sender)))
		i += copy(dAtA[i:], m.Sender)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMail(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Status))
	}
	if m.ExpireAt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.ExpireAt))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.CreatedAt))
	}
	if m.RedeemedAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.RedeemedAt))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			dAtA[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x62
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MailLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MailLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, msg := range m.Mails {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MailDeleteReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailDeleteReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *MailDeleteAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailDeleteAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mail != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMail(dAtA, i, uint64(m.Mail.Size()))
		n6, err := m.Mail.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MailDeleteAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailDeleteAllReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MailDeleteAllAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailDeleteAllAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, msg := range m.Mails {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMail(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MailReadReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	return n
}

func (m *MailReadAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	return n
}

func (m *MailRedeemReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	return n
}

func (m *MailRedeemAck) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	if m.GoodsChanges != nil {
		l = m.GoodsChanges.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *MailRedeemAllReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MailRedeemAllAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovMail(uint64(e))
		}
		n += 1 + sovMail(uint64(l)) + l
	}
	if m.GoodsChanges != nil {
		l = m.GoodsChanges.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	if len(m.Mail) > 0 {
		for _, e := range m.Mail {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *MailNtf) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovMail(uint64(m.Type))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMail(uint64(m.Status))
	}
	if m.ExpireAt != 0 {
		n += 1 + sovMail(uint64(m.ExpireAt))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMail(uint64(m.CreatedAt))
	}
	if m.RedeemedAt != 0 {
		n += 1 + sovMail(uint64(m.RedeemedAt))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *MailLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MailLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *MailDeleteReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMail(uint64(m.Id))
	}
	return n
}

func (m *MailDeleteAck) Size() (n int) {
	var l int
	_ = l
	if m.Mail != nil {
		l = m.Mail.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *MailDeleteAllReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *MailDeleteAllAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func sovMail(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MailReadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailReadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailReadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailReadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailReadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailReadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailRedeemReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailRedeemReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailRedeemReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailRedeemAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailRedeemAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailRedeemAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoodsChanges == nil {
				m.GoodsChanges = &GoodsChangeNtf{}
			}
			if err := m.GoodsChanges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &MailNtf{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailRedeemAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailRedeemAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailRedeemAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailRedeemAllAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailRedeemAllAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailRedeemAllAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMail
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoodsChanges == nil {
				m.GoodsChanges = &GoodsChangeNtf{}
			}
			if err := m.GoodsChanges.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mail = append(m.Mail, &MailNtf{})
			if err := m.Mail[len(m.Mail)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemedAt", wireType)
			}
			m.RedeemedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedeemedAt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemUnit{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &MailNtf{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailDeleteReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailDeleteReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailDeleteReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailDeleteAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailDeleteAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailDeleteAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mail == nil {
				m.Mail = &MailNtf{}
			}
			if err := m.Mail.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailDeleteAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailDeleteAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailDeleteAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailDeleteAllAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailDeleteAllAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailDeleteAllAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &MailNtf{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMail
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMail(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMail = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mail.proto", fileDescriptorMail) }

var fileDescriptorMail = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0xc5, 0x49, 0xd3, 0x6e, 0xa7, 0x5d, 0x54, 0x59, 0x08, 0x59, 0x2b, 0xc8, 0x86, 0x9c, 0x72,
	0xaa, 0x56, 0x20, 0xb8, 0x97, 0x45, 0xe2, 0x02, 0x1c, 0x2c, 0xf1, 0x01, 0x69, 0x3d, 0x14, 0x8b,
	0x24, 0xce, 0x26, 0x46, 0x5a, 0x0e, 0xfc, 0x07, 0x37, 0x7e, 0x87, 0x23, 0x9f, 0x80, 0xca, 0x8f,
	0x20, 0x8f, 0x53, 0x1a, 0xda, 0x48, 0x70, 0xe0, 0xe6, 0x79, 0xef, 0x65, 0x3c, 0x7e, 0xf3, 0x02,
	0x50, 0xe6, 0xba, 0x58, 0xd6, 0x8d, 0xb1, 0x86, 0x07, 0xf5, 0xfa, 0x62, 0xbe, 0x31, 0x65, 0x69,
	0x2a, 0x8f, 0xa4, 0x0f, 0x61, 0xf6, 0x3a, 0xd7, 0x85, 0xc4, 0x5c, 0x49, 0xbc, 0xe1, 0x77, 0x21,
	0xd0, 0x4a, 0xb0, 0x84, 0x65, 0x91, 0x0c, 0xb4, 0xea, 0xd3, 0xab, 0xcd, 0x87, 0x13, 0xfa, 0x12,
	0xce, 0x3d, 0xad, 0x10, 0xcb, 0xa1, 0xef, 0x6f, 0xfb, 0x82, 0x81, 0x0e, 0xfc, 0x19, 0xcc, 0xb7,
	0xc6, 0xa8, 0xf6, 0xfa, 0x7d, 0x5e, 0x6d, 0xb1, 0x15, 0x41, 0xc2, 0xb2, 0xd9, 0x63, 0xbe, 0xac,
	0xd7, 0xcb, 0x97, 0x07, 0xfc, 0x8d, 0x7d, 0x27, 0xff, 0xd0, 0xf1, 0x4b, 0x18, 0xb9, 0x77, 0x89,
	0x90, 0xf4, 0x33, 0xa7, 0x77, 0x17, 0x39, 0x21, 0x11, 0x29, 0x87, 0x45, 0xef, 0xe6, 0xa2, 0x90,
	0x78, 0x93, 0x7e, 0x3e, 0xc2, 0xdc, 0x40, 0x0b, 0x08, 0xb5, 0x6a, 0x05, 0x4b, 0xc2, 0x2c, 0x92,
	0xee, 0xf8, 0x1f, 0x46, 0x0a, 0x87, 0x47, 0xfa, 0x1a, 0xc0, 0xa4, 0x43, 0x4e, 0x7c, 0xe0, 0x30,
	0xb2, 0x9f, 0x6a, 0xa4, 0xcb, 0x22, 0x49, 0x67, 0x7e, 0x1f, 0xc6, 0x2d, 0x56, 0x0a, 0x1b, 0x7a,
	0xe5, 0x54, 0x76, 0x15, 0xbf, 0x07, 0x91, 0xd5, 0xb6, 0x40, 0x31, 0x22, 0xd8, 0x17, 0x5c, 0xc0,
	0xe4, 0xda, 0x54, 0x16, 0x2b, 0x2b, 0x22, 0xc2, 0xf7, 0x25, 0xf5, 0xb1, 0xb9, 0xfd, 0xd8, 0x8a,
	0x31, 0x75, 0xef, 0x2a, 0x7e, 0x01, 0x67, 0x78, 0x5b, 0xeb, 0x06, 0x57, 0x56, 0x4c, 0x88, 0xf9,
	0x5d, 0xf3, 0x07, 0x30, 0xdd, 0x34, 0x98, 0x5b, 0x54, 0x2b, 0x2b, 0xce, 0x88, 0x3c, 0x00, 0x3c,
	0x06, 0x68, 0xc8, 0x44, 0xa2, 0xa7, 0x44, 0xf7, 0x10, 0xf7, 0x9a, 0xbc, 0xd9, 0xb6, 0x62, 0x96,
	0x84, 0xd9, 0x54, 0xd2, 0x99, 0xa7, 0x10, 0x69, 0x8b, 0x65, 0x2b, 0xe6, 0xe4, 0xcf, 0xdc, 0xf9,
	0xe3, 0x80, 0xb7, 0x95, 0xb6, 0xd2, 0x53, 0xe9, 0xb9, 0x8f, 0xdb, 0x2b, 0x43, 0x69, 0x4c, 0xaf,
	0x0e, 0xa5, 0x5b, 0xd5, 0x23, 0x88, 0x9c, 0x8f, 0x7e, 0x59, 0x47, 0x0e, 0x7b, 0x66, 0x1f, 0xc8,
	0x17, 0x58, 0xa0, 0xc5, 0xa1, 0x40, 0x5e, 0xf5, 0x05, 0xae, 0xe9, 0x7e, 0x6b, 0xec, 0x2f, 0x41,
	0xea, 0xbe, 0xf0, 0x41, 0x7a, 0x7a, 0x84, 0xfd, 0xdb, 0x74, 0xcf, 0x17, 0xdf, 0x76, 0x31, 0xfb,
	0xbe, 0x8b, 0xd9, 0x8f, 0x5d, 0xcc, 0xbe, 0xfc, 0x8c, 0xef, 0xac, 0xc7, 0xf4, 0x17, 0x3e, 0xf9,
	0x15, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xf8, 0xbf, 0x1d, 0xa5, 0x03, 0x00, 0x00,
}
