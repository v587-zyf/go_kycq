// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: skill.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 升级技能
type SkillUpLvReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillId   int32 `protobuf:"varint,3,opt,name=skillId,proto3" json:"skillId,omitempty"`
}

func (m *SkillUpLvReq) Reset()                    { *m = SkillUpLvReq{} }
func (m *SkillUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*SkillUpLvReq) ProtoMessage()               {}
func (*SkillUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{0} }

func (m *SkillUpLvReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillUpLvReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

type SkillUpLvAck struct {
	HeroIndex int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillType int32      `protobuf:"varint,2,opt,name=skillType,proto3" json:"skillType,omitempty"`
	Skill     *SkillUnit `protobuf:"bytes,3,opt,name=skill" json:"skill,omitempty"`
}

func (m *SkillUpLvAck) Reset()                    { *m = SkillUpLvAck{} }
func (m *SkillUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*SkillUpLvAck) ProtoMessage()               {}
func (*SkillUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{1} }

func (m *SkillUpLvAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillUpLvAck) GetSkillType() int32 {
	if m != nil {
		return m.SkillType
	}
	return 0
}

func (m *SkillUpLvAck) GetSkill() *SkillUnit {
	if m != nil {
		return m.Skill
	}
	return nil
}

// 换技能位置
type SkillChangePosReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Pos       int32 `protobuf:"varint,2,opt,name=pos,proto3" json:"pos,omitempty"`
	SkillId   int32 `protobuf:"varint,3,opt,name=skillId,proto3" json:"skillId,omitempty"`
}

func (m *SkillChangePosReq) Reset()                    { *m = SkillChangePosReq{} }
func (m *SkillChangePosReq) String() string            { return proto.CompactTextString(m) }
func (*SkillChangePosReq) ProtoMessage()               {}
func (*SkillChangePosReq) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{2} }

func (m *SkillChangePosReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillChangePosReq) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *SkillChangePosReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

type SkillChangePosAck struct {
	HeroIndex int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillType int32           `protobuf:"varint,2,opt,name=skillType,proto3" json:"skillType,omitempty"`
	SkillBags map[int32]int32 `protobuf:"bytes,3,rep,name=skillBags" json:"skillBags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *SkillChangePosAck) Reset()                    { *m = SkillChangePosAck{} }
func (m *SkillChangePosAck) String() string            { return proto.CompactTextString(m) }
func (*SkillChangePosAck) ProtoMessage()               {}
func (*SkillChangePosAck) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{3} }

func (m *SkillChangePosAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillChangePosAck) GetSkillType() int32 {
	if m != nil {
		return m.SkillType
	}
	return 0
}

func (m *SkillChangePosAck) GetSkillBags() map[int32]int32 {
	if m != nil {
		return m.SkillBags
	}
	return nil
}

// 技能装备、卸下
type SkillChangeWearReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillId   int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
}

func (m *SkillChangeWearReq) Reset()                    { *m = SkillChangeWearReq{} }
func (m *SkillChangeWearReq) String() string            { return proto.CompactTextString(m) }
func (*SkillChangeWearReq) ProtoMessage()               {}
func (*SkillChangeWearReq) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{4} }

func (m *SkillChangeWearReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillChangeWearReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

type SkillChangeWearAck struct {
	HeroIndex int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillType int32           `protobuf:"varint,2,opt,name=skillType,proto3" json:"skillType,omitempty"`
	SkillBags map[int32]int32 `protobuf:"bytes,3,rep,name=skillBags" json:"skillBags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *SkillChangeWearAck) Reset()                    { *m = SkillChangeWearAck{} }
func (m *SkillChangeWearAck) String() string            { return proto.CompactTextString(m) }
func (*SkillChangeWearAck) ProtoMessage()               {}
func (*SkillChangeWearAck) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{5} }

func (m *SkillChangeWearAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillChangeWearAck) GetSkillType() int32 {
	if m != nil {
		return m.SkillType
	}
	return 0
}

func (m *SkillChangeWearAck) GetSkillBags() map[int32]int32 {
	if m != nil {
		return m.SkillBags
	}
	return nil
}

// 重置
type SkillResetReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillType int32 `protobuf:"varint,2,opt,name=skillType,proto3" json:"skillType,omitempty"`
}

func (m *SkillResetReq) Reset()                    { *m = SkillResetReq{} }
func (m *SkillResetReq) String() string            { return proto.CompactTextString(m) }
func (*SkillResetReq) ProtoMessage()               {}
func (*SkillResetReq) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{6} }

func (m *SkillResetReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillResetReq) GetSkillType() int32 {
	if m != nil {
		return m.SkillType
	}
	return 0
}

type SkillResetAck struct {
	HeroIndex int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillType int32           `protobuf:"varint,2,opt,name=skillType,proto3" json:"skillType,omitempty"`
	SkillBags map[int32]int32 `protobuf:"bytes,3,rep,name=skillBags" json:"skillBags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Skills    []*SkillUnit    `protobuf:"bytes,4,rep,name=skills" json:"skills,omitempty"`
}

func (m *SkillResetAck) Reset()                    { *m = SkillResetAck{} }
func (m *SkillResetAck) String() string            { return proto.CompactTextString(m) }
func (*SkillResetAck) ProtoMessage()               {}
func (*SkillResetAck) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{7} }

func (m *SkillResetAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillResetAck) GetSkillType() int32 {
	if m != nil {
		return m.SkillType
	}
	return 0
}

func (m *SkillResetAck) GetSkillBags() map[int32]int32 {
	if m != nil {
		return m.SkillBags
	}
	return nil
}

func (m *SkillResetAck) GetSkills() []*SkillUnit {
	if m != nil {
		return m.Skills
	}
	return nil
}

// 使用技能
type SkillUseReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillId   int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
}

func (m *SkillUseReq) Reset()                    { *m = SkillUseReq{} }
func (m *SkillUseReq) String() string            { return proto.CompactTextString(m) }
func (*SkillUseReq) ProtoMessage()               {}
func (*SkillUseReq) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{8} }

func (m *SkillUseReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillUseReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

// cd推送
type SkillUseNtf struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SkillId   int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
	StartTime int64 `protobuf:"varint,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64 `protobuf:"varint,4,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *SkillUseNtf) Reset()                    { *m = SkillUseNtf{} }
func (m *SkillUseNtf) String() string            { return proto.CompactTextString(m) }
func (*SkillUseNtf) ProtoMessage()               {}
func (*SkillUseNtf) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{9} }

func (m *SkillUseNtf) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *SkillUseNtf) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

func (m *SkillUseNtf) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *SkillUseNtf) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type ClearSkillCdNtf struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *ClearSkillCdNtf) Reset()                    { *m = ClearSkillCdNtf{} }
func (m *ClearSkillCdNtf) String() string            { return proto.CompactTextString(m) }
func (*ClearSkillCdNtf) ProtoMessage()               {}
func (*ClearSkillCdNtf) Descriptor() ([]byte, []int) { return fileDescriptorSkill, []int{10} }

func (m *ClearSkillCdNtf) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*SkillUpLvReq)(nil), "pb.SkillUpLvReq")
	proto.RegisterType((*SkillUpLvAck)(nil), "pb.SkillUpLvAck")
	proto.RegisterType((*SkillChangePosReq)(nil), "pb.SkillChangePosReq")
	proto.RegisterType((*SkillChangePosAck)(nil), "pb.SkillChangePosAck")
	proto.RegisterType((*SkillChangeWearReq)(nil), "pb.SkillChangeWearReq")
	proto.RegisterType((*SkillChangeWearAck)(nil), "pb.SkillChangeWearAck")
	proto.RegisterType((*SkillResetReq)(nil), "pb.SkillResetReq")
	proto.RegisterType((*SkillResetAck)(nil), "pb.SkillResetAck")
	proto.RegisterType((*SkillUseReq)(nil), "pb.SkillUseReq")
	proto.RegisterType((*SkillUseNtf)(nil), "pb.SkillUseNtf")
	proto.RegisterType((*ClearSkillCdNtf)(nil), "pb.ClearSkillCdNtf")
}
func (m *SkillUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillId))
	}
	return i, nil
}

func (m *SkillUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillType))
	}
	if m.Skill != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.Skill.Size()))
		n1, err := m.Skill.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SkillChangePosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillChangePosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.Pos))
	}
	if m.SkillId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillId))
	}
	return i, nil
}

func (m *SkillChangePosAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillChangePosAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillType))
	}
	if len(m.SkillBags) > 0 {
		for k, _ := range m.SkillBags {
			dAtA[i] = 0x1a
			i++
			v := m.SkillBags[k]
			mapSize := 1 + sovSkill(uint64(k)) + 1 + sovSkill(uint64(v))
			i = encodeVarintSkill(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintSkill(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintSkill(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *SkillChangeWearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillChangeWearReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillId))
	}
	return i, nil
}

func (m *SkillChangeWearAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillChangeWearAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillType))
	}
	if len(m.SkillBags) > 0 {
		for k, _ := range m.SkillBags {
			dAtA[i] = 0x1a
			i++
			v := m.SkillBags[k]
			mapSize := 1 + sovSkill(uint64(k)) + 1 + sovSkill(uint64(v))
			i = encodeVarintSkill(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintSkill(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintSkill(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *SkillResetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillResetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillType))
	}
	return i, nil
}

func (m *SkillResetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillResetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillType))
	}
	if len(m.SkillBags) > 0 {
		for k, _ := range m.SkillBags {
			dAtA[i] = 0x1a
			i++
			v := m.SkillBags[k]
			mapSize := 1 + sovSkill(uint64(k)) + 1 + sovSkill(uint64(v))
			i = encodeVarintSkill(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintSkill(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintSkill(dAtA, i, uint64(v))
		}
	}
	if len(m.Skills) > 0 {
		for _, msg := range m.Skills {
			dAtA[i] = 0x22
			i++
			i = encodeVarintSkill(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *SkillUseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillUseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillId))
	}
	return i, nil
}

func (m *SkillUseNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillUseNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.SkillId))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *ClearSkillCdNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearSkillCdNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkill(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func encodeVarintSkill(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SkillUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		n += 1 + sovSkill(uint64(m.SkillId))
	}
	return n
}

func (m *SkillUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		n += 1 + sovSkill(uint64(m.SkillType))
	}
	if m.Skill != nil {
		l = m.Skill.Size()
		n += 1 + l + sovSkill(uint64(l))
	}
	return n
}

func (m *SkillChangePosReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.Pos != 0 {
		n += 1 + sovSkill(uint64(m.Pos))
	}
	if m.SkillId != 0 {
		n += 1 + sovSkill(uint64(m.SkillId))
	}
	return n
}

func (m *SkillChangePosAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		n += 1 + sovSkill(uint64(m.SkillType))
	}
	if len(m.SkillBags) > 0 {
		for k, v := range m.SkillBags {
			_ = k
			_ = v
			mapEntrySize := 1 + sovSkill(uint64(k)) + 1 + sovSkill(uint64(v))
			n += mapEntrySize + 1 + sovSkill(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SkillChangeWearReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		n += 1 + sovSkill(uint64(m.SkillId))
	}
	return n
}

func (m *SkillChangeWearAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		n += 1 + sovSkill(uint64(m.SkillType))
	}
	if len(m.SkillBags) > 0 {
		for k, v := range m.SkillBags {
			_ = k
			_ = v
			mapEntrySize := 1 + sovSkill(uint64(k)) + 1 + sovSkill(uint64(v))
			n += mapEntrySize + 1 + sovSkill(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SkillResetReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		n += 1 + sovSkill(uint64(m.SkillType))
	}
	return n
}

func (m *SkillResetAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillType != 0 {
		n += 1 + sovSkill(uint64(m.SkillType))
	}
	if len(m.SkillBags) > 0 {
		for k, v := range m.SkillBags {
			_ = k
			_ = v
			mapEntrySize := 1 + sovSkill(uint64(k)) + 1 + sovSkill(uint64(v))
			n += mapEntrySize + 1 + sovSkill(uint64(mapEntrySize))
		}
	}
	if len(m.Skills) > 0 {
		for _, e := range m.Skills {
			l = e.Size()
			n += 1 + l + sovSkill(uint64(l))
		}
	}
	return n
}

func (m *SkillUseReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		n += 1 + sovSkill(uint64(m.SkillId))
	}
	return n
}

func (m *SkillUseNtf) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	if m.SkillId != 0 {
		n += 1 + sovSkill(uint64(m.SkillId))
	}
	if m.StartTime != 0 {
		n += 1 + sovSkill(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovSkill(uint64(m.EndTime))
	}
	return n
}

func (m *ClearSkillCdNtf) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovSkill(uint64(m.HeroIndex))
	}
	return n
}

func sovSkill(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSkill(x uint64) (n int) {
	return sovSkill(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SkillUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillType", wireType)
			}
			m.SkillType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Skill == nil {
				m.Skill = &SkillUnit{}
			}
			if err := m.Skill.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillChangePosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillChangePosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillChangePosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillChangePosAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillChangePosAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillChangePosAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillType", wireType)
			}
			m.SkillType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillBags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SkillBags == nil {
				m.SkillBags = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkill
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkill
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkill
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkill(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkill
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SkillBags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillChangeWearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillChangeWearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillChangeWearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillChangeWearAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillChangeWearAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillChangeWearAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillType", wireType)
			}
			m.SkillType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillBags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SkillBags == nil {
				m.SkillBags = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkill
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkill
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkill
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkill(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkill
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SkillBags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillResetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillResetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillResetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillType", wireType)
			}
			m.SkillType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillResetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillResetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillResetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillType", wireType)
			}
			m.SkillType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillBags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SkillBags == nil {
				m.SkillBags = make(map[int32]int32)
			}
			var mapkey int32
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSkill
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkill
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSkill
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSkill(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSkill
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SkillBags[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkill
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Skills = append(m.Skills, &SkillUnit{})
			if err := m.Skills[len(m.Skills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillUseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillUseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillUseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillUseNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillUseNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillUseNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearSkillCdNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearSkillCdNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearSkillCdNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkill(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkill
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSkill(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSkill
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkill
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSkill
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSkill
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSkill(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSkill = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSkill   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("skill.proto", fileDescriptorSkill) }

var fileDescriptorSkill = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0xce, 0xce, 0xcc,
	0xc9, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf,
	0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0xb9, 0x71, 0xf1, 0x04, 0x83, 0x14, 0x84, 0x16, 0xf8, 0x94,
	0x05, 0xa5, 0x16, 0x0a, 0xc9, 0x70, 0x71, 0x66, 0xa4, 0x16, 0xe5, 0x7b, 0xe6, 0xa5, 0xa4, 0x56,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0x24, 0xb8, 0xd8, 0xc1, 0xc6, 0x79,
	0xa6, 0x48, 0x30, 0x83, 0xe5, 0x60, 0x5c, 0xa5, 0x7c, 0x24, 0x73, 0x1c, 0x93, 0xb3, 0x09, 0x98,
	0x23, 0xc3, 0xc5, 0x09, 0xd6, 0x18, 0x52, 0x59, 0x90, 0x2a, 0xc1, 0x04, 0x91, 0x85, 0x0b, 0x08,
	0x29, 0x73, 0xb1, 0x82, 0x39, 0x60, 0x3b, 0xb8, 0x8d, 0x78, 0xf5, 0x0a, 0x92, 0xf4, 0x20, 0x86,
	0xe7, 0x65, 0x96, 0x04, 0x41, 0xe4, 0x94, 0x62, 0xb9, 0x04, 0xc1, 0x62, 0xce, 0x19, 0x89, 0x79,
	0xe9, 0xa9, 0x01, 0xf9, 0xc5, 0x84, 0x5d, 0x2f, 0xc0, 0xc5, 0x5c, 0x90, 0x5f, 0x0c, 0xb5, 0x0f,
	0xc4, 0xc4, 0xe3, 0x9f, 0x8b, 0x8c, 0xe8, 0xe6, 0x53, 0xea, 0x2b, 0x27, 0xa8, 0xac, 0x53, 0x62,
	0x7a, 0xb1, 0x04, 0xb3, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x0a, 0xdc, 0x67, 0xc8, 0xb6, 0x40, 0x44,
	0x40, 0xca, 0x5c, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x10, 0xda, 0xa4, 0x6c, 0xb8, 0xf8, 0x50, 0x25,
	0x41, 0x7e, 0xca, 0x4e, 0xad, 0x84, 0xba, 0x05, 0xc4, 0x14, 0x12, 0xe1, 0x62, 0x2d, 0x4b, 0xcc,
	0x29, 0x85, 0xb9, 0x00, 0xc2, 0xb1, 0x62, 0xb2, 0x60, 0x54, 0xf2, 0xe1, 0x12, 0x42, 0xb2, 0x2c,
	0x3c, 0x35, 0xb1, 0x88, 0xa4, 0x18, 0x67, 0x42, 0x0d, 0xa1, 0xcb, 0x8c, 0x18, 0xc6, 0x51, 0x1a,
	0x44, 0xce, 0x98, 0x41, 0xa4, 0x8a, 0x16, 0x44, 0x50, 0x6b, 0x68, 0x16, 0x46, 0xde, 0x5c, 0xbc,
	0x60, 0xdd, 0x41, 0xa9, 0xc5, 0xa9, 0x25, 0x84, 0x83, 0x07, 0xaf, 0x7f, 0x94, 0x3e, 0x30, 0x22,
	0x9b, 0x46, 0x69, 0xe8, 0xd8, 0x61, 0x86, 0x8e, 0x02, 0x3c, 0x74, 0x60, 0x36, 0xe0, 0x0e, 0x18,
	0x21, 0x55, 0x2e, 0x36, 0x30, 0xa7, 0x58, 0x82, 0x05, 0xac, 0x19, 0x2d, 0x5f, 0x41, 0x25, 0x29,
	0x0c, 0x3f, 0x57, 0x2e, 0x6e, 0x88, 0x91, 0xc5, 0xa9, 0x94, 0x24, 0xae, 0x5a, 0x84, 0x31, 0x7e,
	0x25, 0x69, 0xe4, 0x1a, 0x03, 0x0e, 0xd0, 0x92, 0xc4, 0xa2, 0x92, 0x90, 0xcc, 0xdc, 0x54, 0x70,
	0x0e, 0x67, 0x0e, 0x42, 0x08, 0x80, 0xf4, 0xa5, 0xe6, 0xa5, 0x80, 0xe5, 0x58, 0xc0, 0x72, 0x30,
	0xae, 0x92, 0x3e, 0x17, 0xbf, 0x73, 0x4e, 0x6a, 0x62, 0x11, 0x24, 0xe1, 0xa5, 0x10, 0x74, 0x82,
	0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3,
	0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xb8, 0x7c, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xd4,
	0x70, 0xdb, 0x80, 0x05, 0x00, 0x00,
}
