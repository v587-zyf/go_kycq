// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type StageFightStartReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Wave    int32 `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
}

func (m *StageFightStartReq) Reset()                    { *m = StageFightStartReq{} }
func (m *StageFightStartReq) String() string            { return proto.CompactTextString(m) }
func (*StageFightStartReq) ProtoMessage()               {}
func (*StageFightStartReq) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{0} }

func (m *StageFightStartReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *StageFightStartReq) GetWave() int32 {
	if m != nil {
		return m.Wave
	}
	return 0
}

type StageFightStartAck struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Wave    int32 `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
}

func (m *StageFightStartAck) Reset()                    { *m = StageFightStartAck{} }
func (m *StageFightStartAck) String() string            { return proto.CompactTextString(m) }
func (*StageFightStartAck) ProtoMessage()               {}
func (*StageFightStartAck) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{1} }

func (m *StageFightStartAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *StageFightStartAck) GetWave() int32 {
	if m != nil {
		return m.Wave
	}
	return 0
}

type StageFightEndReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Wave    int32 `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
}

func (m *StageFightEndReq) Reset()                    { *m = StageFightEndReq{} }
func (m *StageFightEndReq) String() string            { return proto.CompactTextString(m) }
func (*StageFightEndReq) ProtoMessage()               {}
func (*StageFightEndReq) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{2} }

func (m *StageFightEndReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *StageFightEndReq) GetWave() int32 {
	if m != nil {
		return m.Wave
	}
	return 0
}

type StageFightEndNtf struct {
	StageId    int32           `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Wave       int32           `protobuf:"varint,2,opt,name=wave,proto3" json:"wave,omitempty"`
	Goods      *GoodsChangeNtf `protobuf:"bytes,3,opt,name=goods" json:"goods,omitempty"`
	OnlyUpdate bool            `protobuf:"varint,4,opt,name=onlyUpdate,proto3" json:"onlyUpdate,omitempty"`
	Result     int32           `protobuf:"varint,5,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *StageFightEndNtf) Reset()                    { *m = StageFightEndNtf{} }
func (m *StageFightEndNtf) String() string            { return proto.CompactTextString(m) }
func (*StageFightEndNtf) ProtoMessage()               {}
func (*StageFightEndNtf) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{3} }

func (m *StageFightEndNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *StageFightEndNtf) GetWave() int32 {
	if m != nil {
		return m.Wave
	}
	return 0
}

func (m *StageFightEndNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *StageFightEndNtf) GetOnlyUpdate() bool {
	if m != nil {
		return m.OnlyUpdate
	}
	return false
}

func (m *StageFightEndNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// 申请退出当前战斗
type LeaveFightReq struct {
}

func (m *LeaveFightReq) Reset()                    { *m = LeaveFightReq{} }
func (m *LeaveFightReq) String() string            { return proto.CompactTextString(m) }
func (*LeaveFightReq) ProtoMessage()               {}
func (*LeaveFightReq) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{4} }

// 申请退出当前战斗
type LeaveFightAck struct {
}

func (m *LeaveFightAck) Reset()                    { *m = LeaveFightAck{} }
func (m *LeaveFightAck) String() string            { return proto.CompactTextString(m) }
func (*LeaveFightAck) ProtoMessage()               {}
func (*LeaveFightAck) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{5} }

type KillMonsterReq struct {
	MonsterId int32 `protobuf:"varint,1,opt,name=monsterId,proto3" json:"monsterId,omitempty"`
	KillNum   int32 `protobuf:"varint,2,opt,name=killNum,proto3" json:"killNum,omitempty"`
}

func (m *KillMonsterReq) Reset()                    { *m = KillMonsterReq{} }
func (m *KillMonsterReq) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterReq) ProtoMessage()               {}
func (*KillMonsterReq) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{6} }

func (m *KillMonsterReq) GetMonsterId() int32 {
	if m != nil {
		return m.MonsterId
	}
	return 0
}

func (m *KillMonsterReq) GetKillNum() int32 {
	if m != nil {
		return m.KillNum
	}
	return 0
}

type KillMonsterAck struct {
}

func (m *KillMonsterAck) Reset()                    { *m = KillMonsterAck{} }
func (m *KillMonsterAck) String() string            { return proto.CompactTextString(m) }
func (*KillMonsterAck) ProtoMessage()               {}
func (*KillMonsterAck) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{7} }

// 进入关卡boss战斗
type StartStageBossFightReq struct {
}

func (m *StartStageBossFightReq) Reset()                    { *m = StartStageBossFightReq{} }
func (m *StartStageBossFightReq) String() string            { return proto.CompactTextString(m) }
func (*StartStageBossFightReq) ProtoMessage()               {}
func (*StartStageBossFightReq) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{8} }

type StageBagChangeNtf struct {
	HookupTime int32       `protobuf:"varint,1,opt,name=hookupTime,proto3" json:"hookupTime,omitempty"`
	Items      []*ItemUnit `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	IsOnline   bool        `protobuf:"varint,3,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
}

func (m *StageBagChangeNtf) Reset()                    { *m = StageBagChangeNtf{} }
func (m *StageBagChangeNtf) String() string            { return proto.CompactTextString(m) }
func (*StageBagChangeNtf) ProtoMessage()               {}
func (*StageBagChangeNtf) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{9} }

func (m *StageBagChangeNtf) GetHookupTime() int32 {
	if m != nil {
		return m.HookupTime
	}
	return 0
}

func (m *StageBagChangeNtf) GetItems() []*ItemUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *StageBagChangeNtf) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

type StageGetHookMapRewardReq struct {
}

func (m *StageGetHookMapRewardReq) Reset()                    { *m = StageGetHookMapRewardReq{} }
func (m *StageGetHookMapRewardReq) String() string            { return proto.CompactTextString(m) }
func (*StageGetHookMapRewardReq) ProtoMessage()               {}
func (*StageGetHookMapRewardReq) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{10} }

type StageGetHookMapRewardAck struct {
	Goods      *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
	HookupTime int32           `protobuf:"varint,2,opt,name=hookupTime,proto3" json:"hookupTime,omitempty"`
	Items      []*ItemUnit     `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *StageGetHookMapRewardAck) Reset()                    { *m = StageGetHookMapRewardAck{} }
func (m *StageGetHookMapRewardAck) String() string            { return proto.CompactTextString(m) }
func (*StageGetHookMapRewardAck) ProtoMessage()               {}
func (*StageGetHookMapRewardAck) Descriptor() ([]byte, []int) { return fileDescriptorStage, []int{11} }

func (m *StageGetHookMapRewardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *StageGetHookMapRewardAck) GetHookupTime() int32 {
	if m != nil {
		return m.HookupTime
	}
	return 0
}

func (m *StageGetHookMapRewardAck) GetItems() []*ItemUnit {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*StageFightStartReq)(nil), "pb.StageFightStartReq")
	proto.RegisterType((*StageFightStartAck)(nil), "pb.StageFightStartAck")
	proto.RegisterType((*StageFightEndReq)(nil), "pb.StageFightEndReq")
	proto.RegisterType((*StageFightEndNtf)(nil), "pb.StageFightEndNtf")
	proto.RegisterType((*LeaveFightReq)(nil), "pb.LeaveFightReq")
	proto.RegisterType((*LeaveFightAck)(nil), "pb.LeaveFightAck")
	proto.RegisterType((*KillMonsterReq)(nil), "pb.KillMonsterReq")
	proto.RegisterType((*KillMonsterAck)(nil), "pb.KillMonsterAck")
	proto.RegisterType((*StartStageBossFightReq)(nil), "pb.StartStageBossFightReq")
	proto.RegisterType((*StageBagChangeNtf)(nil), "pb.StageBagChangeNtf")
	proto.RegisterType((*StageGetHookMapRewardReq)(nil), "pb.StageGetHookMapRewardReq")
	proto.RegisterType((*StageGetHookMapRewardAck)(nil), "pb.StageGetHookMapRewardAck")
}
func (m *StageFightStartReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageFightStartReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.StageId))
	}
	if m.Wave != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Wave))
	}
	return i, nil
}

func (m *StageFightStartAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageFightStartAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.StageId))
	}
	if m.Wave != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Wave))
	}
	return i, nil
}

func (m *StageFightEndReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageFightEndReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.StageId))
	}
	if m.Wave != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Wave))
	}
	return i, nil
}

func (m *StageFightEndNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageFightEndNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.StageId))
	}
	if m.Wave != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Wave))
	}
	if m.Goods != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.OnlyUpdate {
		dAtA[i] = 0x20
		i++
		if m.OnlyUpdate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Result != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *LeaveFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LeaveFightAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveFightAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *KillMonsterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MonsterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.MonsterId))
	}
	if m.KillNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.KillNum))
	}
	return i, nil
}

func (m *KillMonsterAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillMonsterAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StartStageBossFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartStageBossFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StageBagChangeNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageBagChangeNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HookupTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.HookupTime))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsOnline {
		dAtA[i] = 0x18
		i++
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *StageGetHookMapRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageGetHookMapRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *StageGetHookMapRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StageGetHookMapRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.HookupTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStage(dAtA, i, uint64(m.HookupTime))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintStage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintStage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StageFightStartReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovStage(uint64(m.StageId))
	}
	if m.Wave != 0 {
		n += 1 + sovStage(uint64(m.Wave))
	}
	return n
}

func (m *StageFightStartAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovStage(uint64(m.StageId))
	}
	if m.Wave != 0 {
		n += 1 + sovStage(uint64(m.Wave))
	}
	return n
}

func (m *StageFightEndReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovStage(uint64(m.StageId))
	}
	if m.Wave != 0 {
		n += 1 + sovStage(uint64(m.Wave))
	}
	return n
}

func (m *StageFightEndNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovStage(uint64(m.StageId))
	}
	if m.Wave != 0 {
		n += 1 + sovStage(uint64(m.Wave))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if m.OnlyUpdate {
		n += 2
	}
	if m.Result != 0 {
		n += 1 + sovStage(uint64(m.Result))
	}
	return n
}

func (m *LeaveFightReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LeaveFightAck) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *KillMonsterReq) Size() (n int) {
	var l int
	_ = l
	if m.MonsterId != 0 {
		n += 1 + sovStage(uint64(m.MonsterId))
	}
	if m.KillNum != 0 {
		n += 1 + sovStage(uint64(m.KillNum))
	}
	return n
}

func (m *KillMonsterAck) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StartStageBossFightReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StageBagChangeNtf) Size() (n int) {
	var l int
	_ = l
	if m.HookupTime != 0 {
		n += 1 + sovStage(uint64(m.HookupTime))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStage(uint64(l))
		}
	}
	if m.IsOnline {
		n += 2
	}
	return n
}

func (m *StageGetHookMapRewardReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *StageGetHookMapRewardAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovStage(uint64(l))
	}
	if m.HookupTime != 0 {
		n += 1 + sovStage(uint64(m.HookupTime))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovStage(uint64(l))
		}
	}
	return n
}

func sovStage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStage(x uint64) (n int) {
	return sovStage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StageFightStartReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageFightStartReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageFightStartReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wave", wireType)
			}
			m.Wave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wave |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageFightStartAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageFightStartAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageFightStartAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wave", wireType)
			}
			m.Wave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wave |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageFightEndReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageFightEndReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageFightEndReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wave", wireType)
			}
			m.Wave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wave |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageFightEndNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageFightEndNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageFightEndNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wave", wireType)
			}
			m.Wave = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wave |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyUpdate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyUpdate = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveFightAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveFightAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveFightAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterId", wireType)
			}
			m.MonsterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KillNum", wireType)
			}
			m.KillNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KillNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillMonsterAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillMonsterAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillMonsterAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartStageBossFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartStageBossFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartStageBossFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageBagChangeNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageBagChangeNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageBagChangeNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookupTime", wireType)
			}
			m.HookupTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HookupTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemUnit{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageGetHookMapRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageGetHookMapRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageGetHookMapRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StageGetHookMapRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StageGetHookMapRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StageGetHookMapRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookupTime", wireType)
			}
			m.HookupTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HookupTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &ItemUnit{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("stage.proto", fileDescriptorStage) }

var fileDescriptorStage = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x8e, 0xd3, 0x30,
	0x14, 0x86, 0x71, 0x3a, 0x19, 0xca, 0xeb, 0x00, 0xc5, 0x8b, 0x91, 0x55, 0xa1, 0x28, 0xca, 0x2a,
	0xab, 0x2e, 0x86, 0x0b, 0x30, 0x45, 0x30, 0x83, 0x60, 0x8a, 0xe4, 0xd2, 0x03, 0xb8, 0x8d, 0x9b,
	0x5a, 0x49, 0xec, 0x34, 0x76, 0x5b, 0x71, 0x03, 0x8e, 0xc0, 0x9a, 0xd3, 0xb0, 0xe4, 0x08, 0xa8,
	0x5c, 0x04, 0xd9, 0x69, 0xd3, 0x16, 0x51, 0x89, 0xee, 0xf2, 0x7f, 0x76, 0xfe, 0xf7, 0xfe, 0xf7,
	0x12, 0xe8, 0x68, 0xc3, 0x52, 0xde, 0x2f, 0x2b, 0x65, 0x14, 0xf6, 0xca, 0x49, 0xef, 0x6a, 0xaa,
	0x8a, 0x42, 0xc9, 0x9a, 0x44, 0x03, 0xc0, 0x23, 0x7b, 0xe1, 0x9d, 0x48, 0xe7, 0x66, 0x64, 0x58,
	0x65, 0x28, 0x5f, 0x60, 0x02, 0x8f, 0xdd, 0x6b, 0xef, 0x13, 0x82, 0x42, 0x14, 0xfb, 0x74, 0x27,
	0x31, 0x86, 0x8b, 0x35, 0x5b, 0x71, 0xe2, 0x39, 0xec, 0x9e, 0xff, 0xe1, 0x71, 0x3b, 0xcd, 0xce,
	0xf4, 0x78, 0x0d, 0xdd, 0xbd, 0xc7, 0x5b, 0x99, 0x9c, 0xdf, 0xc5, 0x77, 0xf4, 0x97, 0xc5, 0xd0,
	0xcc, 0xce, 0xb3, 0xc0, 0x31, 0xf8, 0xa9, 0x52, 0x89, 0x26, 0xad, 0x10, 0xc5, 0x9d, 0x1b, 0xdc,
	0x2f, 0x27, 0xfd, 0x3b, 0x0b, 0xde, 0xcc, 0x99, 0x4c, 0xf9, 0xd0, 0xcc, 0x68, 0x7d, 0x01, 0x07,
	0x00, 0x4a, 0xe6, 0x5f, 0xc6, 0x65, 0xc2, 0x0c, 0x27, 0x17, 0x21, 0x8a, 0xdb, 0xf4, 0x80, 0xe0,
	0x6b, 0xb8, 0xac, 0xb8, 0x5e, 0xe6, 0x86, 0xf8, 0xce, 0x7f, 0xab, 0xa2, 0xe7, 0xf0, 0xf4, 0x23,
	0x67, 0xab, 0xba, 0x47, 0xca, 0x17, 0xc7, 0xe0, 0x76, 0x9a, 0x45, 0xf7, 0xf0, 0xec, 0x83, 0xc8,
	0xf3, 0x07, 0x25, 0xb5, 0xe1, 0x95, 0x1d, 0xc3, 0x4b, 0x78, 0x52, 0xd4, 0xaa, 0x49, 0xb1, 0x07,
	0x36, 0x61, 0x26, 0xf2, 0x7c, 0xb8, 0x2c, 0xb6, 0x51, 0x76, 0x32, 0xea, 0x1e, 0x39, 0x59, 0x6f,
	0x02, 0xd7, 0x6e, 0x3d, 0x6e, 0x4c, 0x03, 0xa5, 0x75, 0xd3, 0x86, 0x86, 0x17, 0x35, 0x64, 0x69,
	0x93, 0xd5, 0x86, 0x9c, 0x2b, 0x95, 0x2d, 0xcb, 0xcf, 0xa2, 0xe0, 0xdb, 0xca, 0x07, 0x04, 0x47,
	0xe0, 0x0b, 0xc3, 0x0b, 0x4d, 0xbc, 0xb0, 0x15, 0x77, 0x6e, 0xae, 0xec, 0xb8, 0x2c, 0x18, 0x4b,
	0x61, 0x68, 0x7d, 0x84, 0x7b, 0xd0, 0x16, 0xfa, 0x93, 0xcc, 0x85, 0xe4, 0x6e, 0xaa, 0x6d, 0xda,
	0xe8, 0xa8, 0x07, 0xc4, 0x15, 0xbd, 0xe3, 0xe6, 0x5e, 0xa9, 0xec, 0x81, 0x95, 0x94, 0xaf, 0x59,
	0x65, 0x77, 0x1f, 0x7d, 0x45, 0x27, 0x0e, 0xed, 0xa7, 0xd5, 0xec, 0x09, 0xfd, 0xc7, 0x9e, 0x0e,
	0x22, 0x78, 0xa7, 0x23, 0xb4, 0x4e, 0x46, 0x18, 0x74, 0x7f, 0x6c, 0x02, 0xf4, 0x73, 0x13, 0xa0,
	0x5f, 0x9b, 0x00, 0x7d, 0xfb, 0x1d, 0x3c, 0x9a, 0x5c, 0xba, 0x7f, 0xe7, 0xd5, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x01, 0xe0, 0x28, 0xe0, 0x5c, 0x03, 0x00, 0x00,
}
