// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jewel.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 镶嵌1个
type JewelMakeReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32 `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
	ItemId    int32 `protobuf:"varint,4,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *JewelMakeReq) Reset()                    { *m = JewelMakeReq{} }
func (m *JewelMakeReq) String() string            { return proto.CompactTextString(m) }
func (*JewelMakeReq) ProtoMessage()               {}
func (*JewelMakeReq) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{0} }

func (m *JewelMakeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelMakeReq) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelMakeReq) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

func (m *JewelMakeReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type JewelMakeAck struct {
	HeroIndex int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32      `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32      `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
	Jewel     *JewelInfo `protobuf:"bytes,4,opt,name=jewel" json:"jewel,omitempty"`
}

func (m *JewelMakeAck) Reset()                    { *m = JewelMakeAck{} }
func (m *JewelMakeAck) String() string            { return proto.CompactTextString(m) }
func (*JewelMakeAck) ProtoMessage()               {}
func (*JewelMakeAck) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{1} }

func (m *JewelMakeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelMakeAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelMakeAck) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

func (m *JewelMakeAck) GetJewel() *JewelInfo {
	if m != nil {
		return m.Jewel
	}
	return nil
}

// 升级宝石
type JewelUpLvReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32 `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
}

func (m *JewelUpLvReq) Reset()                    { *m = JewelUpLvReq{} }
func (m *JewelUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*JewelUpLvReq) ProtoMessage()               {}
func (*JewelUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{2} }

func (m *JewelUpLvReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelUpLvReq) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelUpLvReq) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

type JewelUpLvAck struct {
	HeroIndex int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32      `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32      `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
	Jewel     *JewelInfo `protobuf:"bytes,4,opt,name=jewel" json:"jewel,omitempty"`
}

func (m *JewelUpLvAck) Reset()                    { *m = JewelUpLvAck{} }
func (m *JewelUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*JewelUpLvAck) ProtoMessage()               {}
func (*JewelUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{3} }

func (m *JewelUpLvAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelUpLvAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelUpLvAck) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

func (m *JewelUpLvAck) GetJewel() *JewelInfo {
	if m != nil {
		return m.Jewel
	}
	return nil
}

// 替换宝石
type JewelChangeReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32 `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
	ItemId    int32 `protobuf:"varint,4,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *JewelChangeReq) Reset()                    { *m = JewelChangeReq{} }
func (m *JewelChangeReq) String() string            { return proto.CompactTextString(m) }
func (*JewelChangeReq) ProtoMessage()               {}
func (*JewelChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{4} }

func (m *JewelChangeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelChangeReq) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelChangeReq) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

func (m *JewelChangeReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type JewelChangeAck struct {
	HeroIndex int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32      `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32      `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
	Jewel     *JewelInfo `protobuf:"bytes,4,opt,name=jewel" json:"jewel,omitempty"`
}

func (m *JewelChangeAck) Reset()                    { *m = JewelChangeAck{} }
func (m *JewelChangeAck) String() string            { return proto.CompactTextString(m) }
func (*JewelChangeAck) ProtoMessage()               {}
func (*JewelChangeAck) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{5} }

func (m *JewelChangeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelChangeAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelChangeAck) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

func (m *JewelChangeAck) GetJewel() *JewelInfo {
	if m != nil {
		return m.Jewel
	}
	return nil
}

// 卸下宝石
type JewelRemoveReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32 `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32 `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
}

func (m *JewelRemoveReq) Reset()                    { *m = JewelRemoveReq{} }
func (m *JewelRemoveReq) String() string            { return proto.CompactTextString(m) }
func (*JewelRemoveReq) ProtoMessage()               {}
func (*JewelRemoveReq) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{6} }

func (m *JewelRemoveReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelRemoveReq) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelRemoveReq) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

type JewelRemoveAck struct {
	HeroIndex int32      `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	EquipPos  int32      `protobuf:"varint,2,opt,name=equipPos,proto3" json:"equipPos,omitempty"`
	JewelPos  int32      `protobuf:"varint,3,opt,name=jewelPos,proto3" json:"jewelPos,omitempty"`
	Jewel     *JewelInfo `protobuf:"bytes,4,opt,name=jewel" json:"jewel,omitempty"`
}

func (m *JewelRemoveAck) Reset()                    { *m = JewelRemoveAck{} }
func (m *JewelRemoveAck) String() string            { return proto.CompactTextString(m) }
func (*JewelRemoveAck) ProtoMessage()               {}
func (*JewelRemoveAck) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{7} }

func (m *JewelRemoveAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelRemoveAck) GetEquipPos() int32 {
	if m != nil {
		return m.EquipPos
	}
	return 0
}

func (m *JewelRemoveAck) GetJewelPos() int32 {
	if m != nil {
		return m.JewelPos
	}
	return 0
}

func (m *JewelRemoveAck) GetJewel() *JewelInfo {
	if m != nil {
		return m.Jewel
	}
	return nil
}

// 一键镶嵌
type JewelMakeAllReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *JewelMakeAllReq) Reset()                    { *m = JewelMakeAllReq{} }
func (m *JewelMakeAllReq) String() string            { return proto.CompactTextString(m) }
func (*JewelMakeAllReq) ProtoMessage()               {}
func (*JewelMakeAllReq) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{8} }

func (m *JewelMakeAllReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type JewelMakeAllAck struct {
	HeroIndex int32                `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Jewels    map[int32]*JewelInfo `protobuf:"bytes,2,rep,name=jewels" json:"jewels,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *JewelMakeAllAck) Reset()                    { *m = JewelMakeAllAck{} }
func (m *JewelMakeAllAck) String() string            { return proto.CompactTextString(m) }
func (*JewelMakeAllAck) ProtoMessage()               {}
func (*JewelMakeAllAck) Descriptor() ([]byte, []int) { return fileDescriptorJewel, []int{9} }

func (m *JewelMakeAllAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *JewelMakeAllAck) GetJewels() map[int32]*JewelInfo {
	if m != nil {
		return m.Jewels
	}
	return nil
}

func init() {
	proto.RegisterType((*JewelMakeReq)(nil), "pb.JewelMakeReq")
	proto.RegisterType((*JewelMakeAck)(nil), "pb.JewelMakeAck")
	proto.RegisterType((*JewelUpLvReq)(nil), "pb.JewelUpLvReq")
	proto.RegisterType((*JewelUpLvAck)(nil), "pb.JewelUpLvAck")
	proto.RegisterType((*JewelChangeReq)(nil), "pb.JewelChangeReq")
	proto.RegisterType((*JewelChangeAck)(nil), "pb.JewelChangeAck")
	proto.RegisterType((*JewelRemoveReq)(nil), "pb.JewelRemoveReq")
	proto.RegisterType((*JewelRemoveAck)(nil), "pb.JewelRemoveAck")
	proto.RegisterType((*JewelMakeAllReq)(nil), "pb.JewelMakeAllReq")
	proto.RegisterType((*JewelMakeAllAck)(nil), "pb.JewelMakeAllAck")
}
func (m *JewelMakeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelMakeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *JewelMakeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelMakeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.Jewel.Size()))
		n1, err := m.Jewel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *JewelUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	return i, nil
}

func (m *JewelUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.Jewel.Size()))
		n2, err := m.Jewel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *JewelChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *JewelChangeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelChangeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.Jewel.Size()))
		n3, err := m.Jewel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *JewelRemoveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelRemoveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	return i, nil
}

func (m *JewelRemoveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelRemoveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.Jewel.Size()))
		n4, err := m.Jewel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *JewelMakeAllReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelMakeAllReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *JewelMakeAllAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JewelMakeAllAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJewel(dAtA, i, uint64(m.HeroIndex))
	}
	if len(m.Jewels) > 0 {
		for k, _ := range m.Jewels {
			dAtA[i] = 0x12
			i++
			v := m.Jewels[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovJewel(uint64(msgSize))
			}
			mapSize := 1 + sovJewel(uint64(k)) + msgSize
			i = encodeVarintJewel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintJewel(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintJewel(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func encodeVarintJewel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *JewelMakeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	if m.ItemId != 0 {
		n += 1 + sovJewel(uint64(m.ItemId))
	}
	return n
}

func (m *JewelMakeAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		l = m.Jewel.Size()
		n += 1 + l + sovJewel(uint64(l))
	}
	return n
}

func (m *JewelUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	return n
}

func (m *JewelUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		l = m.Jewel.Size()
		n += 1 + l + sovJewel(uint64(l))
	}
	return n
}

func (m *JewelChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	if m.ItemId != 0 {
		n += 1 + sovJewel(uint64(m.ItemId))
	}
	return n
}

func (m *JewelChangeAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		l = m.Jewel.Size()
		n += 1 + l + sovJewel(uint64(l))
	}
	return n
}

func (m *JewelRemoveReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	return n
}

func (m *JewelRemoveAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if m.EquipPos != 0 {
		n += 1 + sovJewel(uint64(m.EquipPos))
	}
	if m.JewelPos != 0 {
		n += 1 + sovJewel(uint64(m.JewelPos))
	}
	if m.Jewel != nil {
		l = m.Jewel.Size()
		n += 1 + l + sovJewel(uint64(l))
	}
	return n
}

func (m *JewelMakeAllReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	return n
}

func (m *JewelMakeAllAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovJewel(uint64(m.HeroIndex))
	}
	if len(m.Jewels) > 0 {
		for k, v := range m.Jewels {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovJewel(uint64(l))
			}
			mapEntrySize := 1 + sovJewel(uint64(k)) + l
			n += mapEntrySize + 1 + sovJewel(uint64(mapEntrySize))
		}
	}
	return n
}

func sovJewel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJewel(x uint64) (n int) {
	return sovJewel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *JewelMakeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelMakeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelMakeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelMakeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelMakeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelMakeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jewel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJewel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jewel == nil {
				m.Jewel = &JewelInfo{}
			}
			if err := m.Jewel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jewel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJewel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jewel == nil {
				m.Jewel = &JewelInfo{}
			}
			if err := m.Jewel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelChangeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelChangeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelChangeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jewel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJewel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jewel == nil {
				m.Jewel = &JewelInfo{}
			}
			if err := m.Jewel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelRemoveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelRemoveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelRemoveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelRemoveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelRemoveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelRemoveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPos", wireType)
			}
			m.EquipPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JewelPos", wireType)
			}
			m.JewelPos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JewelPos |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jewel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJewel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jewel == nil {
				m.Jewel = &JewelInfo{}
			}
			if err := m.Jewel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelMakeAllReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelMakeAllReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelMakeAllReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JewelMakeAllAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JewelMakeAllAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JewelMakeAllAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jewels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJewel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Jewels == nil {
				m.Jewels = make(map[int32]*JewelInfo)
			}
			var mapkey int32
			var mapvalue *JewelInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowJewel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJewel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJewel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthJewel
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthJewel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &JewelInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipJewel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthJewel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Jewels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJewel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJewel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJewel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJewel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJewel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthJewel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJewel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJewel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJewel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJewel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("jewel.proto", fileDescriptorJewel) }

var fileDescriptorJewel = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4a, 0x2d, 0x4f,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf,
	0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0xd5, 0x70, 0xf1, 0x78, 0x81, 0x14, 0xf8, 0x26, 0x66, 0xa7,
	0x06, 0xa5, 0x16, 0x0a, 0xc9, 0x70, 0x71, 0x66, 0xa4, 0x16, 0xe5, 0x7b, 0xe6, 0xa5, 0xa4, 0x56,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0xa4, 0xb8, 0x38, 0x52, 0x0b, 0x4b,
	0x33, 0x0b, 0x02, 0xf2, 0x8b, 0x25, 0x98, 0xc0, 0x92, 0x70, 0x3e, 0x48, 0x0e, 0x6c, 0x15, 0x48,
	0x8e, 0x19, 0x22, 0x07, 0xe3, 0x0b, 0x89, 0x71, 0xb1, 0x65, 0x96, 0xa4, 0xe6, 0x7a, 0xa6, 0x48,
	0xb0, 0x80, 0x65, 0xa0, 0x3c, 0xa5, 0x4e, 0x46, 0x24, 0xeb, 0x1d, 0x93, 0xb3, 0x69, 0x64, 0xbd,
	0x32, 0x17, 0x2b, 0x98, 0x0d, 0xb6, 0x9d, 0xdb, 0x88, 0x57, 0xaf, 0x20, 0x49, 0x0f, 0x6c, 0xad,
	0x67, 0x5e, 0x5a, 0x7e, 0x10, 0x44, 0x4e, 0x29, 0x05, 0xea, 0x94, 0xd0, 0x02, 0x9f, 0x32, 0x9a,
	0x85, 0x04, 0xc2, 0xc7, 0x20, 0x6b, 0x06, 0xd8, 0xc7, 0x75, 0x5c, 0x7c, 0x60, 0x31, 0xe7, 0x8c,
	0xc4, 0xbc, 0xf4, 0x01, 0x88, 0xfd, 0x6e, 0x46, 0x14, 0x07, 0x0c, 0x70, 0x68, 0xa4, 0x41, 0x1d,
	0x13, 0x94, 0x9a, 0x9b, 0x5f, 0x46, 0xbb, 0xd0, 0x40, 0xf8, 0x1a, 0x62, 0xd1, 0x00, 0xfb, 0x5a,
	0x9f, 0x8b, 0x1f, 0x91, 0x01, 0x73, 0x72, 0x08, 0x7a, 0x5b, 0x69, 0x13, 0x23, 0xaa, 0x0e, 0xc2,
	0xee, 0x37, 0xe7, 0x62, 0x03, 0xdb, 0x05, 0x72, 0x3d, 0xb3, 0x06, 0xb7, 0x91, 0x3c, 0xdc, 0x21,
	0x08, 0x23, 0x20, 0xfc, 0x62, 0xd7, 0xbc, 0x92, 0xa2, 0xca, 0x20, 0xa8, 0x72, 0x29, 0x0f, 0x2e,
	0x6e, 0x24, 0x61, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0xa8, 0xf9, 0x20, 0x26, 0xc8, 0x87,
	0x65, 0x89, 0x39, 0xa5, 0xa9, 0xe0, 0x60, 0xc1, 0xf4, 0x21, 0x58, 0xce, 0x8a, 0xc9, 0x82, 0xd1,
	0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1,
	0x58, 0x8e, 0x21, 0x89, 0x0d, 0x5c, 0xfc, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x94, 0x23,
	0xb4, 0x93, 0x1f, 0x05, 0x00, 0x00,
}
