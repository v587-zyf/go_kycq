// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gate.proto

/*
	Package pbgt is a generated protocol buffer package.

	It is generated from these files:
		gate.proto
		gatebench.proto

	It has these top-level messages:
		ServerPingReq
		ServerPingAck
		HandShakeReq
		HandShakeAck
		UserQuitRpt
		UserQuitNtf
		UserFightInfoNtf
		RouteMessage
		BroadcastNtf
		BroadcastByFS
		GateMessageToFS
		FSMessageToGate
		ClientChatReq
		ClientChatAck
		ClientChatNtf
		ClientMoveRpt
		ClientMoveNtf
*/
package pbgt

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 服务器之间ping
type ServerPingReq struct {
	ServerId int32 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (m *ServerPingReq) Reset()                    { *m = ServerPingReq{} }
func (m *ServerPingReq) String() string            { return proto.CompactTextString(m) }
func (*ServerPingReq) ProtoMessage()               {}
func (*ServerPingReq) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{0} }

func (m *ServerPingReq) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type ServerPingAck struct {
	ServerId int32 `protobuf:"varint,1,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (m *ServerPingAck) Reset()                    { *m = ServerPingAck{} }
func (m *ServerPingAck) String() string            { return proto.CompactTextString(m) }
func (*ServerPingAck) ProtoMessage()               {}
func (*ServerPingAck) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{1} }

func (m *ServerPingAck) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type HandShakeReq struct {
	GateSeq int32 `protobuf:"varint,1,opt,name=gateSeq,proto3" json:"gateSeq,omitempty"`
}

func (m *HandShakeReq) Reset()                    { *m = HandShakeReq{} }
func (m *HandShakeReq) String() string            { return proto.CompactTextString(m) }
func (*HandShakeReq) ProtoMessage()               {}
func (*HandShakeReq) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{2} }

func (m *HandShakeReq) GetGateSeq() int32 {
	if m != nil {
		return m.GateSeq
	}
	return 0
}

type HandShakeAck struct {
	ServerSeq int32 `protobuf:"varint,1,opt,name=serverSeq,proto3" json:"serverSeq,omitempty"`
}

func (m *HandShakeAck) Reset()                    { *m = HandShakeAck{} }
func (m *HandShakeAck) String() string            { return proto.CompactTextString(m) }
func (*HandShakeAck) ProtoMessage()               {}
func (*HandShakeAck) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{3} }

func (m *HandShakeAck) GetServerSeq() int32 {
	if m != nil {
		return m.ServerSeq
	}
	return 0
}

type UserQuitRpt struct {
}

func (m *UserQuitRpt) Reset()                    { *m = UserQuitRpt{} }
func (m *UserQuitRpt) String() string            { return proto.CompactTextString(m) }
func (*UserQuitRpt) ProtoMessage()               {}
func (*UserQuitRpt) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{4} }

type UserQuitNtf struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *UserQuitNtf) Reset()                    { *m = UserQuitNtf{} }
func (m *UserQuitNtf) String() string            { return proto.CompactTextString(m) }
func (*UserQuitNtf) ProtoMessage()               {}
func (*UserQuitNtf) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{5} }

func (m *UserQuitNtf) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type UserFightInfoNtf struct {
	FightId            int32 `protobuf:"varint,1,opt,name=fightId,proto3" json:"fightId,omitempty"`
	CrossFightServerId int32 `protobuf:"varint,2,opt,name=crossFightServerId,proto3" json:"crossFightServerId,omitempty"`
}

func (m *UserFightInfoNtf) Reset()                    { *m = UserFightInfoNtf{} }
func (m *UserFightInfoNtf) String() string            { return proto.CompactTextString(m) }
func (*UserFightInfoNtf) ProtoMessage()               {}
func (*UserFightInfoNtf) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{6} }

func (m *UserFightInfoNtf) GetFightId() int32 {
	if m != nil {
		return m.FightId
	}
	return 0
}

func (m *UserFightInfoNtf) GetCrossFightServerId() int32 {
	if m != nil {
		return m.CrossFightServerId
	}
	return 0
}

// 路由客户端与gs之间的消息，可从gate发往gs，也可从gs发往gate
type RouteMessage struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RouteMessage) Reset()                    { *m = RouteMessage{} }
func (m *RouteMessage) String() string            { return proto.CompactTextString(m) }
func (*RouteMessage) ProtoMessage()               {}
func (*RouteMessage) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{7} }

func (m *RouteMessage) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// gs通过gate进行全局广播
type BroadcastNtf struct {
	SessionIds []uint32 `protobuf:"varint,1,rep,packed,name=sessionIds" json:"sessionIds,omitempty"`
	Msg        []byte   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BroadcastNtf) Reset()                    { *m = BroadcastNtf{} }
func (m *BroadcastNtf) String() string            { return proto.CompactTextString(m) }
func (*BroadcastNtf) ProtoMessage()               {}
func (*BroadcastNtf) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{8} }

func (m *BroadcastNtf) GetSessionIds() []uint32 {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

func (m *BroadcastNtf) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

type BroadcastByFS struct {
	SessionIds map[uint32]uint32 `protobuf:"bytes,1,rep,name=sessionIds" json:"sessionIds,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Msg        []byte            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	MsgId      int32             `protobuf:"varint,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
}

func (m *BroadcastByFS) Reset()                    { *m = BroadcastByFS{} }
func (m *BroadcastByFS) String() string            { return proto.CompactTextString(m) }
func (*BroadcastByFS) ProtoMessage()               {}
func (*BroadcastByFS) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{9} }

func (m *BroadcastByFS) GetSessionIds() map[uint32]uint32 {
	if m != nil {
		return m.SessionIds
	}
	return nil
}

func (m *BroadcastByFS) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *BroadcastByFS) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type GateMessageToFS struct {
	Msg           []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	CrossServerId int32  `protobuf:"varint,2,opt,name=crossServerId,proto3" json:"crossServerId,omitempty"`
	ServerId      int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (m *GateMessageToFS) Reset()                    { *m = GateMessageToFS{} }
func (m *GateMessageToFS) String() string            { return proto.CompactTextString(m) }
func (*GateMessageToFS) ProtoMessage()               {}
func (*GateMessageToFS) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{10} }

func (m *GateMessageToFS) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GateMessageToFS) GetCrossServerId() int32 {
	if m != nil {
		return m.CrossServerId
	}
	return 0
}

func (m *GateMessageToFS) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type FSMessageToGate struct {
	Msg           []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	CrossServerId int32  `protobuf:"varint,2,opt,name=crossServerId,proto3" json:"crossServerId,omitempty"`
	ServerId      int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
}

func (m *FSMessageToGate) Reset()                    { *m = FSMessageToGate{} }
func (m *FSMessageToGate) String() string            { return proto.CompactTextString(m) }
func (*FSMessageToGate) ProtoMessage()               {}
func (*FSMessageToGate) Descriptor() ([]byte, []int) { return fileDescriptorGate, []int{11} }

func (m *FSMessageToGate) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *FSMessageToGate) GetCrossServerId() int32 {
	if m != nil {
		return m.CrossServerId
	}
	return 0
}

func (m *FSMessageToGate) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerPingReq)(nil), "pbgt.ServerPingReq")
	proto.RegisterType((*ServerPingAck)(nil), "pbgt.ServerPingAck")
	proto.RegisterType((*HandShakeReq)(nil), "pbgt.HandShakeReq")
	proto.RegisterType((*HandShakeAck)(nil), "pbgt.HandShakeAck")
	proto.RegisterType((*UserQuitRpt)(nil), "pbgt.UserQuitRpt")
	proto.RegisterType((*UserQuitNtf)(nil), "pbgt.UserQuitNtf")
	proto.RegisterType((*UserFightInfoNtf)(nil), "pbgt.UserFightInfoNtf")
	proto.RegisterType((*RouteMessage)(nil), "pbgt.RouteMessage")
	proto.RegisterType((*BroadcastNtf)(nil), "pbgt.BroadcastNtf")
	proto.RegisterType((*BroadcastByFS)(nil), "pbgt.BroadcastByFS")
	proto.RegisterType((*GateMessageToFS)(nil), "pbgt.GateMessageToFS")
	proto.RegisterType((*FSMessageToGate)(nil), "pbgt.FSMessageToGate")
}
func (m *ServerPingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerPingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.ServerId))
	}
	return i, nil
}

func (m *ServerPingAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerPingAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.ServerId))
	}
	return i, nil
}

func (m *HandShakeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandShakeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GateSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.GateSeq))
	}
	return i, nil
}

func (m *HandShakeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HandShakeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ServerSeq != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.ServerSeq))
	}
	return i, nil
}

func (m *UserQuitRpt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserQuitRpt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserQuitNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserQuitNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGate(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	return i, nil
}

func (m *UserFightInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserFightInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FightId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.FightId))
	}
	if m.CrossFightServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.CrossFightServerId))
	}
	return i, nil
}

func (m *RouteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGate(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *BroadcastNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionIds) > 0 {
		dAtA2 := make([]byte, len(m.SessionIds)*10)
		var j1 int
		for _, num := range m.SessionIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintGate(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGate(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *BroadcastByFS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BroadcastByFS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SessionIds) > 0 {
		for k, _ := range m.SessionIds {
			dAtA[i] = 0xa
			i++
			v := m.SessionIds[k]
			mapSize := 1 + sovGate(uint64(k)) + 1 + sovGate(uint64(v))
			i = encodeVarintGate(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGate(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintGate(dAtA, i, uint64(v))
		}
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGate(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.MsgId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.MsgId))
	}
	return i, nil
}

func (m *GateMessageToFS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GateMessageToFS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGate(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.CrossServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.ServerId))
	}
	return i, nil
}

func (m *FSMessageToGate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSMessageToGate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGate(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.CrossServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGate(dAtA, i, uint64(m.ServerId))
	}
	return i, nil
}

func encodeVarintGate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ServerPingReq) Size() (n int) {
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovGate(uint64(m.ServerId))
	}
	return n
}

func (m *ServerPingAck) Size() (n int) {
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovGate(uint64(m.ServerId))
	}
	return n
}

func (m *HandShakeReq) Size() (n int) {
	var l int
	_ = l
	if m.GateSeq != 0 {
		n += 1 + sovGate(uint64(m.GateSeq))
	}
	return n
}

func (m *HandShakeAck) Size() (n int) {
	var l int
	_ = l
	if m.ServerSeq != 0 {
		n += 1 + sovGate(uint64(m.ServerSeq))
	}
	return n
}

func (m *UserQuitRpt) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UserQuitNtf) Size() (n int) {
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *UserFightInfoNtf) Size() (n int) {
	var l int
	_ = l
	if m.FightId != 0 {
		n += 1 + sovGate(uint64(m.FightId))
	}
	if m.CrossFightServerId != 0 {
		n += 1 + sovGate(uint64(m.CrossFightServerId))
	}
	return n
}

func (m *RouteMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *BroadcastNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.SessionIds) > 0 {
		l = 0
		for _, e := range m.SessionIds {
			l += sovGate(uint64(e))
		}
		n += 1 + sovGate(uint64(l)) + l
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	return n
}

func (m *BroadcastByFS) Size() (n int) {
	var l int
	_ = l
	if len(m.SessionIds) > 0 {
		for k, v := range m.SessionIds {
			_ = k
			_ = v
			mapEntrySize := 1 + sovGate(uint64(k)) + 1 + sovGate(uint64(v))
			n += mapEntrySize + 1 + sovGate(uint64(mapEntrySize))
		}
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovGate(uint64(m.MsgId))
	}
	return n
}

func (m *GateMessageToFS) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if m.CrossServerId != 0 {
		n += 1 + sovGate(uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovGate(uint64(m.ServerId))
	}
	return n
}

func (m *FSMessageToGate) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGate(uint64(l))
	}
	if m.CrossServerId != 0 {
		n += 1 + sovGate(uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovGate(uint64(m.ServerId))
	}
	return n
}

func sovGate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGate(x uint64) (n int) {
	return sovGate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerPingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerPingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerPingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerPingAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerPingAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerPingAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandShakeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandShakeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandShakeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GateSeq", wireType)
			}
			m.GateSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GateSeq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HandShakeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HandShakeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HandShakeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerSeq", wireType)
			}
			m.ServerSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerSeq |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserQuitRpt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserQuitRpt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserQuitRpt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserQuitNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserQuitNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserQuitNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserFightInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserFightInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserFightInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FightId", wireType)
			}
			m.FightId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FightId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossFightServerId", wireType)
			}
			m.CrossFightServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossFightServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SessionIds = append(m.SessionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGate
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SessionIds = append(m.SessionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BroadcastByFS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BroadcastByFS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BroadcastByFS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SessionIds == nil {
				m.SessionIds = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGate(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGate
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SessionIds[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GateMessageToFS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GateMessageToFS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GateMessageToFS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossServerId", wireType)
			}
			m.CrossServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FSMessageToGate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSMessageToGate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSMessageToGate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGate
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossServerId", wireType)
			}
			m.CrossServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gate.proto", fileDescriptorGate) }

var fileDescriptorGate = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x86, 0x71, 0xcb, 0x36, 0x76, 0x96, 0xa8, 0x95, 0x85, 0x50, 0x34, 0xa1, 0xa8, 0x32, 0x20,
	0x55, 0x02, 0xe5, 0x02, 0x6e, 0x10, 0x12, 0x12, 0x14, 0x11, 0xc8, 0x05, 0x08, 0x6c, 0xb8, 0xe3,
	0xc6, 0x6b, 0x4e, 0xb3, 0xa8, 0x2c, 0xee, 0x6c, 0x77, 0x52, 0xdf, 0x84, 0x77, 0xe1, 0x05, 0xb8,
	0xe4, 0x11, 0x50, 0x79, 0x11, 0x64, 0x77, 0x49, 0x96, 0x0e, 0xf5, 0x6e, 0x77, 0xfe, 0x4f, 0xbf,
	0xf3, 0xff, 0x3e, 0xa7, 0x0e, 0x40, 0x21, 0x2d, 0x26, 0x0b, 0xad, 0xac, 0xa2, 0xb7, 0x17, 0x27,
	0x85, 0x65, 0x8f, 0x21, 0x14, 0xa8, 0x2f, 0x50, 0x7f, 0x2a, 0xab, 0x82, 0xe3, 0x39, 0x3d, 0x86,
	0x3b, 0xc6, 0x17, 0xb2, 0x3c, 0x22, 0x23, 0x32, 0xde, 0xe3, 0x8d, 0xee, 0xc2, 0xaf, 0xa7, 0xf3,
	0x9d, 0xf0, 0x18, 0x82, 0xf7, 0xb2, 0xca, 0xc5, 0xa9, 0x9c, 0xa3, 0x33, 0x8e, 0xe0, 0xc0, 0xa5,
	0x0b, 0x3c, 0xbf, 0x44, 0x6b, 0xc9, 0x9e, 0x5c, 0x21, 0x9d, 0xeb, 0x7d, 0x38, 0xdc, 0xb8, 0xb4,
	0x6c, 0x5b, 0x60, 0x21, 0x1c, 0x7d, 0x35, 0xa8, 0x3f, 0x2f, 0x4b, 0xcb, 0x17, 0x96, 0x3d, 0x6a,
	0xe5, 0x47, 0x3b, 0xa3, 0xf7, 0x60, 0x5f, 0xa3, 0x34, 0xaa, 0xf2, 0x8d, 0x87, 0xfc, 0x52, 0xb1,
	0x6f, 0x30, 0x74, 0x58, 0x5a, 0x16, 0xa7, 0x36, 0xab, 0x66, 0xca, 0xb1, 0x11, 0x1c, 0xcc, 0xbc,
	0xae, 0x2f, 0x5f, 0x4b, 0x9a, 0x00, 0x9d, 0x6a, 0x65, 0x8c, 0xc7, 0x45, 0x3d, 0x61, 0xcf, 0x43,
	0xff, 0xf9, 0x85, 0x8d, 0x20, 0xe0, 0x6a, 0x69, 0xf1, 0x03, 0x1a, 0x23, 0x0b, 0xa4, 0x43, 0xe8,
	0x9f, 0x99, 0xc2, 0xbb, 0x06, 0xdc, 0x1d, 0xd9, 0x2b, 0x08, 0x26, 0x5a, 0xc9, 0x7c, 0x2a, 0x8d,
	0xbf, 0x67, 0x0c, 0x60, 0xd0, 0x98, 0x52, 0x55, 0x59, 0x6e, 0x22, 0x32, 0xea, 0x8f, 0x43, 0x7e,
	0xa5, 0x52, 0x3b, 0xf4, 0x5a, 0x87, 0x9f, 0x04, 0xc2, 0xc6, 0x62, 0xb2, 0x4a, 0x05, 0x7d, 0x73,
	0xcd, 0xe3, 0xe8, 0xe9, 0x83, 0xc4, 0xfd, 0xad, 0x49, 0x07, 0x4c, 0x44, 0x43, 0xbd, 0xad, 0xac,
	0x5e, 0xed, 0x0e, 0xa2, 0x77, 0x61, 0xef, 0xcc, 0x14, 0x59, 0x1e, 0xf5, 0xfd, 0xbc, 0x1b, 0x71,
	0xfc, 0x12, 0x06, 0x5b, 0x36, 0xae, 0x75, 0x8e, 0x2b, 0x3f, 0x65, 0xc8, 0xdd, 0xd1, 0xb5, 0x5e,
	0xc8, 0xef, 0x4b, 0xf4, 0x76, 0x21, 0xdf, 0x88, 0x17, 0xbd, 0xe7, 0x84, 0x21, 0x0c, 0xde, 0xc9,
	0x66, 0x41, 0x5f, 0x54, 0x2a, 0xae, 0x2f, 0x89, 0x3e, 0x84, 0xd0, 0x2f, 0x77, 0x6b, 0xe3, 0xdd,
	0x62, 0xe7, 0xd1, 0xf5, 0xb7, 0x1e, 0x1d, 0xc2, 0x20, 0x15, 0x4d, 0x88, 0x4b, 0xbc, 0x89, 0x98,
	0xc9, 0xf0, 0xd7, 0x3a, 0x26, 0xbf, 0xd7, 0x31, 0xf9, 0xb3, 0x8e, 0xc9, 0x8f, 0xbf, 0xf1, 0xad,
	0x93, 0x7d, 0xff, 0x51, 0x3d, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xda, 0xa0, 0x5d, 0x62,
	0x03, 0x00, 0x00,
}
