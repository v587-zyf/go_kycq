// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: challenge.proto

/*
	Package pbserver is a generated protocol buffer package.

	It is generated from these files:
		challenge.proto
		common.proto
		css_server.proto
		fcc_server.proto
		fs_server.proto
		loginserver.proto
		shabake.proto

	It has these top-level messages:
		ChallengeSendLoseRewardNtf
		ChallengeAppuserUpNtf
		ChallengeAppuserUpToGsNtf
		ErrorAck
		ItemUnit
		ItemUnits
		ItemUnitForPickUp
		HandShakeReq
		HandShakeAck
		HandCloseNtf
		Actor
		MiJiInfo
		ElfInfo
		ActorRedPacket
		ActorHero
		ActorDisplayInfo
		ActorProp
		ActorPet
		ActorFit
		FitSkill
		Skill
		SyncUserInfoNtf
		SyscHeroInfo
		CCSToGsCrossFsIdChangeNtf
		RechageCcsToGsReq
		RechageGsToCcsAck
		RechargeApplyReq
		RechargeApplyAck
		BanInfoCcsToGsReq
		MailSendCCsToGsReq
		MailSendGsToCcsAck
		FuncStateUpdateReq
		UpAnnouncementNowReq
		UpPaoMaDengNowReq
		SetDayRechargeNumNtf
		GSMessageToFS
		FSMessageToGS
		FSCallMessageToGS
		GSCallMessageToFS
		GsRouteMessageToFight
		FSCreateFightReq
		FSCreateFightAck
		GsToFsResidentFightReq
		FsResidentFightNtf
		FsFieldBossInfoNtf
		FSContinueFightReq
		FSFightEndNtf
		FSEnterFightReq
		FSEnterFightAck
		FSUpdateUserInfoNtf
		FSUpdateUserInfoAck
		GsToFsUpdateUserElfReq
		FsToGsUpdateUserElfAck
		FSLeaveFightReq
		FSLeaveFightAck
		GSToFsUpdateUserFightModel
		GsToFSUserReliveReq
		FSToGsUserReliveAck
		GsToFSCheckUserReliveReq
		FsToGSCheckUserReliveAck
		FSGetFightIdReq
		FSGetFightIdAck
		User
		UserDropReq
		UserDropAck
		FSAddItemReq
		FSAddItemAck
		GsTOFsPickUpReq
		FsTOGsPickUpAck
		GsToFsPickRedPacketInfo
		FsSkillUseNtf
		FsToGsActorKillNtf
		FsTOGsClearSkillCdNtf
		FsRandomDeliveryNtf
		GsToFsUseItemNtf
		GSTOFSCheckFightReq
		FSTOGSCheckFightAck
		GSTOFSGetFightIdReq
		FSTOGSGetFightIdAck
		GsToFsGetCheerNumReq
		FsToGsGetCheerNumAck
		GsToFsCheerReq
		FsToGsCheerAck
		GsToFsGetPotionCdReq
		FsToGsGetPotionCdAck
		GsToFsUsePotionReq
		FsToGsUsePotionAck
		GsToFsCollectionReq
		FsToGsCollectionAck
		GsToFsCollectionCancelReq
		FsToGsCollectionCancelAck
		FsToGsCollectionNtf
		GsToFsUseFitReq
		FsToGsUseFitAck
		GsToFsFitCacelReq
		FsToGsFitCacelAck
		GsToFsUpdatePetReq
		FsToGsUpdatePetAck
		GsToFsGmReq
		FsToGsGmAck
		GsToFsUseCutTreasureReq
		FsToGsUseCutTreasureAck
		GsToFsCheckForHelpReq
		FsToGsCheckForHelpResultAck
		GsToFsChangeToHelperReq
		GsToFsFightNumChangeReq
		GsToFsFightNpcEventReq
		FsToGsFightNpcEventAck
		GsToFsGamedbReloadReq
		GsToFsGamedbReloadAck
		WorldBossStatusNtf
		ExpStageKillMonsterNtf
		PersonFightResult
		VipBossFightResult
		TowerFightResult
		FieldBossResult
		DarkPalaceBossResult
		AncientBossResult
		HellBossResult
		DaBaoKillMonsterNtf
		DaBaoResumeEnergyReq
		MiningNewFightInfoReq
		MiningNewFightInfoAck
		MiningFightResultNtf
		HangUpKillWaveNtf
		HangUpBossFightEndNtf
		FightTotalData
		GuildbonfireExpAddNtf
		PaodianGoodsAddNtf
		ShabakeFightEndNtf
		ShabakeRankScore
		ShabakeCrossFightEndNtf
		ShabakeCrossRankScore
		WorldLeaderFightEndNtf
		WorldLeaderFightRankNtf
		WorldLeaderRankUnit
		GuardPillarFightEnd
		FsFieldBossDieUserInfoNtf
		MagicTowerFightEnd
		GsToFsFightScoreLessReq
		FsToGsFightScoreLessAck
		MagicTowerGetUserInfoReq
		MagicTowerGetUserInfoAck
		FsToGsShabakeKillBossNtf
		BossFamilyBossInfoReq
		BossFamilyBossInfoAck
		LoginKeyVerifyReq
		LoginKeyVerifyAck
		LoginKeyVerifyUpdateReq
		GsToCcsBackGuildInfoNtf
		CcsToGsBroadShaBakeFirstGuildInfo
		Info
		Display
*/
package pbserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChallengeSendLoseRewardNtf struct {
	RoundIndex int32   `protobuf:"varint,1,opt,name=roundIndex,proto3" json:"roundIndex,omitempty"`
	LoseUers   []int32 `protobuf:"varint,2,rep,packed,name=loseUers" json:"loseUers,omitempty"`
	WinUserId  int32   `protobuf:"varint,3,opt,name=winUserId,proto3" json:"winUserId,omitempty"`
	WinUsers   []int32 `protobuf:"varint,4,rep,packed,name=winUsers" json:"winUsers,omitempty"`
}

func (m *ChallengeSendLoseRewardNtf) Reset()         { *m = ChallengeSendLoseRewardNtf{} }
func (m *ChallengeSendLoseRewardNtf) String() string { return proto.CompactTextString(m) }
func (*ChallengeSendLoseRewardNtf) ProtoMessage()    {}
func (*ChallengeSendLoseRewardNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorChallenge, []int{0}
}

func (m *ChallengeSendLoseRewardNtf) GetRoundIndex() int32 {
	if m != nil {
		return m.RoundIndex
	}
	return 0
}

func (m *ChallengeSendLoseRewardNtf) GetLoseUers() []int32 {
	if m != nil {
		return m.LoseUers
	}
	return nil
}

func (m *ChallengeSendLoseRewardNtf) GetWinUserId() int32 {
	if m != nil {
		return m.WinUserId
	}
	return 0
}

func (m *ChallengeSendLoseRewardNtf) GetWinUsers() []int32 {
	if m != nil {
		return m.WinUsers
	}
	return nil
}

type ChallengeAppuserUpNtf struct {
	CrossFsId int32 `protobuf:"varint,1,opt,name=crossFsId,proto3" json:"crossFsId,omitempty"`
}

func (m *ChallengeAppuserUpNtf) Reset()                    { *m = ChallengeAppuserUpNtf{} }
func (m *ChallengeAppuserUpNtf) String() string            { return proto.CompactTextString(m) }
func (*ChallengeAppuserUpNtf) ProtoMessage()               {}
func (*ChallengeAppuserUpNtf) Descriptor() ([]byte, []int) { return fileDescriptorChallenge, []int{1} }

func (m *ChallengeAppuserUpNtf) GetCrossFsId() int32 {
	if m != nil {
		return m.CrossFsId
	}
	return 0
}

type ChallengeAppuserUpToGsNtf struct {
}

func (m *ChallengeAppuserUpToGsNtf) Reset()         { *m = ChallengeAppuserUpToGsNtf{} }
func (m *ChallengeAppuserUpToGsNtf) String() string { return proto.CompactTextString(m) }
func (*ChallengeAppuserUpToGsNtf) ProtoMessage()    {}
func (*ChallengeAppuserUpToGsNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorChallenge, []int{2}
}

func init() {
	proto.RegisterType((*ChallengeSendLoseRewardNtf)(nil), "pbserver.ChallengeSendLoseRewardNtf")
	proto.RegisterType((*ChallengeAppuserUpNtf)(nil), "pbserver.ChallengeAppuserUpNtf")
	proto.RegisterType((*ChallengeAppuserUpToGsNtf)(nil), "pbserver.ChallengeAppuserUpToGsNtf")
}
func (m *ChallengeSendLoseRewardNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSendLoseRewardNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoundIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.RoundIndex))
	}
	if len(m.LoseUers) > 0 {
		dAtA2 := make([]byte, len(m.LoseUers)*10)
		var j1 int
		for _, num1 := range m.LoseUers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.WinUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.WinUserId))
	}
	if len(m.WinUsers) > 0 {
		dAtA4 := make([]byte, len(m.WinUsers)*10)
		var j3 int
		for _, num1 := range m.WinUsers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *ChallengeAppuserUpNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeAppuserUpNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CrossFsId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.CrossFsId))
	}
	return i, nil
}

func (m *ChallengeAppuserUpToGsNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeAppuserUpToGsNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintChallenge(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChallengeSendLoseRewardNtf) Size() (n int) {
	var l int
	_ = l
	if m.RoundIndex != 0 {
		n += 1 + sovChallenge(uint64(m.RoundIndex))
	}
	if len(m.LoseUers) > 0 {
		l = 0
		for _, e := range m.LoseUers {
			l += sovChallenge(uint64(e))
		}
		n += 1 + sovChallenge(uint64(l)) + l
	}
	if m.WinUserId != 0 {
		n += 1 + sovChallenge(uint64(m.WinUserId))
	}
	if len(m.WinUsers) > 0 {
		l = 0
		for _, e := range m.WinUsers {
			l += sovChallenge(uint64(e))
		}
		n += 1 + sovChallenge(uint64(l)) + l
	}
	return n
}

func (m *ChallengeAppuserUpNtf) Size() (n int) {
	var l int
	_ = l
	if m.CrossFsId != 0 {
		n += 1 + sovChallenge(uint64(m.CrossFsId))
	}
	return n
}

func (m *ChallengeAppuserUpToGsNtf) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovChallenge(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChallenge(x uint64) (n int) {
	return sovChallenge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChallengeSendLoseRewardNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSendLoseRewardNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSendLoseRewardNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIndex", wireType)
			}
			m.RoundIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoseUers = append(m.LoseUers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChallenge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChallenge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoseUers = append(m.LoseUers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseUers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinUserId", wireType)
			}
			m.WinUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WinUsers = append(m.WinUsers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChallenge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChallenge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WinUsers = append(m.WinUsers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WinUsers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeAppuserUpNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeAppuserUpNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeAppuserUpNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossFsId", wireType)
			}
			m.CrossFsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossFsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeAppuserUpToGsNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeAppuserUpToGsNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeAppuserUpToGsNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChallenge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChallenge
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChallenge(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChallenge = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChallenge   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("challenge.proto", fileDescriptorChallenge) }

var fileDescriptorChallenge = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0x48, 0xcc,
	0xc9, 0x49, 0xcd, 0x4b, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x48, 0x2a,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x52, 0x9a, 0xc4, 0xc8, 0x25, 0xe5, 0x0c, 0x93, 0x0d, 0x4e, 0xcd,
	0x4b, 0xf1, 0xc9, 0x2f, 0x4e, 0x0d, 0x4a, 0x2d, 0x4f, 0x2c, 0x4a, 0xf1, 0x2b, 0x49, 0x13, 0x92,
	0xe3, 0xe2, 0x2a, 0xca, 0x2f, 0xcd, 0x4b, 0xf1, 0xcc, 0x4b, 0x49, 0xad, 0x90, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0d, 0x42, 0x12, 0x11, 0x92, 0xe2, 0xe2, 0xc8, 0xc9, 0x2f, 0x4e, 0x0d, 0x4d, 0x2d,
	0x2a, 0x96, 0x60, 0x52, 0x60, 0xd6, 0x60, 0x0d, 0x82, 0xf3, 0x85, 0x64, 0xb8, 0x38, 0xcb, 0x33,
	0xf3, 0x42, 0x8b, 0x53, 0x8b, 0x3c, 0x53, 0x24, 0x98, 0xc1, 0x5a, 0x11, 0x02, 0x20, 0x9d, 0x50,
	0x4e, 0xb1, 0x04, 0x0b, 0x44, 0x27, 0x8c, 0xaf, 0x64, 0xca, 0x25, 0x0a, 0x77, 0x93, 0x63, 0x41,
	0x41, 0x69, 0x71, 0x6a, 0x51, 0x68, 0x01, 0xc8, 0x39, 0x32, 0x5c, 0x9c, 0xc9, 0x45, 0xf9, 0xc5,
	0xc5, 0x6e, 0xc5, 0x9e, 0x29, 0x50, 0xd7, 0x20, 0x04, 0x94, 0xa4, 0xb9, 0x24, 0x31, 0xb5, 0x85,
	0xe4, 0xbb, 0x17, 0xfb, 0x95, 0xa4, 0x39, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c,
	0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0xc3, 0xc2, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x5b, 0xd0, 0xbb, 0x29, 0x1e, 0x01, 0x00, 0x00,
}
