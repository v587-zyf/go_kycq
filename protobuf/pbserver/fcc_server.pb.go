// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fcc_server.proto

package pbserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GSMessageToFS struct {
	Msg           []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	CrossServerId int32  `protobuf:"varint,2,opt,name=crossServerId,proto3" json:"crossServerId,omitempty"`
	ServerId      int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	GsTransId     int32  `protobuf:"varint,4,opt,name=gsTransId,proto3" json:"gsTransId,omitempty"`
}

func (m *GSMessageToFS) Reset()                    { *m = GSMessageToFS{} }
func (m *GSMessageToFS) String() string            { return proto.CompactTextString(m) }
func (*GSMessageToFS) ProtoMessage()               {}
func (*GSMessageToFS) Descriptor() ([]byte, []int) { return fileDescriptorFccServer, []int{0} }

func (m *GSMessageToFS) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GSMessageToFS) GetCrossServerId() int32 {
	if m != nil {
		return m.CrossServerId
	}
	return 0
}

func (m *GSMessageToFS) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GSMessageToFS) GetGsTransId() int32 {
	if m != nil {
		return m.GsTransId
	}
	return 0
}

type FSMessageToGS struct {
	Msg           []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	CrossServerId int32  `protobuf:"varint,2,opt,name=crossServerId,proto3" json:"crossServerId,omitempty"`
	ServerId      int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	GsTransId     int32  `protobuf:"varint,4,opt,name=gsTransId,proto3" json:"gsTransId,omitempty"`
}

func (m *FSMessageToGS) Reset()                    { *m = FSMessageToGS{} }
func (m *FSMessageToGS) String() string            { return proto.CompactTextString(m) }
func (*FSMessageToGS) ProtoMessage()               {}
func (*FSMessageToGS) Descriptor() ([]byte, []int) { return fileDescriptorFccServer, []int{1} }

func (m *FSMessageToGS) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *FSMessageToGS) GetCrossServerId() int32 {
	if m != nil {
		return m.CrossServerId
	}
	return 0
}

func (m *FSMessageToGS) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *FSMessageToGS) GetGsTransId() int32 {
	if m != nil {
		return m.GsTransId
	}
	return 0
}

type FSCallMessageToGS struct {
	Msg           []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	CrossServerId int32  `protobuf:"varint,2,opt,name=crossServerId,proto3" json:"crossServerId,omitempty"`
	ServerId      int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	FsTransId     int32  `protobuf:"varint,4,opt,name=fsTransId,proto3" json:"fsTransId,omitempty"`
}

func (m *FSCallMessageToGS) Reset()                    { *m = FSCallMessageToGS{} }
func (m *FSCallMessageToGS) String() string            { return proto.CompactTextString(m) }
func (*FSCallMessageToGS) ProtoMessage()               {}
func (*FSCallMessageToGS) Descriptor() ([]byte, []int) { return fileDescriptorFccServer, []int{2} }

func (m *FSCallMessageToGS) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *FSCallMessageToGS) GetCrossServerId() int32 {
	if m != nil {
		return m.CrossServerId
	}
	return 0
}

func (m *FSCallMessageToGS) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *FSCallMessageToGS) GetFsTransId() int32 {
	if m != nil {
		return m.FsTransId
	}
	return 0
}

type GSCallMessageToFS struct {
	Msg           []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	CrossServerId int32  `protobuf:"varint,2,opt,name=crossServerId,proto3" json:"crossServerId,omitempty"`
	ServerId      int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	FsTransId     int32  `protobuf:"varint,4,opt,name=fsTransId,proto3" json:"fsTransId,omitempty"`
}

func (m *GSCallMessageToFS) Reset()                    { *m = GSCallMessageToFS{} }
func (m *GSCallMessageToFS) String() string            { return proto.CompactTextString(m) }
func (*GSCallMessageToFS) ProtoMessage()               {}
func (*GSCallMessageToFS) Descriptor() ([]byte, []int) { return fileDescriptorFccServer, []int{3} }

func (m *GSCallMessageToFS) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GSCallMessageToFS) GetCrossServerId() int32 {
	if m != nil {
		return m.CrossServerId
	}
	return 0
}

func (m *GSCallMessageToFS) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *GSCallMessageToFS) GetFsTransId() int32 {
	if m != nil {
		return m.FsTransId
	}
	return 0
}

func init() {
	proto.RegisterType((*GSMessageToFS)(nil), "pbserver.GSMessageToFS")
	proto.RegisterType((*FSMessageToGS)(nil), "pbserver.FSMessageToGS")
	proto.RegisterType((*FSCallMessageToGS)(nil), "pbserver.FSCallMessageToGS")
	proto.RegisterType((*GSCallMessageToFS)(nil), "pbserver.GSCallMessageToFS")
}
func (m *GSMessageToFS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GSMessageToFS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.CrossServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.ServerId))
	}
	if m.GsTransId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.GsTransId))
	}
	return i, nil
}

func (m *FSMessageToGS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSMessageToGS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.CrossServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.ServerId))
	}
	if m.GsTransId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.GsTransId))
	}
	return i, nil
}

func (m *FSCallMessageToGS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSCallMessageToGS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.CrossServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.ServerId))
	}
	if m.FsTransId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.FsTransId))
	}
	return i, nil
}

func (m *GSCallMessageToFS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GSCallMessageToFS) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.CrossServerId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.ServerId))
	}
	if m.FsTransId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFccServer(dAtA, i, uint64(m.FsTransId))
	}
	return i, nil
}

func encodeVarintFccServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GSMessageToFS) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFccServer(uint64(l))
	}
	if m.CrossServerId != 0 {
		n += 1 + sovFccServer(uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovFccServer(uint64(m.ServerId))
	}
	if m.GsTransId != 0 {
		n += 1 + sovFccServer(uint64(m.GsTransId))
	}
	return n
}

func (m *FSMessageToGS) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFccServer(uint64(l))
	}
	if m.CrossServerId != 0 {
		n += 1 + sovFccServer(uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovFccServer(uint64(m.ServerId))
	}
	if m.GsTransId != 0 {
		n += 1 + sovFccServer(uint64(m.GsTransId))
	}
	return n
}

func (m *FSCallMessageToGS) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFccServer(uint64(l))
	}
	if m.CrossServerId != 0 {
		n += 1 + sovFccServer(uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovFccServer(uint64(m.ServerId))
	}
	if m.FsTransId != 0 {
		n += 1 + sovFccServer(uint64(m.FsTransId))
	}
	return n
}

func (m *GSCallMessageToFS) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFccServer(uint64(l))
	}
	if m.CrossServerId != 0 {
		n += 1 + sovFccServer(uint64(m.CrossServerId))
	}
	if m.ServerId != 0 {
		n += 1 + sovFccServer(uint64(m.ServerId))
	}
	if m.FsTransId != 0 {
		n += 1 + sovFccServer(uint64(m.FsTransId))
	}
	return n
}

func sovFccServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFccServer(x uint64) (n int) {
	return sovFccServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GSMessageToFS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFccServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GSMessageToFS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GSMessageToFS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFccServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossServerId", wireType)
			}
			m.CrossServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GsTransId", wireType)
			}
			m.GsTransId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GsTransId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFccServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFccServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FSMessageToGS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFccServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSMessageToGS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSMessageToGS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFccServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossServerId", wireType)
			}
			m.CrossServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GsTransId", wireType)
			}
			m.GsTransId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GsTransId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFccServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFccServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FSCallMessageToGS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFccServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSCallMessageToGS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSCallMessageToGS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFccServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossServerId", wireType)
			}
			m.CrossServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsTransId", wireType)
			}
			m.FsTransId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FsTransId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFccServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFccServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GSCallMessageToFS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFccServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GSCallMessageToFS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GSCallMessageToFS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFccServer
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossServerId", wireType)
			}
			m.CrossServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FsTransId", wireType)
			}
			m.FsTransId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FsTransId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFccServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFccServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFccServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFccServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFccServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFccServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFccServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFccServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFccServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFccServer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fcc_server.proto", fileDescriptorFccServer) }

var fileDescriptorFccServer = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4b, 0x4e, 0x8e,
	0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x48,
	0x82, 0xf0, 0x95, 0x1a, 0x19, 0xb9, 0x78, 0xdd, 0x83, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x43, 0xf2, 0xdd, 0x82, 0x85, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x78, 0x82, 0x40, 0x4c, 0x21, 0x15, 0x2e, 0xde, 0xe4, 0xa2, 0xfc, 0xe2, 0xe2, 0x60, 0xb0, 0x16,
	0xcf, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x54, 0x41, 0x21, 0x29, 0x2e, 0x8e, 0x62,
	0x98, 0x02, 0x66, 0xb0, 0x02, 0x38, 0x5f, 0x48, 0x86, 0x8b, 0x33, 0xbd, 0x38, 0xa4, 0x28, 0x31,
	0xaf, 0xd8, 0x33, 0x45, 0x82, 0x05, 0x2c, 0x89, 0x10, 0x00, 0xbb, 0xc1, 0x0d, 0xe1, 0x06, 0xf7,
	0x81, 0x70, 0x43, 0x2b, 0x23, 0x97, 0xa0, 0x5b, 0xb0, 0x73, 0x62, 0x4e, 0x0e, 0x1d, 0xdc, 0x91,
	0x86, 0xee, 0x8e, 0x34, 0x14, 0x77, 0xb8, 0xa3, 0xba, 0xc3, 0x6d, 0x00, 0xdc, 0xe1, 0x24, 0x70,
	0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7,
	0x90, 0xc4, 0x06, 0x4e, 0x3a, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xa3, 0x4f, 0x19,
	0x4e, 0x02, 0x00, 0x00,
}
