// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fabao.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 法宝激活
type FabaoActiveReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FabaoActiveReq) Reset()                    { *m = FabaoActiveReq{} }
func (m *FabaoActiveReq) String() string            { return proto.CompactTextString(m) }
func (*FabaoActiveReq) ProtoMessage()               {}
func (*FabaoActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorFabao, []int{0} }

func (m *FabaoActiveReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FabaoActiveAck struct {
	Fabao *Fabao `protobuf:"bytes,1,opt,name=fabao" json:"fabao,omitempty"`
}

func (m *FabaoActiveAck) Reset()                    { *m = FabaoActiveAck{} }
func (m *FabaoActiveAck) String() string            { return proto.CompactTextString(m) }
func (*FabaoActiveAck) ProtoMessage()               {}
func (*FabaoActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorFabao, []int{1} }

func (m *FabaoActiveAck) GetFabao() *Fabao {
	if m != nil {
		return m.Fabao
	}
	return nil
}

// 法宝升级
type FabaoUpLevelReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FabaoUpLevelReq) Reset()                    { *m = FabaoUpLevelReq{} }
func (m *FabaoUpLevelReq) String() string            { return proto.CompactTextString(m) }
func (*FabaoUpLevelReq) ProtoMessage()               {}
func (*FabaoUpLevelReq) Descriptor() ([]byte, []int) { return fileDescriptorFabao, []int{2} }

func (m *FabaoUpLevelReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FabaoUpLevelAck struct {
	Fabao *Fabao `protobuf:"bytes,1,opt,name=fabao" json:"fabao,omitempty"`
}

func (m *FabaoUpLevelAck) Reset()                    { *m = FabaoUpLevelAck{} }
func (m *FabaoUpLevelAck) String() string            { return proto.CompactTextString(m) }
func (*FabaoUpLevelAck) ProtoMessage()               {}
func (*FabaoUpLevelAck) Descriptor() ([]byte, []int) { return fileDescriptorFabao, []int{3} }

func (m *FabaoUpLevelAck) GetFabao() *Fabao {
	if m != nil {
		return m.Fabao
	}
	return nil
}

// 法宝技能激活
type FabaoSkillActiveReq struct {
	Id      int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SkillId int32 `protobuf:"varint,2,opt,name=skillId,proto3" json:"skillId,omitempty"`
}

func (m *FabaoSkillActiveReq) Reset()                    { *m = FabaoSkillActiveReq{} }
func (m *FabaoSkillActiveReq) String() string            { return proto.CompactTextString(m) }
func (*FabaoSkillActiveReq) ProtoMessage()               {}
func (*FabaoSkillActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorFabao, []int{4} }

func (m *FabaoSkillActiveReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FabaoSkillActiveReq) GetSkillId() int32 {
	if m != nil {
		return m.SkillId
	}
	return 0
}

type FabaoSkillActiveAck struct {
	Fabao *Fabao `protobuf:"bytes,1,opt,name=fabao" json:"fabao,omitempty"`
}

func (m *FabaoSkillActiveAck) Reset()                    { *m = FabaoSkillActiveAck{} }
func (m *FabaoSkillActiveAck) String() string            { return proto.CompactTextString(m) }
func (*FabaoSkillActiveAck) ProtoMessage()               {}
func (*FabaoSkillActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorFabao, []int{5} }

func (m *FabaoSkillActiveAck) GetFabao() *Fabao {
	if m != nil {
		return m.Fabao
	}
	return nil
}

func init() {
	proto.RegisterType((*FabaoActiveReq)(nil), "pb.FabaoActiveReq")
	proto.RegisterType((*FabaoActiveAck)(nil), "pb.FabaoActiveAck")
	proto.RegisterType((*FabaoUpLevelReq)(nil), "pb.FabaoUpLevelReq")
	proto.RegisterType((*FabaoUpLevelAck)(nil), "pb.FabaoUpLevelAck")
	proto.RegisterType((*FabaoSkillActiveReq)(nil), "pb.FabaoSkillActiveReq")
	proto.RegisterType((*FabaoSkillActiveAck)(nil), "pb.FabaoSkillActiveAck")
}
func (m *FabaoActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabaoActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *FabaoActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabaoActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fabao != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.Fabao.Size()))
		n1, err := m.Fabao.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FabaoUpLevelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabaoUpLevelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *FabaoUpLevelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabaoUpLevelAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fabao != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.Fabao.Size()))
		n2, err := m.Fabao.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *FabaoSkillActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabaoSkillActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.Id))
	}
	if m.SkillId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.SkillId))
	}
	return i, nil
}

func (m *FabaoSkillActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FabaoSkillActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fabao != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFabao(dAtA, i, uint64(m.Fabao.Size()))
		n3, err := m.Fabao.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintFabao(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FabaoActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFabao(uint64(m.Id))
	}
	return n
}

func (m *FabaoActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Fabao != nil {
		l = m.Fabao.Size()
		n += 1 + l + sovFabao(uint64(l))
	}
	return n
}

func (m *FabaoUpLevelReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFabao(uint64(m.Id))
	}
	return n
}

func (m *FabaoUpLevelAck) Size() (n int) {
	var l int
	_ = l
	if m.Fabao != nil {
		l = m.Fabao.Size()
		n += 1 + l + sovFabao(uint64(l))
	}
	return n
}

func (m *FabaoSkillActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFabao(uint64(m.Id))
	}
	if m.SkillId != 0 {
		n += 1 + sovFabao(uint64(m.SkillId))
	}
	return n
}

func (m *FabaoSkillActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Fabao != nil {
		l = m.Fabao.Size()
		n += 1 + l + sovFabao(uint64(l))
	}
	return n
}

func sovFabao(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFabao(x uint64) (n int) {
	return sovFabao(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FabaoActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FabaoActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FabaoActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FabaoActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FabaoActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FabaoActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fabao", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabao
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fabao == nil {
				m.Fabao = &Fabao{}
			}
			if err := m.Fabao.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FabaoUpLevelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FabaoUpLevelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FabaoUpLevelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FabaoUpLevelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FabaoUpLevelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FabaoUpLevelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fabao", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabao
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fabao == nil {
				m.Fabao = &Fabao{}
			}
			if err := m.Fabao.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FabaoSkillActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FabaoSkillActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FabaoSkillActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillId", wireType)
			}
			m.SkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FabaoSkillActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FabaoSkillActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FabaoSkillActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fabao", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFabao
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fabao == nil {
				m.Fabao = &Fabao{}
			}
			if err := m.Fabao.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFabao(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFabao
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFabao(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFabao
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFabao
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFabao
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFabao
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFabao(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFabao = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFabao   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fabao.proto", fileDescriptorFabao) }

var fileDescriptorFabao = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4b, 0x4c, 0x4a,
	0xcc, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf,
	0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x29, 0x70, 0xf1, 0xb9, 0x81, 0x14, 0x38, 0x26, 0x97, 0x64,
	0x96, 0xa5, 0x06, 0xa5, 0x16, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0x31, 0x65, 0xa6, 0x28, 0x19, 0xa2, 0xa8, 0x70, 0x4c, 0xce, 0x16, 0x92, 0xe7, 0x62,
	0x05, 0x1b, 0x0a, 0x56, 0xc4, 0x6d, 0xc4, 0xa9, 0x57, 0x90, 0xa4, 0x07, 0x56, 0x12, 0x04, 0x11,
	0x57, 0x52, 0xe4, 0xe2, 0x07, 0xf3, 0x43, 0x0b, 0x7c, 0x52, 0xcb, 0x52, 0x73, 0xb0, 0x99, 0x6a,
	0x84, 0xaa, 0x84, 0x28, 0x63, 0xed, 0xb9, 0x84, 0xc1, 0xfc, 0xe0, 0xec, 0xcc, 0x9c, 0x1c, 0x9c,
	0x0e, 0x16, 0x92, 0xe0, 0x62, 0x2f, 0x06, 0xa9, 0xf0, 0x4c, 0x91, 0x60, 0x02, 0x0b, 0xc2, 0xb8,
	0x4a, 0x66, 0x98, 0x06, 0x10, 0x63, 0xb1, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0xf4, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x72, 0xc4, 0xf6, 0xba, 0x5e, 0x01, 0x00, 0x00,
}
