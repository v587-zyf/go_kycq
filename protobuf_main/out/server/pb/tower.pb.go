// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tower.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OpenTowerReq struct {
}

func (m *OpenTowerReq) Reset()                    { *m = OpenTowerReq{} }
func (m *OpenTowerReq) String() string            { return proto.CompactTextString(m) }
func (*OpenTowerReq) ProtoMessage()               {}
func (*OpenTowerReq) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{0} }

type OpenTowerAck struct {
	TowerLv    int32   `protobuf:"varint,1,opt,name=towerLv,proto3" json:"towerLv,omitempty"`
	DayAward   bool    `protobuf:"varint,2,opt,name=dayAward,proto3" json:"dayAward,omitempty"`
	LotteryNum int32   `protobuf:"varint,3,opt,name=lotteryNum,proto3" json:"lotteryNum,omitempty"`
	LotterId   int32   `protobuf:"varint,4,opt,name=lotterId,proto3" json:"lotterId,omitempty"`
	Lottery    []int32 `protobuf:"varint,5,rep,packed,name=lottery" json:"lottery,omitempty"`
}

func (m *OpenTowerAck) Reset()                    { *m = OpenTowerAck{} }
func (m *OpenTowerAck) String() string            { return proto.CompactTextString(m) }
func (*OpenTowerAck) ProtoMessage()               {}
func (*OpenTowerAck) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{1} }

func (m *OpenTowerAck) GetTowerLv() int32 {
	if m != nil {
		return m.TowerLv
	}
	return 0
}

func (m *OpenTowerAck) GetDayAward() bool {
	if m != nil {
		return m.DayAward
	}
	return false
}

func (m *OpenTowerAck) GetLotteryNum() int32 {
	if m != nil {
		return m.LotteryNum
	}
	return 0
}

func (m *OpenTowerAck) GetLotterId() int32 {
	if m != nil {
		return m.LotterId
	}
	return 0
}

func (m *OpenTowerAck) GetLottery() []int32 {
	if m != nil {
		return m.Lottery
	}
	return nil
}

type ToweryDayAwardReq struct {
}

func (m *ToweryDayAwardReq) Reset()                    { *m = ToweryDayAwardReq{} }
func (m *ToweryDayAwardReq) String() string            { return proto.CompactTextString(m) }
func (*ToweryDayAwardReq) ProtoMessage()               {}
func (*ToweryDayAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{2} }

type ToweryDayAwardAck struct {
	DayAward bool            `protobuf:"varint,1,opt,name=dayAward,proto3" json:"dayAward,omitempty"`
	Goods    *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *ToweryDayAwardAck) Reset()                    { *m = ToweryDayAwardAck{} }
func (m *ToweryDayAwardAck) String() string            { return proto.CompactTextString(m) }
func (*ToweryDayAwardAck) ProtoMessage()               {}
func (*ToweryDayAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{3} }

func (m *ToweryDayAwardAck) GetDayAward() bool {
	if m != nil {
		return m.DayAward
	}
	return false
}

func (m *ToweryDayAwardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type TowerLotteryReq struct {
}

func (m *TowerLotteryReq) Reset()                    { *m = TowerLotteryReq{} }
func (m *TowerLotteryReq) String() string            { return proto.CompactTextString(m) }
func (*TowerLotteryReq) ProtoMessage()               {}
func (*TowerLotteryReq) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{4} }

type TowerLotteryAck struct {
	LotteryNum        int32           `protobuf:"varint,1,opt,name=lotteryNum,proto3" json:"lotteryNum,omitempty"`
	LotteryId         int32           `protobuf:"varint,2,opt,name=lotteryId,proto3" json:"lotteryId,omitempty"`
	LotteryAwardIndex int32           `protobuf:"varint,3,opt,name=lotteryAwardIndex,proto3" json:"lotteryAwardIndex,omitempty"`
	Goods             *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *TowerLotteryAck) Reset()                    { *m = TowerLotteryAck{} }
func (m *TowerLotteryAck) String() string            { return proto.CompactTextString(m) }
func (*TowerLotteryAck) ProtoMessage()               {}
func (*TowerLotteryAck) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{5} }

func (m *TowerLotteryAck) GetLotteryNum() int32 {
	if m != nil {
		return m.LotteryNum
	}
	return 0
}

func (m *TowerLotteryAck) GetLotteryId() int32 {
	if m != nil {
		return m.LotteryId
	}
	return 0
}

func (m *TowerLotteryAck) GetLotteryAwardIndex() int32 {
	if m != nil {
		return m.LotteryAwardIndex
	}
	return 0
}

func (m *TowerLotteryAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type EnterTowerFightReq struct {
}

func (m *EnterTowerFightReq) Reset()                    { *m = EnterTowerFightReq{} }
func (m *EnterTowerFightReq) String() string            { return proto.CompactTextString(m) }
func (*EnterTowerFightReq) ProtoMessage()               {}
func (*EnterTowerFightReq) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{6} }

type TowerFightResultNtf struct {
	Result  int32           `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Goods   *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
	TowerLv int32           `protobuf:"varint,3,opt,name=towerLv,proto3" json:"towerLv,omitempty"`
}

func (m *TowerFightResultNtf) Reset()                    { *m = TowerFightResultNtf{} }
func (m *TowerFightResultNtf) String() string            { return proto.CompactTextString(m) }
func (*TowerFightResultNtf) ProtoMessage()               {}
func (*TowerFightResultNtf) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{7} }

func (m *TowerFightResultNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *TowerFightResultNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *TowerFightResultNtf) GetTowerLv() int32 {
	if m != nil {
		return m.TowerLv
	}
	return 0
}

type TowerFightContinueReq struct {
}

func (m *TowerFightContinueReq) Reset()                    { *m = TowerFightContinueReq{} }
func (m *TowerFightContinueReq) String() string            { return proto.CompactTextString(m) }
func (*TowerFightContinueReq) ProtoMessage()               {}
func (*TowerFightContinueReq) Descriptor() ([]byte, []int) { return fileDescriptorTower, []int{8} }

func init() {
	proto.RegisterType((*OpenTowerReq)(nil), "pb.OpenTowerReq")
	proto.RegisterType((*OpenTowerAck)(nil), "pb.OpenTowerAck")
	proto.RegisterType((*ToweryDayAwardReq)(nil), "pb.ToweryDayAwardReq")
	proto.RegisterType((*ToweryDayAwardAck)(nil), "pb.ToweryDayAwardAck")
	proto.RegisterType((*TowerLotteryReq)(nil), "pb.TowerLotteryReq")
	proto.RegisterType((*TowerLotteryAck)(nil), "pb.TowerLotteryAck")
	proto.RegisterType((*EnterTowerFightReq)(nil), "pb.EnterTowerFightReq")
	proto.RegisterType((*TowerFightResultNtf)(nil), "pb.TowerFightResultNtf")
	proto.RegisterType((*TowerFightContinueReq)(nil), "pb.TowerFightContinueReq")
}
func (m *OpenTowerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenTowerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OpenTowerAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenTowerAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TowerLv != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.TowerLv))
	}
	if m.DayAward {
		dAtA[i] = 0x10
		i++
		if m.DayAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.LotteryNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.LotteryNum))
	}
	if m.LotterId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.LotterId))
	}
	if len(m.Lottery) > 0 {
		dAtA2 := make([]byte, len(m.Lottery)*10)
		var j1 int
		for _, num1 := range m.Lottery {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTower(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *ToweryDayAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToweryDayAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ToweryDayAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToweryDayAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayAward {
		dAtA[i] = 0x8
		i++
		if m.DayAward {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TowerLotteryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerLotteryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TowerLotteryAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerLotteryAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LotteryNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.LotteryNum))
	}
	if m.LotteryId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.LotteryId))
	}
	if m.LotteryAwardIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.LotteryAwardIndex))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Goods.Size()))
		n4, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *EnterTowerFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterTowerFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TowerFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Result))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.Goods.Size()))
		n5, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.TowerLv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTower(dAtA, i, uint64(m.TowerLv))
	}
	return i, nil
}

func (m *TowerFightContinueReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TowerFightContinueReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTower(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OpenTowerReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *OpenTowerAck) Size() (n int) {
	var l int
	_ = l
	if m.TowerLv != 0 {
		n += 1 + sovTower(uint64(m.TowerLv))
	}
	if m.DayAward {
		n += 2
	}
	if m.LotteryNum != 0 {
		n += 1 + sovTower(uint64(m.LotteryNum))
	}
	if m.LotterId != 0 {
		n += 1 + sovTower(uint64(m.LotterId))
	}
	if len(m.Lottery) > 0 {
		l = 0
		for _, e := range m.Lottery {
			l += sovTower(uint64(e))
		}
		n += 1 + sovTower(uint64(l)) + l
	}
	return n
}

func (m *ToweryDayAwardReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ToweryDayAwardAck) Size() (n int) {
	var l int
	_ = l
	if m.DayAward {
		n += 2
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovTower(uint64(l))
	}
	return n
}

func (m *TowerLotteryReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TowerLotteryAck) Size() (n int) {
	var l int
	_ = l
	if m.LotteryNum != 0 {
		n += 1 + sovTower(uint64(m.LotteryNum))
	}
	if m.LotteryId != 0 {
		n += 1 + sovTower(uint64(m.LotteryId))
	}
	if m.LotteryAwardIndex != 0 {
		n += 1 + sovTower(uint64(m.LotteryAwardIndex))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovTower(uint64(l))
	}
	return n
}

func (m *EnterTowerFightReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TowerFightResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovTower(uint64(m.Result))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovTower(uint64(l))
	}
	if m.TowerLv != 0 {
		n += 1 + sovTower(uint64(m.TowerLv))
	}
	return n
}

func (m *TowerFightContinueReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTower(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTower(x uint64) (n int) {
	return sovTower(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpenTowerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenTowerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenTowerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenTowerAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenTowerAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenTowerAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerLv", wireType)
			}
			m.TowerLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TowerLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayAward = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryNum", wireType)
			}
			m.LotteryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotterId", wireType)
			}
			m.LotterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotterId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Lottery = append(m.Lottery, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTower
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTower
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTower
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Lottery = append(m.Lottery, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Lottery", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToweryDayAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToweryDayAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToweryDayAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToweryDayAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToweryDayAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToweryDayAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayAward", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DayAward = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowerLotteryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerLotteryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerLotteryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowerLotteryAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerLotteryAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerLotteryAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryNum", wireType)
			}
			m.LotteryNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryId", wireType)
			}
			m.LotteryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotteryAwardIndex", wireType)
			}
			m.LotteryAwardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotteryAwardIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterTowerFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterTowerFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterTowerFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowerFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTower
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TowerLv", wireType)
			}
			m.TowerLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTower
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TowerLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TowerFightContinueReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTower
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TowerFightContinueReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TowerFightContinueReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTower(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTower
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTower(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTower
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTower
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTower
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTower
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTower(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTower = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTower   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tower.proto", fileDescriptorTower) }

var fileDescriptorTower = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcb, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0x2d, 0x30, 0x88, 0x07, 0xa2, 0x52, 0xbc, 0x34, 0xc4, 0x4c, 0xc8, 0xac, 0x58, 0x18,
	0x16, 0xfa, 0x04, 0x88, 0x97, 0x90, 0x10, 0x4c, 0x1a, 0x37, 0x2e, 0x81, 0x29, 0x97, 0x08, 0xed,
	0x50, 0x8a, 0xc8, 0x9b, 0x18, 0x5f, 0xc0, 0x57, 0x71, 0xe9, 0x23, 0x18, 0x7c, 0x11, 0xd3, 0x4e,
	0x65, 0x66, 0x60, 0xa1, 0xcb, 0xff, 0xef, 0xe9, 0xf9, 0xbf, 0x73, 0x72, 0x20, 0xaf, 0xc4, 0x82,
	0xc9, 0x5a, 0x20, 0x85, 0x12, 0x38, 0x15, 0x74, 0xcb, 0x85, 0x9e, 0x98, 0x4c, 0x04, 0x0f, 0x1d,
	0x6f, 0x1f, 0x0a, 0xf7, 0x01, 0xe3, 0x0f, 0xba, 0x88, 0xb2, 0xa9, 0xf7, 0x86, 0x62, 0x46, 0xbd,
	0xf7, 0x84, 0x09, 0xec, 0x9a, 0x0e, 0xad, 0x67, 0x82, 0x2a, 0xa8, 0xea, 0xd0, 0x5f, 0x89, 0xcb,
	0x90, 0xf3, 0x3b, 0xcb, 0xfa, 0xa2, 0x23, 0x7d, 0x92, 0xaa, 0xa0, 0x6a, 0x8e, 0xae, 0x35, 0x76,
	0x01, 0xc6, 0x42, 0x29, 0x26, 0x97, 0xed, 0xf9, 0x84, 0xa4, 0xcd, 0xc7, 0x98, 0xa3, 0xff, 0x86,
	0xaa, 0xe9, 0x93, 0x8c, 0x79, 0x5d, 0x6b, 0x9d, 0x68, 0x2b, 0x89, 0x53, 0x49, 0xeb, 0x44, 0x2b,
	0xbd, 0x12, 0x14, 0x0d, 0xd7, 0xf2, 0xda, 0xe6, 0x68, 0xe2, 0xc7, 0x4d, 0x53, 0x53, 0xc7, 0xd9,
	0xd0, 0x06, 0x5b, 0x15, 0x9c, 0x81, 0x10, 0xfe, 0xcc, 0x40, 0xe7, 0x2f, 0x70, 0x2d, 0xe8, 0xd6,
	0xee, 0xb4, 0xd1, 0x18, 0x76, 0xf8, 0x80, 0xb5, 0x55, 0x9f, 0x86, 0x05, 0x5e, 0x11, 0x0e, 0x4c,
	0xeb, 0x56, 0x98, 0xaf, 0xd3, 0xde, 0x51, 0xd2, 0xd3, 0x61, 0xc9, 0x61, 0xd1, 0xd6, 0xb0, 0x67,
	0xb0, 0x67, 0x55, 0x33, 0xdc, 0x94, 0x43, 0x23, 0x03, 0x9f, 0x43, 0xd1, 0x0a, 0x83, 0xd7, 0xe4,
	0x3e, 0x7b, 0xb1, 0x1b, 0xdb, 0x7e, 0x88, 0xe0, 0x33, 0x7f, 0xc1, 0x1f, 0x01, 0xbe, 0xe1, 0x8a,
	0x49, 0x43, 0x7b, 0x3b, 0x1a, 0x0c, 0x95, 0xe6, 0x9f, 0x42, 0x29, 0x6e, 0xcc, 0xe6, 0x63, 0xd5,
	0x56, 0x7d, 0x7c, 0x02, 0x59, 0x69, 0x84, 0xc5, 0xb7, 0xea, 0xff, 0xbb, 0x8a, 0xdf, 0x49, 0x3a,
	0x71, 0x27, 0xde, 0x29, 0x1c, 0x47, 0x91, 0x0d, 0xc1, 0xd5, 0x88, 0xcf, 0x19, 0x65, 0xd3, 0xab,
	0xc3, 0x8f, 0x95, 0x8b, 0x3e, 0x57, 0x2e, 0xfa, 0x5a, 0xb9, 0xe8, 0xf5, 0xdb, 0xdd, 0xe9, 0x66,
	0xcd, 0x51, 0x5e, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x37, 0x2d, 0x70, 0xff, 0xb5, 0x02, 0x00,
	0x00,
}
