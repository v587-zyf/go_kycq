// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: chat.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 聊天消息
type ChatMessageNtf struct {
	Sender *BriefUserInfo `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Type   int32          `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Msg    string         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	Ts     int32          `protobuf:"varint,4,opt,name=ts,proto3" json:"ts,omitempty"`
	ToId   int32          `protobuf:"varint,5,opt,name=toId,proto3" json:"toId,omitempty"`
}

func (m *ChatMessageNtf) Reset()                    { *m = ChatMessageNtf{} }
func (m *ChatMessageNtf) String() string            { return proto.CompactTextString(m) }
func (*ChatMessageNtf) ProtoMessage()               {}
func (*ChatMessageNtf) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{0} }

func (m *ChatMessageNtf) GetSender() *BriefUserInfo {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *ChatMessageNtf) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChatMessageNtf) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ChatMessageNtf) GetTs() int32 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ChatMessageNtf) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

// 最近的聊天列表信息
type ChatMessageListReq struct {
}

func (m *ChatMessageListReq) Reset()                    { *m = ChatMessageListReq{} }
func (m *ChatMessageListReq) String() string            { return proto.CompactTextString(m) }
func (*ChatMessageListReq) ProtoMessage()               {}
func (*ChatMessageListReq) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{1} }

type ChatMessageListAck struct {
	Msgs []*ChatMessageNtf `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *ChatMessageListAck) Reset()                    { *m = ChatMessageListAck{} }
func (m *ChatMessageListAck) String() string            { return proto.CompactTextString(m) }
func (*ChatMessageListAck) ProtoMessage()               {}
func (*ChatMessageListAck) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{2} }

func (m *ChatMessageListAck) GetMsgs() []*ChatMessageNtf {
	if m != nil {
		return m.Msgs
	}
	return nil
}

// 请求发送聊天信息
type ChatSendReq struct {
	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	ToId int32  `protobuf:"varint,3,opt,name=toId,proto3" json:"toId,omitempty"`
}

func (m *ChatSendReq) Reset()                    { *m = ChatSendReq{} }
func (m *ChatSendReq) String() string            { return proto.CompactTextString(m) }
func (*ChatSendReq) ProtoMessage()               {}
func (*ChatSendReq) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{3} }

func (m *ChatSendReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChatSendReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ChatSendReq) GetToId() int32 {
	if m != nil {
		return m.ToId
	}
	return 0
}

type ChatSendAck struct {
	IsBanSpeak   bool  `protobuf:"varint,1,opt,name=isBanSpeak,proto3" json:"isBanSpeak,omitempty"`
	BanSpeakTime int32 `protobuf:"varint,2,opt,name=banSpeakTime,proto3" json:"banSpeakTime,omitempty"`
}

func (m *ChatSendAck) Reset()                    { *m = ChatSendAck{} }
func (m *ChatSendAck) String() string            { return proto.CompactTextString(m) }
func (*ChatSendAck) ProtoMessage()               {}
func (*ChatSendAck) Descriptor() ([]byte, []int) { return fileDescriptorChat, []int{4} }

func (m *ChatSendAck) GetIsBanSpeak() bool {
	if m != nil {
		return m.IsBanSpeak
	}
	return false
}

func (m *ChatSendAck) GetBanSpeakTime() int32 {
	if m != nil {
		return m.BanSpeakTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ChatMessageNtf)(nil), "pb.ChatMessageNtf")
	proto.RegisterType((*ChatMessageListReq)(nil), "pb.ChatMessageListReq")
	proto.RegisterType((*ChatMessageListAck)(nil), "pb.ChatMessageListAck")
	proto.RegisterType((*ChatSendReq)(nil), "pb.ChatSendReq")
	proto.RegisterType((*ChatSendAck)(nil), "pb.ChatSendAck")
}
func (m *ChatMessageNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMessageNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Type))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Ts))
	}
	if m.ToId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ToId))
	}
	return i, nil
}

func (m *ChatMessageListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMessageListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ChatMessageListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMessageListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, msg := range m.Msgs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChatSendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSendReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.Type))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChat(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.ToId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.ToId))
	}
	return i, nil
}

func (m *ChatSendAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatSendAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsBanSpeak {
		dAtA[i] = 0x8
		i++
		if m.IsBanSpeak {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BanSpeakTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChat(dAtA, i, uint64(m.BanSpeakTime))
	}
	return i, nil
}

func encodeVarintChat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChatMessageNtf) Size() (n int) {
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovChat(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovChat(uint64(m.Ts))
	}
	if m.ToId != 0 {
		n += 1 + sovChat(uint64(m.ToId))
	}
	return n
}

func (m *ChatMessageListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ChatMessageListAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Msgs) > 0 {
		for _, e := range m.Msgs {
			l = e.Size()
			n += 1 + l + sovChat(uint64(l))
		}
	}
	return n
}

func (m *ChatSendReq) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovChat(uint64(m.Type))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovChat(uint64(l))
	}
	if m.ToId != 0 {
		n += 1 + sovChat(uint64(m.ToId))
	}
	return n
}

func (m *ChatSendAck) Size() (n int) {
	var l int
	_ = l
	if m.IsBanSpeak {
		n += 2
	}
	if m.BanSpeakTime != 0 {
		n += 1 + sovChat(uint64(m.BanSpeakTime))
	}
	return n
}

func sovChat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChat(x uint64) (n int) {
	return sovChat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatMessageNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessageNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessageNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &BriefUserInfo{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMessageListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessageListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessageListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatMessageListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessageListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessageListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msgs = append(m.Msgs, &ChatMessageNtf{})
			if err := m.Msgs[len(m.Msgs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatSendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToId", wireType)
			}
			m.ToId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatSendAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatSendAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatSendAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanSpeak", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBanSpeak = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanSpeakTime", wireType)
			}
			m.BanSpeakTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BanSpeakTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("chat.proto", fileDescriptorChat) }

var fileDescriptorChat = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4e, 0xeb, 0x30,
	0x10, 0x87, 0x9f, 0x93, 0xb4, 0x7a, 0x4c, 0xaa, 0xaa, 0x58, 0x2c, 0x2c, 0x16, 0x51, 0x94, 0x05,
	0x0a, 0x9b, 0x2c, 0xca, 0x96, 0x0d, 0x61, 0x81, 0x22, 0x01, 0x12, 0x2e, 0x1c, 0x20, 0x7f, 0x9c,
	0x34, 0xaa, 0x12, 0xa7, 0x19, 0x6f, 0x38, 0x00, 0x77, 0xe0, 0x48, 0x2c, 0x39, 0x02, 0x0a, 0x17,
	0x41, 0x31, 0x29, 0x4d, 0xd5, 0xdd, 0x4f, 0x9f, 0x67, 0xc6, 0x9f, 0x3d, 0x00, 0xe9, 0x3a, 0x56,
	0x41, 0xd3, 0x4a, 0x25, 0xa9, 0xd1, 0x24, 0xe7, 0xb3, 0x54, 0x56, 0x95, 0xac, 0x7f, 0x89, 0xf7,
	0x46, 0x60, 0x7e, 0xbb, 0x8e, 0xd5, 0x83, 0x40, 0x8c, 0x0b, 0xf1, 0xa8, 0x72, 0x7a, 0x09, 0x53,
	0x14, 0x75, 0x26, 0x5a, 0x46, 0x5c, 0xe2, 0xdb, 0xcb, 0xd3, 0xa0, 0x49, 0x82, 0xb0, 0x2d, 0x45,
	0xfe, 0x82, 0xa2, 0x8d, 0xea, 0x5c, 0xf2, 0xa1, 0x80, 0x52, 0xb0, 0xd4, 0x6b, 0x23, 0x98, 0xe1,
	0x12, 0x7f, 0xc2, 0x75, 0xa6, 0x0b, 0x30, 0x2b, 0x2c, 0x98, 0xe9, 0x12, 0xff, 0x84, 0xf7, 0x91,
	0xce, 0xc1, 0x50, 0xc8, 0x2c, 0x5d, 0x63, 0x28, 0xd4, 0x5d, 0x32, 0xca, 0xd8, 0x64, 0xe8, 0x92,
	0x51, 0xe6, 0x9d, 0x01, 0x1d, 0x69, 0xdc, 0x97, 0xa8, 0xb8, 0xd8, 0x7a, 0xd7, 0x47, 0xf4, 0x26,
	0xdd, 0xd0, 0x0b, 0xb0, 0x2a, 0x2c, 0x90, 0x11, 0xd7, 0xf4, 0xed, 0x25, 0xed, 0xf5, 0x0e, 0x9f,
	0xc0, 0xf5, 0xb9, 0x77, 0x07, 0x76, 0xcf, 0x57, 0xa2, 0xce, 0xb8, 0xd8, 0xfe, 0xc9, 0x92, 0x63,
	0x59, 0x63, 0x2f, 0xbb, 0x93, 0x33, 0x47, 0x72, 0x4f, 0xfb, 0x41, 0xfd, 0xfd, 0x0e, 0x40, 0x89,
	0x61, 0x5c, 0xaf, 0x1a, 0x11, 0x6f, 0xf4, 0xb8, 0xff, 0x7c, 0x44, 0xa8, 0x07, 0xb3, 0x64, 0xc8,
	0xcf, 0x65, 0xb5, 0xfb, 0x9d, 0x03, 0x16, 0x2e, 0x3e, 0x3a, 0x87, 0x7c, 0x76, 0x0e, 0xf9, 0xea,
	0x1c, 0xf2, 0xfe, 0xed, 0xfc, 0x4b, 0xa6, 0x7a, 0x21, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xbf, 0xb3, 0xc2, 0xd2, 0xb0, 0x01, 0x00, 0x00,
}
