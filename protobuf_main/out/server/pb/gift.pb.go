// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gift.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OpenGiftReq struct {
	Type         int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	ItemId       int32 `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ChooseItemId int32 `protobuf:"varint,3,opt,name=chooseItemId,proto3" json:"chooseItemId,omitempty"`
}

func (m *OpenGiftReq) Reset()                    { *m = OpenGiftReq{} }
func (m *OpenGiftReq) String() string            { return proto.CompactTextString(m) }
func (*OpenGiftReq) ProtoMessage()               {}
func (*OpenGiftReq) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{0} }

func (m *OpenGiftReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OpenGiftReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *OpenGiftReq) GetChooseItemId() int32 {
	if m != nil {
		return m.ChooseItemId
	}
	return 0
}

type OpenGiftAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *OpenGiftAck) Reset()                    { *m = OpenGiftAck{} }
func (m *OpenGiftAck) String() string            { return proto.CompactTextString(m) }
func (*OpenGiftAck) ProtoMessage()               {}
func (*OpenGiftAck) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{1} }

func (m *OpenGiftAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 礼包码领取
type GiftCodeRewardReq struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *GiftCodeRewardReq) Reset()                    { *m = GiftCodeRewardReq{} }
func (m *GiftCodeRewardReq) String() string            { return proto.CompactTextString(m) }
func (*GiftCodeRewardReq) ProtoMessage()               {}
func (*GiftCodeRewardReq) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{2} }

func (m *GiftCodeRewardReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type GiftCodeRewardAck struct {
	Code  string          `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Goods *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *GiftCodeRewardAck) Reset()                    { *m = GiftCodeRewardAck{} }
func (m *GiftCodeRewardAck) String() string            { return proto.CompactTextString(m) }
func (*GiftCodeRewardAck) ProtoMessage()               {}
func (*GiftCodeRewardAck) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{3} }

func (m *GiftCodeRewardAck) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GiftCodeRewardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 限时礼包推送
type LimitedGiftNtf struct {
	Type      int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Lv        int32 `protobuf:"varint,2,opt,name=lv,proto3" json:"lv,omitempty"`
	Grade     int32 `protobuf:"varint,3,opt,name=grade,proto3" json:"grade,omitempty"`
	StartTime int64 `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime   int64 `protobuf:"varint,5,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *LimitedGiftNtf) Reset()                    { *m = LimitedGiftNtf{} }
func (m *LimitedGiftNtf) String() string            { return proto.CompactTextString(m) }
func (*LimitedGiftNtf) ProtoMessage()               {}
func (*LimitedGiftNtf) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{4} }

func (m *LimitedGiftNtf) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *LimitedGiftNtf) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func (m *LimitedGiftNtf) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

func (m *LimitedGiftNtf) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *LimitedGiftNtf) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// 限时礼包购买
type LimitedGiftBuyReq struct {
}

func (m *LimitedGiftBuyReq) Reset()                    { *m = LimitedGiftBuyReq{} }
func (m *LimitedGiftBuyReq) String() string            { return proto.CompactTextString(m) }
func (*LimitedGiftBuyReq) ProtoMessage()               {}
func (*LimitedGiftBuyReq) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{5} }

type LimitedGiftBuyAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *LimitedGiftBuyAck) Reset()                    { *m = LimitedGiftBuyAck{} }
func (m *LimitedGiftBuyAck) String() string            { return proto.CompactTextString(m) }
func (*LimitedGiftBuyAck) ProtoMessage()               {}
func (*LimitedGiftBuyAck) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{6} }

func (m *LimitedGiftBuyAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 限时礼包获取
type LimitedGiftReq struct {
}

func (m *LimitedGiftReq) Reset()                    { *m = LimitedGiftReq{} }
func (m *LimitedGiftReq) String() string            { return proto.CompactTextString(m) }
func (*LimitedGiftReq) ProtoMessage()               {}
func (*LimitedGiftReq) Descriptor() ([]byte, []int) { return fileDescriptorGift, []int{7} }

func init() {
	proto.RegisterType((*OpenGiftReq)(nil), "pb.OpenGiftReq")
	proto.RegisterType((*OpenGiftAck)(nil), "pb.OpenGiftAck")
	proto.RegisterType((*GiftCodeRewardReq)(nil), "pb.GiftCodeRewardReq")
	proto.RegisterType((*GiftCodeRewardAck)(nil), "pb.GiftCodeRewardAck")
	proto.RegisterType((*LimitedGiftNtf)(nil), "pb.LimitedGiftNtf")
	proto.RegisterType((*LimitedGiftBuyReq)(nil), "pb.LimitedGiftBuyReq")
	proto.RegisterType((*LimitedGiftBuyAck)(nil), "pb.LimitedGiftBuyAck")
	proto.RegisterType((*LimitedGiftReq)(nil), "pb.LimitedGiftReq")
}
func (m *OpenGiftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenGiftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Type))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.ItemId))
	}
	if m.ChooseItemId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.ChooseItemId))
	}
	return i, nil
}

func (m *OpenGiftAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenGiftAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GiftCodeRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftCodeRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	return i, nil
}

func (m *GiftCodeRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftCodeRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LimitedGiftNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitedGiftNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Type))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Lv))
	}
	if m.Grade != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Grade))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func (m *LimitedGiftBuyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitedGiftBuyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LimitedGiftBuyAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitedGiftBuyAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGift(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *LimitedGiftReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitedGiftReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintGift(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OpenGiftReq) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGift(uint64(m.Type))
	}
	if m.ItemId != 0 {
		n += 1 + sovGift(uint64(m.ItemId))
	}
	if m.ChooseItemId != 0 {
		n += 1 + sovGift(uint64(m.ChooseItemId))
	}
	return n
}

func (m *OpenGiftAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovGift(uint64(l))
	}
	return n
}

func (m *GiftCodeRewardReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGift(uint64(l))
	}
	return n
}

func (m *GiftCodeRewardAck) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovGift(uint64(l))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovGift(uint64(l))
	}
	return n
}

func (m *LimitedGiftNtf) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovGift(uint64(m.Type))
	}
	if m.Lv != 0 {
		n += 1 + sovGift(uint64(m.Lv))
	}
	if m.Grade != 0 {
		n += 1 + sovGift(uint64(m.Grade))
	}
	if m.StartTime != 0 {
		n += 1 + sovGift(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovGift(uint64(m.EndTime))
	}
	return n
}

func (m *LimitedGiftBuyReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *LimitedGiftBuyAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovGift(uint64(l))
	}
	return n
}

func (m *LimitedGiftReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovGift(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGift(x uint64) (n int) {
	return sovGift(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OpenGiftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenGiftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenGiftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChooseItemId", wireType)
			}
			m.ChooseItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChooseItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenGiftAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenGiftAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenGiftAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftCodeRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftCodeRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftCodeRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftCodeRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftCodeRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftCodeRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitedGiftNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitedGiftNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitedGiftNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitedGiftBuyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitedGiftBuyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitedGiftBuyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitedGiftBuyAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitedGiftBuyAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitedGiftBuyAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGift
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGift
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LimitedGiftReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGift
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitedGiftReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitedGiftReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGift(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGift
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGift(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGift
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGift
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGift
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGift
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGift(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGift = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGift   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("gift.proto", fileDescriptorGift) }

var fileDescriptorGift = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0xdd, 0x42, 0x31, 0x0c, 0x84, 0xc0, 0x6a, 0x4c, 0x63, 0x4c, 0x43, 0xf6, 0x22, 0x27,
	0x0e, 0x7a, 0xf0, 0xe4, 0x41, 0x38, 0x10, 0x12, 0x83, 0x71, 0xe3, 0xd5, 0x43, 0xe9, 0x4e, 0xcb,
	0x46, 0xda, 0x2d, 0x65, 0xc5, 0x70, 0xf5, 0x29, 0x7c, 0x24, 0x8f, 0x3e, 0x82, 0xc1, 0x17, 0x31,
	0xdd, 0xd6, 0x54, 0x08, 0x89, 0xf1, 0x36, 0xf3, 0xfd, 0xd3, 0x99, 0xbf, 0x7f, 0x16, 0x20, 0x94,
	0x81, 0xee, 0x27, 0xa9, 0xd2, 0x8a, 0x5a, 0xc9, 0xf4, 0xb4, 0xe9, 0xab, 0x28, 0x52, 0x71, 0x4e,
	0xd8, 0x23, 0x34, 0xee, 0x12, 0x8c, 0x47, 0x32, 0xd0, 0x1c, 0x17, 0x94, 0x42, 0x55, 0xaf, 0x13,
	0x74, 0x48, 0x97, 0xf4, 0x6c, 0x6e, 0x6a, 0x7a, 0x02, 0x35, 0xa9, 0x31, 0x1a, 0x0b, 0xc7, 0x32,
	0xb4, 0xe8, 0x28, 0x83, 0xa6, 0x3f, 0x53, 0x6a, 0x89, 0xe3, 0x5c, 0xad, 0x18, 0x75, 0x8b, 0xb1,
	0xab, 0x72, 0xfd, 0x8d, 0xff, 0x44, 0x7b, 0x60, 0x87, 0x4a, 0x89, 0xa5, 0xd9, 0xdf, 0xb8, 0xa0,
	0xfd, 0x64, 0xda, 0x1f, 0x65, 0x60, 0x38, 0xf3, 0xe2, 0x10, 0x27, 0x3a, 0xe0, 0xf9, 0x00, 0x3b,
	0x87, 0x4e, 0xf6, 0xd1, 0x50, 0x09, 0xe4, 0xf8, 0xe2, 0xa5, 0xa2, 0x70, 0xe7, 0x2b, 0x91, 0xbb,
	0xab, 0x73, 0x53, 0xb3, 0xfb, 0xdd, 0xc1, 0xec, 0xce, 0x9e, 0xc1, 0xf2, 0xb6, 0xf5, 0xd7, 0xed,
	0x57, 0x02, 0xad, 0x5b, 0x19, 0x49, 0x8d, 0x22, 0x5b, 0x3d, 0xd1, 0xc1, 0xde, 0x5c, 0x5a, 0x60,
	0xcd, 0x57, 0x45, 0x26, 0xd6, 0x7c, 0x45, 0x8f, 0xc1, 0x0e, 0x53, 0x4f, 0x60, 0x11, 0x44, 0xde,
	0xd0, 0x33, 0xa8, 0x2f, 0xb5, 0x97, 0xea, 0x07, 0x19, 0xa1, 0x53, 0xed, 0x92, 0x5e, 0x85, 0x97,
	0x80, 0x3a, 0x70, 0x88, 0xb1, 0x30, 0x9a, 0x6d, 0xb4, 0x9f, 0x96, 0x1d, 0x41, 0xe7, 0x97, 0x87,
	0xc1, 0xf3, 0x9a, 0xe3, 0x82, 0x5d, 0xef, 0xc2, 0xff, 0x85, 0xda, 0xde, 0xfa, 0x2f, 0x8e, 0x8b,
	0x41, 0xfb, 0x7d, 0xe3, 0x92, 0x8f, 0x8d, 0x4b, 0x3e, 0x37, 0x2e, 0x79, 0xfb, 0x72, 0x0f, 0xa6,
	0x35, 0xf3, 0x2e, 0x2e, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xae, 0x39, 0x51, 0xed, 0x37, 0x02,
	0x00, 0x00,
}
