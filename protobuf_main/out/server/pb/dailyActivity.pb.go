// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dailyActivity.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入活动
type EnterDailyActivityReq struct {
	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	StageId    int32 `protobuf:"varint,2,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *EnterDailyActivityReq) Reset()         { *m = EnterDailyActivityReq{} }
func (m *EnterDailyActivityReq) String() string { return proto.CompactTextString(m) }
func (*EnterDailyActivityReq) ProtoMessage()    {}
func (*EnterDailyActivityReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyActivity, []int{0}
}

func (m *EnterDailyActivityReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *EnterDailyActivityReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 日常活动推送结果
type DailyActivityResultNtf struct {
	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (m *DailyActivityResultNtf) Reset()         { *m = DailyActivityResultNtf{} }
func (m *DailyActivityResultNtf) String() string { return proto.CompactTextString(m) }
func (*DailyActivityResultNtf) ProtoMessage()    {}
func (*DailyActivityResultNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyActivity, []int{1}
}

func (m *DailyActivityResultNtf) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

// 列表
type DailyActivityListReq struct {
}

func (m *DailyActivityListReq) Reset()         { *m = DailyActivityListReq{} }
func (m *DailyActivityListReq) String() string { return proto.CompactTextString(m) }
func (*DailyActivityListReq) ProtoMessage()    {}
func (*DailyActivityListReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyActivity, []int{2}
}

type DailyActivityListAck struct {
	List []*DailyActivityInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *DailyActivityListAck) Reset()         { *m = DailyActivityListAck{} }
func (m *DailyActivityListAck) String() string { return proto.CompactTextString(m) }
func (*DailyActivityListAck) ProtoMessage()    {}
func (*DailyActivityListAck) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyActivity, []int{3}
}

func (m *DailyActivityListAck) GetList() []*DailyActivityInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type DailyActivityInfo struct {
	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	StartTime  int64 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime    int64 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (m *DailyActivityInfo) Reset()                    { *m = DailyActivityInfo{} }
func (m *DailyActivityInfo) String() string            { return proto.CompactTextString(m) }
func (*DailyActivityInfo) ProtoMessage()               {}
func (*DailyActivityInfo) Descriptor() ([]byte, []int) { return fileDescriptorDailyActivity, []int{4} }

func (m *DailyActivityInfo) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *DailyActivityInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *DailyActivityInfo) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*EnterDailyActivityReq)(nil), "pb.EnterDailyActivityReq")
	proto.RegisterType((*DailyActivityResultNtf)(nil), "pb.DailyActivityResultNtf")
	proto.RegisterType((*DailyActivityListReq)(nil), "pb.DailyActivityListReq")
	proto.RegisterType((*DailyActivityListAck)(nil), "pb.DailyActivityListAck")
	proto.RegisterType((*DailyActivityInfo)(nil), "pb.DailyActivityInfo")
}
func (m *EnterDailyActivityReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterDailyActivityReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyActivity(dAtA, i, uint64(m.ActivityId))
	}
	if m.StageId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyActivity(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *DailyActivityResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyActivityResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyActivity(dAtA, i, uint64(m.ActivityId))
	}
	return i, nil
}

func (m *DailyActivityListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyActivityListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DailyActivityListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyActivityListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDailyActivity(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DailyActivityInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyActivityInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyActivity(dAtA, i, uint64(m.ActivityId))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyActivity(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyActivity(dAtA, i, uint64(m.EndTime))
	}
	return i, nil
}

func encodeVarintDailyActivity(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EnterDailyActivityReq) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyActivity(uint64(m.ActivityId))
	}
	if m.StageId != 0 {
		n += 1 + sovDailyActivity(uint64(m.StageId))
	}
	return n
}

func (m *DailyActivityResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyActivity(uint64(m.ActivityId))
	}
	return n
}

func (m *DailyActivityListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DailyActivityListAck) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDailyActivity(uint64(l))
		}
	}
	return n
}

func (m *DailyActivityInfo) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyActivity(uint64(m.ActivityId))
	}
	if m.StartTime != 0 {
		n += 1 + sovDailyActivity(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovDailyActivity(uint64(m.EndTime))
	}
	return n
}

func sovDailyActivity(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDailyActivity(x uint64) (n int) {
	return sovDailyActivity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnterDailyActivityReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterDailyActivityReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterDailyActivityReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyActivityResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyActivityResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyActivityResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyActivityListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyActivityListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyActivityListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDailyActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyActivityListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyActivityListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyActivityListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyActivity
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &DailyActivityInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDailyActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyActivityInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyActivity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyActivityInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyActivityInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyActivity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyActivity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDailyActivity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDailyActivity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyActivity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDailyActivity
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDailyActivity
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDailyActivity(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDailyActivity = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDailyActivity   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dailyActivity.proto", fileDescriptorDailyActivity) }

var fileDescriptorDailyActivity = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x49, 0xcc, 0xcc,
	0xa9, 0x74, 0x4c, 0x2e, 0xc9, 0x2c, 0xcb, 0x2c, 0xa9, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2a, 0x48, 0x52, 0x0a, 0xe4, 0x12, 0x75, 0xcd, 0x2b, 0x49, 0x2d, 0x72, 0x41, 0x96, 0x0f,
	0x4a, 0x2d, 0x14, 0x92, 0xe3, 0xe2, 0x4a, 0x84, 0x72, 0x3d, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x83, 0x90, 0x44, 0x84, 0x24, 0xb8, 0xd8, 0x8b, 0x4b, 0x12, 0xd3, 0x53, 0x3d, 0x53, 0x24,
	0x98, 0xc0, 0x92, 0x30, 0xae, 0x92, 0x05, 0x97, 0x18, 0x9a, 0x69, 0xc5, 0xa5, 0x39, 0x25, 0x7e,
	0x25, 0x69, 0x84, 0xcc, 0x54, 0x12, 0xe3, 0x12, 0x41, 0xd1, 0xe9, 0x93, 0x59, 0x5c, 0x12, 0x94,
	0x5a, 0xa8, 0xe4, 0x88, 0x45, 0xdc, 0x31, 0x39, 0x5b, 0x48, 0x93, 0x8b, 0x25, 0x27, 0xb3, 0xb8,
	0x44, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0x48, 0x54, 0xaf, 0x20, 0x49, 0x0f, 0x45, 0x9d, 0x67,
	0x5e, 0x5a, 0x7e, 0x10, 0x58, 0x89, 0x52, 0x36, 0x97, 0x20, 0x86, 0x14, 0x41, 0x3f, 0xca, 0x70,
	0x71, 0x16, 0x97, 0x24, 0x16, 0x95, 0x84, 0x64, 0xe6, 0xa6, 0x82, 0x7d, 0xc9, 0x1c, 0x84, 0x10,
	0x00, 0x85, 0x40, 0x6a, 0x5e, 0x0a, 0x58, 0x8e, 0x19, 0x2c, 0x07, 0xe3, 0x3a, 0x09, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24,
	0xb1, 0x81, 0x43, 0xdc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x4c, 0x32, 0x15, 0x88, 0x01,
	0x00, 0x00,
}
