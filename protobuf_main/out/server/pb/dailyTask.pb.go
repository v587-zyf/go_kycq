// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dailyTask.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DailyTaskLoadReq struct {
}

func (m *DailyTaskLoadReq) Reset()                    { *m = DailyTaskLoadReq{} }
func (m *DailyTaskLoadReq) String() string            { return proto.CompactTextString(m) }
func (*DailyTaskLoadReq) ProtoMessage()               {}
func (*DailyTaskLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{0} }

type DailyTaskLoadAck struct {
	DayExp              int32                `protobuf:"varint,1,opt,name=dayExp,proto3" json:"dayExp,omitempty"`
	WeekExp             int32                `protobuf:"varint,2,opt,name=weekExp,proto3" json:"weekExp,omitempty"`
	DayResourcesBackExp int32                `protobuf:"varint,3,opt,name=dayResourcesBackExp,proto3" json:"dayResourcesBackExp,omitempty"`
	HaveChallengeTimes  []*HaveChallengeTime `protobuf:"bytes,4,rep,name=haveChallengeTimes" json:"haveChallengeTimes,omitempty"`
	ResourcesBackInfos  []*ResourcesBackInfo `protobuf:"bytes,5,rep,name=ResourcesBackInfos" json:"ResourcesBackInfos,omitempty"`
	GetDayRewardIds     []int32              `protobuf:"varint,6,rep,packed,name=GetDayRewardIds" json:"GetDayRewardIds,omitempty"`
	GetWeekRewardIds    []int32              `protobuf:"varint,7,rep,packed,name=GetWeekRewardIds" json:"GetWeekRewardIds,omitempty"`
}

func (m *DailyTaskLoadAck) Reset()                    { *m = DailyTaskLoadAck{} }
func (m *DailyTaskLoadAck) String() string            { return proto.CompactTextString(m) }
func (*DailyTaskLoadAck) ProtoMessage()               {}
func (*DailyTaskLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{1} }

func (m *DailyTaskLoadAck) GetDayExp() int32 {
	if m != nil {
		return m.DayExp
	}
	return 0
}

func (m *DailyTaskLoadAck) GetWeekExp() int32 {
	if m != nil {
		return m.WeekExp
	}
	return 0
}

func (m *DailyTaskLoadAck) GetDayResourcesBackExp() int32 {
	if m != nil {
		return m.DayResourcesBackExp
	}
	return 0
}

func (m *DailyTaskLoadAck) GetHaveChallengeTimes() []*HaveChallengeTime {
	if m != nil {
		return m.HaveChallengeTimes
	}
	return nil
}

func (m *DailyTaskLoadAck) GetResourcesBackInfos() []*ResourcesBackInfo {
	if m != nil {
		return m.ResourcesBackInfos
	}
	return nil
}

func (m *DailyTaskLoadAck) GetGetDayRewardIds() []int32 {
	if m != nil {
		return m.GetDayRewardIds
	}
	return nil
}

func (m *DailyTaskLoadAck) GetGetWeekRewardIds() []int32 {
	if m != nil {
		return m.GetWeekRewardIds
	}
	return nil
}

type BuyChallengeTimeReq struct {
	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (m *BuyChallengeTimeReq) Reset()                    { *m = BuyChallengeTimeReq{} }
func (m *BuyChallengeTimeReq) String() string            { return proto.CompactTextString(m) }
func (*BuyChallengeTimeReq) ProtoMessage()               {}
func (*BuyChallengeTimeReq) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{2} }

func (m *BuyChallengeTimeReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type BuyChallengeTimeAck struct {
	ActivityId        int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	HaveChallengeTime int32 `protobuf:"varint,2,opt,name=haveChallengeTime,proto3" json:"haveChallengeTime,omitempty"`
	BuyChallengTimes  int32 `protobuf:"varint,3,opt,name=buyChallengTimes,proto3" json:"buyChallengTimes,omitempty"`
}

func (m *BuyChallengeTimeAck) Reset()                    { *m = BuyChallengeTimeAck{} }
func (m *BuyChallengeTimeAck) String() string            { return proto.CompactTextString(m) }
func (*BuyChallengeTimeAck) ProtoMessage()               {}
func (*BuyChallengeTimeAck) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{3} }

func (m *BuyChallengeTimeAck) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *BuyChallengeTimeAck) GetHaveChallengeTime() int32 {
	if m != nil {
		return m.HaveChallengeTime
	}
	return 0
}

func (m *BuyChallengeTimeAck) GetBuyChallengTimes() int32 {
	if m != nil {
		return m.BuyChallengTimes
	}
	return 0
}

type GetExpReq struct {
	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (m *GetExpReq) Reset()                    { *m = GetExpReq{} }
func (m *GetExpReq) String() string            { return proto.CompactTextString(m) }
func (*GetExpReq) ProtoMessage()               {}
func (*GetExpReq) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{4} }

func (m *GetExpReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type GetExpAck struct {
	DayExp              int32 `protobuf:"varint,1,opt,name=dayExp,proto3" json:"dayExp,omitempty"`
	WeekExp             int32 `protobuf:"varint,2,opt,name=weekExp,proto3" json:"weekExp,omitempty"`
	DayResourcesBackExp int32 `protobuf:"varint,3,opt,name=dayResourcesBackExp,proto3" json:"dayResourcesBackExp,omitempty"`
	IsCanGetAward       int32 `protobuf:"varint,4,opt,name=isCanGetAward,proto3" json:"isCanGetAward,omitempty"`
	ActivityId          int32 `protobuf:"varint,5,opt,name=activityId,proto3" json:"activityId,omitempty"`
}

func (m *GetExpAck) Reset()                    { *m = GetExpAck{} }
func (m *GetExpAck) String() string            { return proto.CompactTextString(m) }
func (*GetExpAck) ProtoMessage()               {}
func (*GetExpAck) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{5} }

func (m *GetExpAck) GetDayExp() int32 {
	if m != nil {
		return m.DayExp
	}
	return 0
}

func (m *GetExpAck) GetWeekExp() int32 {
	if m != nil {
		return m.WeekExp
	}
	return 0
}

func (m *GetExpAck) GetDayResourcesBackExp() int32 {
	if m != nil {
		return m.DayResourcesBackExp
	}
	return 0
}

func (m *GetExpAck) GetIsCanGetAward() int32 {
	if m != nil {
		return m.IsCanGetAward
	}
	return 0
}

func (m *GetExpAck) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

type GetAwardReq struct {
	Id   int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *GetAwardReq) Reset()                    { *m = GetAwardReq{} }
func (m *GetAwardReq) String() string            { return proto.CompactTextString(m) }
func (*GetAwardReq) ProtoMessage()               {}
func (*GetAwardReq) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{6} }

func (m *GetAwardReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetAwardReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type GetAwardAck struct {
	GetDayRewardIds  []int32 `protobuf:"varint,6,rep,packed,name=GetDayRewardIds" json:"GetDayRewardIds,omitempty"`
	GetWeekRewardIds []int32 `protobuf:"varint,7,rep,packed,name=GetWeekRewardIds" json:"GetWeekRewardIds,omitempty"`
}

func (m *GetAwardAck) Reset()                    { *m = GetAwardAck{} }
func (m *GetAwardAck) String() string            { return proto.CompactTextString(m) }
func (*GetAwardAck) ProtoMessage()               {}
func (*GetAwardAck) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{7} }

func (m *GetAwardAck) GetGetDayRewardIds() []int32 {
	if m != nil {
		return m.GetDayRewardIds
	}
	return nil
}

func (m *GetAwardAck) GetGetWeekRewardIds() []int32 {
	if m != nil {
		return m.GetWeekRewardIds
	}
	return nil
}

type ResourcesBackGetRewardReq struct {
	ActivityId int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	BackTimes  int32 `protobuf:"varint,2,opt,name=backTimes,proto3" json:"backTimes,omitempty"`
}

func (m *ResourcesBackGetRewardReq) Reset()         { *m = ResourcesBackGetRewardReq{} }
func (m *ResourcesBackGetRewardReq) String() string { return proto.CompactTextString(m) }
func (*ResourcesBackGetRewardReq) ProtoMessage()    {}
func (*ResourcesBackGetRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyTask, []int{8}
}

func (m *ResourcesBackGetRewardReq) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ResourcesBackGetRewardReq) GetBackTimes() int32 {
	if m != nil {
		return m.BackTimes
	}
	return 0
}

type ResourcesBackGetRewardAck struct {
	ResourcesBackInfos  []*ResourcesBackInfo `protobuf:"bytes,1,rep,name=ResourcesBackInfos" json:"ResourcesBackInfos,omitempty"`
	DayResourcesBackExp int32                `protobuf:"varint,2,opt,name=dayResourcesBackExp,proto3" json:"dayResourcesBackExp,omitempty"`
}

func (m *ResourcesBackGetRewardAck) Reset()         { *m = ResourcesBackGetRewardAck{} }
func (m *ResourcesBackGetRewardAck) String() string { return proto.CompactTextString(m) }
func (*ResourcesBackGetRewardAck) ProtoMessage()    {}
func (*ResourcesBackGetRewardAck) Descriptor() ([]byte, []int) {
	return fileDescriptorDailyTask, []int{9}
}

func (m *ResourcesBackGetRewardAck) GetResourcesBackInfos() []*ResourcesBackInfo {
	if m != nil {
		return m.ResourcesBackInfos
	}
	return nil
}

func (m *ResourcesBackGetRewardAck) GetDayResourcesBackExp() int32 {
	if m != nil {
		return m.DayResourcesBackExp
	}
	return 0
}

type HaveChallengeTime struct {
	ActivityId        int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	HaveChallengeTime int32 `protobuf:"varint,2,opt,name=haveChallengeTime,proto3" json:"haveChallengeTime,omitempty"`
	IsGetAward        int32 `protobuf:"varint,3,opt,name=isGetAward,proto3" json:"isGetAward,omitempty"`
	BuyChallengTimes  int32 `protobuf:"varint,4,opt,name=buyChallengTimes,proto3" json:"buyChallengTimes,omitempty"`
}

func (m *HaveChallengeTime) Reset()                    { *m = HaveChallengeTime{} }
func (m *HaveChallengeTime) String() string            { return proto.CompactTextString(m) }
func (*HaveChallengeTime) ProtoMessage()               {}
func (*HaveChallengeTime) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{10} }

func (m *HaveChallengeTime) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *HaveChallengeTime) GetHaveChallengeTime() int32 {
	if m != nil {
		return m.HaveChallengeTime
	}
	return 0
}

func (m *HaveChallengeTime) GetIsGetAward() int32 {
	if m != nil {
		return m.IsGetAward
	}
	return 0
}

func (m *HaveChallengeTime) GetBuyChallengTimes() int32 {
	if m != nil {
		return m.BuyChallengTimes
	}
	return 0
}

type ResourcesBackInfo struct {
	ActivityId            int32 `protobuf:"varint,1,opt,name=activityId,proto3" json:"activityId,omitempty"`
	ResidueChallengeTimes int32 `protobuf:"varint,2,opt,name=residueChallengeTimes,proto3" json:"residueChallengeTimes,omitempty"`
	HaveChallengeTimes    int32 `protobuf:"varint,3,opt,name=haveChallengeTimes,proto3" json:"haveChallengeTimes,omitempty"`
}

func (m *ResourcesBackInfo) Reset()                    { *m = ResourcesBackInfo{} }
func (m *ResourcesBackInfo) String() string            { return proto.CompactTextString(m) }
func (*ResourcesBackInfo) ProtoMessage()               {}
func (*ResourcesBackInfo) Descriptor() ([]byte, []int) { return fileDescriptorDailyTask, []int{11} }

func (m *ResourcesBackInfo) GetActivityId() int32 {
	if m != nil {
		return m.ActivityId
	}
	return 0
}

func (m *ResourcesBackInfo) GetResidueChallengeTimes() int32 {
	if m != nil {
		return m.ResidueChallengeTimes
	}
	return 0
}

func (m *ResourcesBackInfo) GetHaveChallengeTimes() int32 {
	if m != nil {
		return m.HaveChallengeTimes
	}
	return 0
}

func init() {
	proto.RegisterType((*DailyTaskLoadReq)(nil), "pb.DailyTaskLoadReq")
	proto.RegisterType((*DailyTaskLoadAck)(nil), "pb.DailyTaskLoadAck")
	proto.RegisterType((*BuyChallengeTimeReq)(nil), "pb.BuyChallengeTimeReq")
	proto.RegisterType((*BuyChallengeTimeAck)(nil), "pb.BuyChallengeTimeAck")
	proto.RegisterType((*GetExpReq)(nil), "pb.GetExpReq")
	proto.RegisterType((*GetExpAck)(nil), "pb.GetExpAck")
	proto.RegisterType((*GetAwardReq)(nil), "pb.GetAwardReq")
	proto.RegisterType((*GetAwardAck)(nil), "pb.GetAwardAck")
	proto.RegisterType((*ResourcesBackGetRewardReq)(nil), "pb.ResourcesBackGetRewardReq")
	proto.RegisterType((*ResourcesBackGetRewardAck)(nil), "pb.ResourcesBackGetRewardAck")
	proto.RegisterType((*HaveChallengeTime)(nil), "pb.HaveChallengeTime")
	proto.RegisterType((*ResourcesBackInfo)(nil), "pb.ResourcesBackInfo")
}
func (m *DailyTaskLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTaskLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DailyTaskLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DailyTaskLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayExp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.DayExp))
	}
	if m.WeekExp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.WeekExp))
	}
	if m.DayResourcesBackExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.DayResourcesBackExp))
	}
	if len(m.HaveChallengeTimes) > 0 {
		for _, msg := range m.HaveChallengeTimes {
			dAtA[i] = 0x22
			i++
			i = encodeVarintDailyTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ResourcesBackInfos) > 0 {
		for _, msg := range m.ResourcesBackInfos {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintDailyTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GetDayRewardIds) > 0 {
		dAtA2 := make([]byte, len(m.GetDayRewardIds)*10)
		var j1 int
		for _, num1 := range m.GetDayRewardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.GetWeekRewardIds) > 0 {
		dAtA4 := make([]byte, len(m.GetWeekRewardIds)*10)
		var j3 int
		for _, num1 := range m.GetWeekRewardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *BuyChallengeTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyChallengeTimeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	return i, nil
}

func (m *BuyChallengeTimeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyChallengeTimeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	if m.HaveChallengeTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.HaveChallengeTime))
	}
	if m.BuyChallengTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.BuyChallengTimes))
	}
	return i, nil
}

func (m *GetExpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	return i, nil
}

func (m *GetExpAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetExpAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DayExp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.DayExp))
	}
	if m.WeekExp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.WeekExp))
	}
	if m.DayResourcesBackExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.DayResourcesBackExp))
	}
	if m.IsCanGetAward != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.IsCanGetAward))
	}
	if m.ActivityId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	return i, nil
}

func (m *GetAwardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAwardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *GetAwardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAwardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GetDayRewardIds) > 0 {
		dAtA6 := make([]byte, len(m.GetDayRewardIds)*10)
		var j5 int
		for _, num1 := range m.GetDayRewardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.GetWeekRewardIds) > 0 {
		dAtA8 := make([]byte, len(m.GetWeekRewardIds)*10)
		var j7 int
		for _, num1 := range m.GetWeekRewardIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func (m *ResourcesBackGetRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesBackGetRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	if m.BackTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.BackTimes))
	}
	return i, nil
}

func (m *ResourcesBackGetRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesBackGetRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ResourcesBackInfos) > 0 {
		for _, msg := range m.ResourcesBackInfos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDailyTask(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DayResourcesBackExp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.DayResourcesBackExp))
	}
	return i, nil
}

func (m *HaveChallengeTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HaveChallengeTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	if m.HaveChallengeTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.HaveChallengeTime))
	}
	if m.IsGetAward != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.IsGetAward))
	}
	if m.BuyChallengTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.BuyChallengTimes))
	}
	return i, nil
}

func (m *ResourcesBackInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourcesBackInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ActivityId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ActivityId))
	}
	if m.ResidueChallengeTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.ResidueChallengeTimes))
	}
	if m.HaveChallengeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDailyTask(dAtA, i, uint64(m.HaveChallengeTimes))
	}
	return i, nil
}

func encodeVarintDailyTask(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DailyTaskLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DailyTaskLoadAck) Size() (n int) {
	var l int
	_ = l
	if m.DayExp != 0 {
		n += 1 + sovDailyTask(uint64(m.DayExp))
	}
	if m.WeekExp != 0 {
		n += 1 + sovDailyTask(uint64(m.WeekExp))
	}
	if m.DayResourcesBackExp != 0 {
		n += 1 + sovDailyTask(uint64(m.DayResourcesBackExp))
	}
	if len(m.HaveChallengeTimes) > 0 {
		for _, e := range m.HaveChallengeTimes {
			l = e.Size()
			n += 1 + l + sovDailyTask(uint64(l))
		}
	}
	if len(m.ResourcesBackInfos) > 0 {
		for _, e := range m.ResourcesBackInfos {
			l = e.Size()
			n += 1 + l + sovDailyTask(uint64(l))
		}
	}
	if len(m.GetDayRewardIds) > 0 {
		l = 0
		for _, e := range m.GetDayRewardIds {
			l += sovDailyTask(uint64(e))
		}
		n += 1 + sovDailyTask(uint64(l)) + l
	}
	if len(m.GetWeekRewardIds) > 0 {
		l = 0
		for _, e := range m.GetWeekRewardIds {
			l += sovDailyTask(uint64(e))
		}
		n += 1 + sovDailyTask(uint64(l)) + l
	}
	return n
}

func (m *BuyChallengeTimeReq) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	return n
}

func (m *BuyChallengeTimeAck) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	if m.HaveChallengeTime != 0 {
		n += 1 + sovDailyTask(uint64(m.HaveChallengeTime))
	}
	if m.BuyChallengTimes != 0 {
		n += 1 + sovDailyTask(uint64(m.BuyChallengTimes))
	}
	return n
}

func (m *GetExpReq) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	return n
}

func (m *GetExpAck) Size() (n int) {
	var l int
	_ = l
	if m.DayExp != 0 {
		n += 1 + sovDailyTask(uint64(m.DayExp))
	}
	if m.WeekExp != 0 {
		n += 1 + sovDailyTask(uint64(m.WeekExp))
	}
	if m.DayResourcesBackExp != 0 {
		n += 1 + sovDailyTask(uint64(m.DayResourcesBackExp))
	}
	if m.IsCanGetAward != 0 {
		n += 1 + sovDailyTask(uint64(m.IsCanGetAward))
	}
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	return n
}

func (m *GetAwardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovDailyTask(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovDailyTask(uint64(m.Type))
	}
	return n
}

func (m *GetAwardAck) Size() (n int) {
	var l int
	_ = l
	if len(m.GetDayRewardIds) > 0 {
		l = 0
		for _, e := range m.GetDayRewardIds {
			l += sovDailyTask(uint64(e))
		}
		n += 1 + sovDailyTask(uint64(l)) + l
	}
	if len(m.GetWeekRewardIds) > 0 {
		l = 0
		for _, e := range m.GetWeekRewardIds {
			l += sovDailyTask(uint64(e))
		}
		n += 1 + sovDailyTask(uint64(l)) + l
	}
	return n
}

func (m *ResourcesBackGetRewardReq) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	if m.BackTimes != 0 {
		n += 1 + sovDailyTask(uint64(m.BackTimes))
	}
	return n
}

func (m *ResourcesBackGetRewardAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ResourcesBackInfos) > 0 {
		for _, e := range m.ResourcesBackInfos {
			l = e.Size()
			n += 1 + l + sovDailyTask(uint64(l))
		}
	}
	if m.DayResourcesBackExp != 0 {
		n += 1 + sovDailyTask(uint64(m.DayResourcesBackExp))
	}
	return n
}

func (m *HaveChallengeTime) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	if m.HaveChallengeTime != 0 {
		n += 1 + sovDailyTask(uint64(m.HaveChallengeTime))
	}
	if m.IsGetAward != 0 {
		n += 1 + sovDailyTask(uint64(m.IsGetAward))
	}
	if m.BuyChallengTimes != 0 {
		n += 1 + sovDailyTask(uint64(m.BuyChallengTimes))
	}
	return n
}

func (m *ResourcesBackInfo) Size() (n int) {
	var l int
	_ = l
	if m.ActivityId != 0 {
		n += 1 + sovDailyTask(uint64(m.ActivityId))
	}
	if m.ResidueChallengeTimes != 0 {
		n += 1 + sovDailyTask(uint64(m.ResidueChallengeTimes))
	}
	if m.HaveChallengeTimes != 0 {
		n += 1 + sovDailyTask(uint64(m.HaveChallengeTimes))
	}
	return n
}

func sovDailyTask(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDailyTask(x uint64) (n int) {
	return sovDailyTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DailyTaskLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTaskLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTaskLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DailyTaskLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyTaskLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyTaskLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayExp", wireType)
			}
			m.DayExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekExp", wireType)
			}
			m.WeekExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayResourcesBackExp", wireType)
			}
			m.DayResourcesBackExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayResourcesBackExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveChallengeTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HaveChallengeTimes = append(m.HaveChallengeTimes, &HaveChallengeTime{})
			if err := m.HaveChallengeTimes[len(m.HaveChallengeTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesBackInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesBackInfos = append(m.ResourcesBackInfos, &ResourcesBackInfo{})
			if err := m.ResourcesBackInfos[len(m.ResourcesBackInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GetDayRewardIds = append(m.GetDayRewardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDailyTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GetDayRewardIds = append(m.GetDayRewardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDayRewardIds", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GetWeekRewardIds = append(m.GetWeekRewardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDailyTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GetWeekRewardIds = append(m.GetWeekRewardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GetWeekRewardIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyChallengeTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyChallengeTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyChallengeTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyChallengeTimeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyChallengeTimeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyChallengeTimeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveChallengeTime", wireType)
			}
			m.HaveChallengeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveChallengeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyChallengTimes", wireType)
			}
			m.BuyChallengTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyChallengTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetExpAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetExpAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetExpAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayExp", wireType)
			}
			m.DayExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekExp", wireType)
			}
			m.WeekExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeekExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayResourcesBackExp", wireType)
			}
			m.DayResourcesBackExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayResourcesBackExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCanGetAward", wireType)
			}
			m.IsCanGetAward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCanGetAward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAwardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAwardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAwardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAwardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAwardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAwardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GetDayRewardIds = append(m.GetDayRewardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDailyTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GetDayRewardIds = append(m.GetDayRewardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GetDayRewardIds", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GetWeekRewardIds = append(m.GetWeekRewardIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDailyTask
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDailyTask
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GetWeekRewardIds = append(m.GetWeekRewardIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GetWeekRewardIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourcesBackGetRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesBackGetRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesBackGetRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackTimes", wireType)
			}
			m.BackTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourcesBackGetRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesBackGetRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesBackGetRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesBackInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDailyTask
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourcesBackInfos = append(m.ResourcesBackInfos, &ResourcesBackInfo{})
			if err := m.ResourcesBackInfos[len(m.ResourcesBackInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DayResourcesBackExp", wireType)
			}
			m.DayResourcesBackExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DayResourcesBackExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HaveChallengeTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HaveChallengeTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HaveChallengeTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveChallengeTime", wireType)
			}
			m.HaveChallengeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveChallengeTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGetAward", wireType)
			}
			m.IsGetAward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGetAward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyChallengTimes", wireType)
			}
			m.BuyChallengTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyChallengTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourcesBackInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourcesBackInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourcesBackInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityId", wireType)
			}
			m.ActivityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActivityId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidueChallengeTimes", wireType)
			}
			m.ResidueChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidueChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveChallengeTimes", wireType)
			}
			m.HaveChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDailyTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDailyTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDailyTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDailyTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDailyTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDailyTask
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDailyTask
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDailyTask(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDailyTask = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDailyTask   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dailyTask.proto", fileDescriptorDailyTask) }

var fileDescriptorDailyTask = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x65, 0x9c, 0x47, 0xd5, 0x5b, 0x41, 0x93, 0xa9, 0x8a, 0x8c, 0x84, 0xac, 0xc8, 0x62, 0x11,
	0x01, 0x8a, 0x78, 0x7e, 0x40, 0xd3, 0x46, 0x26, 0x12, 0x2b, 0xab, 0x12, 0x62, 0x39, 0xf6, 0x5c,
	0xe8, 0xc8, 0x21, 0x76, 0x33, 0x93, 0xb6, 0xfe, 0x0a, 0x36, 0x2c, 0xe0, 0x23, 0x58, 0xf2, 0x0f,
	0x2c, 0x59, 0xb3, 0x42, 0xe1, 0x47, 0xd0, 0xd8, 0x31, 0x6e, 0x3c, 0xb6, 0x5a, 0x24, 0x60, 0x17,
	0x9f, 0x73, 0xef, 0xcd, 0x39, 0xf7, 0x61, 0xc3, 0x2e, 0x67, 0x62, 0x96, 0x1e, 0x33, 0x19, 0x8d,
	0x92, 0x45, 0xac, 0x62, 0x6a, 0x25, 0x81, 0x4b, 0xa1, 0x77, 0x54, 0xc0, 0x2f, 0x63, 0xc6, 0x7d,
	0x3c, 0x75, 0xbf, 0x5b, 0x15, 0xf0, 0x20, 0x8c, 0xe8, 0x6d, 0xe8, 0x72, 0x96, 0x4e, 0x2e, 0x12,
	0x9b, 0x0c, 0xc8, 0xb0, 0xe3, 0xaf, 0x9f, 0xa8, 0x0d, 0x5b, 0xe7, 0x88, 0x91, 0x26, 0xac, 0x8c,
	0x28, 0x1e, 0xe9, 0x23, 0xd8, 0xe3, 0x2c, 0xf5, 0x51, 0xc6, 0xcb, 0x45, 0x88, 0x72, 0xcc, 0xc2,
	0x2c, 0xaa, 0x95, 0x45, 0xd5, 0x51, 0x74, 0x02, 0xf4, 0x84, 0x9d, 0xe1, 0xe1, 0x09, 0x9b, 0xcd,
	0x70, 0xfe, 0x16, 0x8f, 0xc5, 0x3b, 0x94, 0x76, 0x7b, 0xd0, 0x1a, 0xee, 0x3c, 0xd9, 0x1f, 0x25,
	0xc1, 0xe8, 0x45, 0x95, 0xf5, 0x6b, 0x12, 0x74, 0x99, 0x8d, 0xd2, 0xd3, 0xf9, 0x9b, 0x58, 0xda,
	0x9d, 0xb2, 0x8c, 0xc1, 0xfa, 0x35, 0x09, 0x74, 0x08, 0xbb, 0x1e, 0xaa, 0x23, 0xad, 0xf3, 0x9c,
	0x2d, 0xf8, 0x94, 0x4b, 0xbb, 0x3b, 0x68, 0x0d, 0x3b, 0x7e, 0x15, 0xa6, 0xf7, 0xa1, 0xe7, 0xa1,
	0x7a, 0x85, 0x18, 0x95, 0xa1, 0x5b, 0x59, 0xa8, 0x81, 0xbb, 0xcf, 0x61, 0x6f, 0xbc, 0x4c, 0x37,
	0x4d, 0xe0, 0x29, 0x75, 0x00, 0x58, 0xa8, 0xc4, 0x99, 0x50, 0xe9, 0x94, 0xaf, 0x5b, 0x7c, 0x09,
	0x71, 0xdf, 0x13, 0x33, 0x4f, 0x8f, 0xe5, 0x8a, 0x3c, 0xfa, 0x10, 0xfa, 0x46, 0x87, 0xd6, 0x83,
	0x32, 0x09, 0x6d, 0x24, 0x28, 0xff, 0x24, 0x6f, 0x7f, 0x3e, 0x2f, 0x03, 0x77, 0x1f, 0xc0, 0xb6,
	0x87, 0x6a, 0x72, 0x91, 0x5c, 0x47, 0xfe, 0x17, 0x52, 0x44, 0xff, 0xaf, 0x5d, 0xba, 0x07, 0x37,
	0x85, 0x3c, 0x64, 0x73, 0x0f, 0xd5, 0x81, 0xee, 0xbd, 0xdd, 0xce, 0x62, 0x37, 0xc1, 0x8a, 0xee,
	0x8e, 0xa1, 0xfb, 0x31, 0xec, 0x14, 0xb1, 0xda, 0xe6, 0x2d, 0xb0, 0x44, 0x61, 0xcf, 0x12, 0x9c,
	0x52, 0x68, 0xab, 0x34, 0x29, 0x1a, 0x9a, 0xfd, 0x76, 0xc3, 0x32, 0x45, 0x7b, 0xfd, 0x37, 0x5b,
	0xf4, 0x1a, 0xee, 0x6c, 0x38, 0xf6, 0x50, 0xe5, 0xe4, 0x35, 0x86, 0x41, 0xef, 0xc2, 0x76, 0xc0,
	0xc2, 0x28, 0x1f, 0x6f, 0x2e, 0xbd, 0x04, 0xdc, 0x0f, 0xa4, 0xa9, 0xb6, 0xb6, 0x53, 0x7f, 0x5b,
	0xe4, 0x4f, 0x6f, 0xab, 0x61, 0x9e, 0x56, 0xe3, 0x3c, 0xdd, 0xcf, 0x04, 0xfa, 0xc6, 0xf9, 0xff,
	0xe5, 0xf5, 0x77, 0x00, 0x84, 0xfc, 0xbd, 0x30, 0xf9, 0x72, 0x5d, 0x42, 0x6a, 0xcf, 0xa3, 0xdd,
	0x70, 0x1e, 0x9f, 0x08, 0xf4, 0x0d, 0xe3, 0x57, 0xea, 0x7d, 0x06, 0xfb, 0x0b, 0x94, 0x82, 0x2f,
	0xab, 0x2f, 0xc1, 0x5c, 0x73, 0x3d, 0x49, 0x47, 0xb5, 0xef, 0xcd, 0x5c, 0x7f, 0x0d, 0x33, 0xee,
	0x7d, 0x5d, 0x39, 0xe4, 0xdb, 0xca, 0x21, 0x3f, 0x56, 0x0e, 0xf9, 0xf8, 0xd3, 0xb9, 0x11, 0x74,
	0xb3, 0x2f, 0xc2, 0xd3, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x13, 0xef, 0x75, 0x24, 0x06,
	0x00, 0x00,
}
