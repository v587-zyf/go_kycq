// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: magicCircle.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 法阵升级
type MagicCircleUpLvReq struct {
	HeroIndex       int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	MagicCircleType int32 `protobuf:"varint,2,opt,name=magicCircleType,proto3" json:"magicCircleType,omitempty"`
}

func (m *MagicCircleUpLvReq) Reset()                    { *m = MagicCircleUpLvReq{} }
func (m *MagicCircleUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*MagicCircleUpLvReq) ProtoMessage()               {}
func (*MagicCircleUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorMagicCircle, []int{0} }

func (m *MagicCircleUpLvReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *MagicCircleUpLvReq) GetMagicCircleType() int32 {
	if m != nil {
		return m.MagicCircleType
	}
	return 0
}

type MagicCircleUpLvAck struct {
	HeroIndex       int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	MagicCircleType int32 `protobuf:"varint,2,opt,name=magicCircleType,proto3" json:"magicCircleType,omitempty"`
	ExcelId         int32 `protobuf:"varint,3,opt,name=excelId,proto3" json:"excelId,omitempty"`
}

func (m *MagicCircleUpLvAck) Reset()                    { *m = MagicCircleUpLvAck{} }
func (m *MagicCircleUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*MagicCircleUpLvAck) ProtoMessage()               {}
func (*MagicCircleUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorMagicCircle, []int{1} }

func (m *MagicCircleUpLvAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *MagicCircleUpLvAck) GetMagicCircleType() int32 {
	if m != nil {
		return m.MagicCircleType
	}
	return 0
}

func (m *MagicCircleUpLvAck) GetExcelId() int32 {
	if m != nil {
		return m.ExcelId
	}
	return 0
}

// 法阵穿戴
type MagicCircleChangeWearReq struct {
	HeroIndex       int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	MagicCircleLvId int32 `protobuf:"varint,2,opt,name=magicCircleLvId,proto3" json:"magicCircleLvId,omitempty"`
}

func (m *MagicCircleChangeWearReq) Reset()         { *m = MagicCircleChangeWearReq{} }
func (m *MagicCircleChangeWearReq) String() string { return proto.CompactTextString(m) }
func (*MagicCircleChangeWearReq) ProtoMessage()    {}
func (*MagicCircleChangeWearReq) Descriptor() ([]byte, []int) {
	return fileDescriptorMagicCircle, []int{2}
}

func (m *MagicCircleChangeWearReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *MagicCircleChangeWearReq) GetMagicCircleLvId() int32 {
	if m != nil {
		return m.MagicCircleLvId
	}
	return 0
}

type MagicCircleChangeWearAck struct {
	HeroIndex       int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	MagicCircleLvId int32 `protobuf:"varint,2,opt,name=magicCircleLvId,proto3" json:"magicCircleLvId,omitempty"`
}

func (m *MagicCircleChangeWearAck) Reset()         { *m = MagicCircleChangeWearAck{} }
func (m *MagicCircleChangeWearAck) String() string { return proto.CompactTextString(m) }
func (*MagicCircleChangeWearAck) ProtoMessage()    {}
func (*MagicCircleChangeWearAck) Descriptor() ([]byte, []int) {
	return fileDescriptorMagicCircle, []int{3}
}

func (m *MagicCircleChangeWearAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *MagicCircleChangeWearAck) GetMagicCircleLvId() int32 {
	if m != nil {
		return m.MagicCircleLvId
	}
	return 0
}

func init() {
	proto.RegisterType((*MagicCircleUpLvReq)(nil), "pb.MagicCircleUpLvReq")
	proto.RegisterType((*MagicCircleUpLvAck)(nil), "pb.MagicCircleUpLvAck")
	proto.RegisterType((*MagicCircleChangeWearReq)(nil), "pb.MagicCircleChangeWearReq")
	proto.RegisterType((*MagicCircleChangeWearAck)(nil), "pb.MagicCircleChangeWearAck")
}
func (m *MagicCircleUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MagicCircleUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.MagicCircleType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.MagicCircleType))
	}
	return i, nil
}

func (m *MagicCircleUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MagicCircleUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.MagicCircleType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.MagicCircleType))
	}
	if m.ExcelId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.ExcelId))
	}
	return i, nil
}

func (m *MagicCircleChangeWearReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MagicCircleChangeWearReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.MagicCircleLvId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.MagicCircleLvId))
	}
	return i, nil
}

func (m *MagicCircleChangeWearAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MagicCircleChangeWearAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.HeroIndex))
	}
	if m.MagicCircleLvId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMagicCircle(dAtA, i, uint64(m.MagicCircleLvId))
	}
	return i, nil
}

func encodeVarintMagicCircle(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MagicCircleUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovMagicCircle(uint64(m.HeroIndex))
	}
	if m.MagicCircleType != 0 {
		n += 1 + sovMagicCircle(uint64(m.MagicCircleType))
	}
	return n
}

func (m *MagicCircleUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovMagicCircle(uint64(m.HeroIndex))
	}
	if m.MagicCircleType != 0 {
		n += 1 + sovMagicCircle(uint64(m.MagicCircleType))
	}
	if m.ExcelId != 0 {
		n += 1 + sovMagicCircle(uint64(m.ExcelId))
	}
	return n
}

func (m *MagicCircleChangeWearReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovMagicCircle(uint64(m.HeroIndex))
	}
	if m.MagicCircleLvId != 0 {
		n += 1 + sovMagicCircle(uint64(m.MagicCircleLvId))
	}
	return n
}

func (m *MagicCircleChangeWearAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovMagicCircle(uint64(m.HeroIndex))
	}
	if m.MagicCircleLvId != 0 {
		n += 1 + sovMagicCircle(uint64(m.MagicCircleLvId))
	}
	return n
}

func sovMagicCircle(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMagicCircle(x uint64) (n int) {
	return sovMagicCircle(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MagicCircleUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMagicCircle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MagicCircleUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MagicCircleUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicCircleType", wireType)
			}
			m.MagicCircleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicCircleType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMagicCircle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMagicCircle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MagicCircleUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMagicCircle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MagicCircleUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MagicCircleUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicCircleType", wireType)
			}
			m.MagicCircleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicCircleType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcelId", wireType)
			}
			m.ExcelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExcelId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMagicCircle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMagicCircle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MagicCircleChangeWearReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMagicCircle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MagicCircleChangeWearReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MagicCircleChangeWearReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicCircleLvId", wireType)
			}
			m.MagicCircleLvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicCircleLvId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMagicCircle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMagicCircle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MagicCircleChangeWearAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMagicCircle
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MagicCircleChangeWearAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MagicCircleChangeWearAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MagicCircleLvId", wireType)
			}
			m.MagicCircleLvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MagicCircleLvId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMagicCircle(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMagicCircle
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMagicCircle(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMagicCircle
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMagicCircle
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMagicCircle
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMagicCircle
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMagicCircle(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMagicCircle = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMagicCircle   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("magicCircle.proto", fileDescriptorMagicCircle) }

var fileDescriptorMagicCircle = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4d, 0x4c, 0xcf,
	0x4c, 0x76, 0xce, 0x2c, 0x4a, 0xce, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a,
	0x48, 0x52, 0x8a, 0xe1, 0x12, 0xf2, 0x45, 0x48, 0x84, 0x16, 0xf8, 0x94, 0x05, 0xa5, 0x16, 0x0a,
	0xc9, 0x70, 0x71, 0x66, 0xa4, 0x16, 0xe5, 0x7b, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0x34, 0xb8, 0xf8, 0x91, 0x0c, 0x0b, 0xa9, 0x2c, 0x48, 0x95,
	0x60, 0x02, 0xab, 0x41, 0x17, 0x56, 0x2a, 0xc3, 0x30, 0xdd, 0x31, 0x39, 0x9b, 0x5a, 0xa6, 0x0b,
	0x49, 0x70, 0xb1, 0xa7, 0x56, 0x24, 0xa7, 0xe6, 0x78, 0xa6, 0x48, 0x30, 0x83, 0x55, 0xc0, 0xb8,
	0x4a, 0x49, 0x5c, 0x12, 0x48, 0xf6, 0x3a, 0x67, 0x24, 0xe6, 0xa5, 0xa7, 0x86, 0xa7, 0x26, 0x16,
	0x91, 0xea, 0x37, 0x9f, 0x32, 0xcf, 0x14, 0x2c, 0xb6, 0x83, 0x84, 0x71, 0xda, 0x41, 0xaa, 0x0f,
	0xf1, 0xd8, 0xe1, 0x24, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9,
	0x31, 0xce, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x8e, 0x3a, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0xc8, 0x32, 0x05, 0xcf, 0x01, 0x00, 0x00,
}
