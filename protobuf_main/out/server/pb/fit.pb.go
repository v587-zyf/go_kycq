// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fit.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 合体升级
type FitUpLvReq struct {
	FitId int32 `protobuf:"varint,1,opt,name=fitId,proto3" json:"fitId,omitempty"`
}

func (m *FitUpLvReq) Reset()                    { *m = FitUpLvReq{} }
func (m *FitUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*FitUpLvReq) ProtoMessage()               {}
func (*FitUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{0} }

func (m *FitUpLvReq) GetFitId() int32 {
	if m != nil {
		return m.FitId
	}
	return 0
}

type FitUpLvAck struct {
	FitId   int32 `protobuf:"varint,1,opt,name=fitId,proto3" json:"fitId,omitempty"`
	FitLvId int32 `protobuf:"varint,2,opt,name=fitLvId,proto3" json:"fitLvId,omitempty"`
}

func (m *FitUpLvAck) Reset()                    { *m = FitUpLvAck{} }
func (m *FitUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*FitUpLvAck) ProtoMessage()               {}
func (*FitUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{1} }

func (m *FitUpLvAck) GetFitId() int32 {
	if m != nil {
		return m.FitId
	}
	return 0
}

func (m *FitUpLvAck) GetFitLvId() int32 {
	if m != nil {
		return m.FitLvId
	}
	return 0
}

// 合体技能升级
type FitSkillUpLvReq struct {
	FitSkillId int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
}

func (m *FitSkillUpLvReq) Reset()                    { *m = FitSkillUpLvReq{} }
func (m *FitSkillUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*FitSkillUpLvReq) ProtoMessage()               {}
func (*FitSkillUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{2} }

func (m *FitSkillUpLvReq) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

type FitSkillUpLvAck struct {
	FitSkillId int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
	FitSkillLv int32 `protobuf:"varint,2,opt,name=fitSkillLv,proto3" json:"fitSkillLv,omitempty"`
}

func (m *FitSkillUpLvAck) Reset()                    { *m = FitSkillUpLvAck{} }
func (m *FitSkillUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*FitSkillUpLvAck) ProtoMessage()               {}
func (*FitSkillUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{3} }

func (m *FitSkillUpLvAck) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

func (m *FitSkillUpLvAck) GetFitSkillLv() int32 {
	if m != nil {
		return m.FitSkillLv
	}
	return 0
}

// 合体技能升星
type FitSkillUpStarReq struct {
	FitSkillId int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
}

func (m *FitSkillUpStarReq) Reset()                    { *m = FitSkillUpStarReq{} }
func (m *FitSkillUpStarReq) String() string            { return proto.CompactTextString(m) }
func (*FitSkillUpStarReq) ProtoMessage()               {}
func (*FitSkillUpStarReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{4} }

func (m *FitSkillUpStarReq) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

type FitSkillUpStarAck struct {
	FitSkillId   int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
	FitSkillStar int32 `protobuf:"varint,2,opt,name=fitSkillStar,proto3" json:"fitSkillStar,omitempty"`
}

func (m *FitSkillUpStarAck) Reset()                    { *m = FitSkillUpStarAck{} }
func (m *FitSkillUpStarAck) String() string            { return proto.CompactTextString(m) }
func (*FitSkillUpStarAck) ProtoMessage()               {}
func (*FitSkillUpStarAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{5} }

func (m *FitSkillUpStarAck) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

func (m *FitSkillUpStarAck) GetFitSkillStar() int32 {
	if m != nil {
		return m.FitSkillStar
	}
	return 0
}

// 合体技能替换
type FitSkillChangeReq struct {
	FitSkillId   int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
	FitSkillSlot int32 `protobuf:"varint,2,opt,name=fitSkillSlot,proto3" json:"fitSkillSlot,omitempty"`
}

func (m *FitSkillChangeReq) Reset()                    { *m = FitSkillChangeReq{} }
func (m *FitSkillChangeReq) String() string            { return proto.CompactTextString(m) }
func (*FitSkillChangeReq) ProtoMessage()               {}
func (*FitSkillChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{6} }

func (m *FitSkillChangeReq) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

func (m *FitSkillChangeReq) GetFitSkillSlot() int32 {
	if m != nil {
		return m.FitSkillSlot
	}
	return 0
}

type FitSkillChangeAck struct {
	FitSkillId   int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
	FitSkillSlot int32 `protobuf:"varint,2,opt,name=fitSkillSlot,proto3" json:"fitSkillSlot,omitempty"`
}

func (m *FitSkillChangeAck) Reset()                    { *m = FitSkillChangeAck{} }
func (m *FitSkillChangeAck) String() string            { return proto.CompactTextString(m) }
func (*FitSkillChangeAck) ProtoMessage()               {}
func (*FitSkillChangeAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{7} }

func (m *FitSkillChangeAck) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

func (m *FitSkillChangeAck) GetFitSkillSlot() int32 {
	if m != nil {
		return m.FitSkillSlot
	}
	return 0
}

// 合体技能重置
type FitSkillResetReq struct {
	FitSkillId int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
}

func (m *FitSkillResetReq) Reset()                    { *m = FitSkillResetReq{} }
func (m *FitSkillResetReq) String() string            { return proto.CompactTextString(m) }
func (*FitSkillResetReq) ProtoMessage()               {}
func (*FitSkillResetReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{8} }

func (m *FitSkillResetReq) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

type FitSkillResetAck struct {
	FitSkillId   int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
	FitSkillLv   int32 `protobuf:"varint,2,opt,name=fitSkillLv,proto3" json:"fitSkillLv,omitempty"`
	FitSkillStar int32 `protobuf:"varint,3,opt,name=fitSkillStar,proto3" json:"fitSkillStar,omitempty"`
}

func (m *FitSkillResetAck) Reset()                    { *m = FitSkillResetAck{} }
func (m *FitSkillResetAck) String() string            { return proto.CompactTextString(m) }
func (*FitSkillResetAck) ProtoMessage()               {}
func (*FitSkillResetAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{9} }

func (m *FitSkillResetAck) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

func (m *FitSkillResetAck) GetFitSkillLv() int32 {
	if m != nil {
		return m.FitSkillLv
	}
	return 0
}

func (m *FitSkillResetAck) GetFitSkillStar() int32 {
	if m != nil {
		return m.FitSkillStar
	}
	return 0
}

// 合体时装升级
type FitFashionUpLvReq struct {
	FitFashionId int32 `protobuf:"varint,1,opt,name=fitFashionId,proto3" json:"fitFashionId,omitempty"`
}

func (m *FitFashionUpLvReq) Reset()                    { *m = FitFashionUpLvReq{} }
func (m *FitFashionUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*FitFashionUpLvReq) ProtoMessage()               {}
func (*FitFashionUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{10} }

func (m *FitFashionUpLvReq) GetFitFashionId() int32 {
	if m != nil {
		return m.FitFashionId
	}
	return 0
}

type FitFashionUpLvAck struct {
	FitFashionId int32 `protobuf:"varint,1,opt,name=fitFashionId,proto3" json:"fitFashionId,omitempty"`
	FitFashionLv int32 `protobuf:"varint,2,opt,name=fitFashionLv,proto3" json:"fitFashionLv,omitempty"`
}

func (m *FitFashionUpLvAck) Reset()                    { *m = FitFashionUpLvAck{} }
func (m *FitFashionUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*FitFashionUpLvAck) ProtoMessage()               {}
func (*FitFashionUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{11} }

func (m *FitFashionUpLvAck) GetFitFashionId() int32 {
	if m != nil {
		return m.FitFashionId
	}
	return 0
}

func (m *FitFashionUpLvAck) GetFitFashionLv() int32 {
	if m != nil {
		return m.FitFashionLv
	}
	return 0
}

// 合体时装穿戴
type FitFashionChangeReq struct {
	FitFashionId int32 `protobuf:"varint,1,opt,name=fitFashionId,proto3" json:"fitFashionId,omitempty"`
}

func (m *FitFashionChangeReq) Reset()                    { *m = FitFashionChangeReq{} }
func (m *FitFashionChangeReq) String() string            { return proto.CompactTextString(m) }
func (*FitFashionChangeReq) ProtoMessage()               {}
func (*FitFashionChangeReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{12} }

func (m *FitFashionChangeReq) GetFitFashionId() int32 {
	if m != nil {
		return m.FitFashionId
	}
	return 0
}

type FitFashionChangeAck struct {
	FitFashionId int32 `protobuf:"varint,1,opt,name=fitFashionId,proto3" json:"fitFashionId,omitempty"`
}

func (m *FitFashionChangeAck) Reset()                    { *m = FitFashionChangeAck{} }
func (m *FitFashionChangeAck) String() string            { return proto.CompactTextString(m) }
func (*FitFashionChangeAck) ProtoMessage()               {}
func (*FitFashionChangeAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{13} }

func (m *FitFashionChangeAck) GetFitFashionId() int32 {
	if m != nil {
		return m.FitFashionId
	}
	return 0
}

// 合体技能激活
type FitSkillActiveReq struct {
	FitSkillId int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
}

func (m *FitSkillActiveReq) Reset()                    { *m = FitSkillActiveReq{} }
func (m *FitSkillActiveReq) String() string            { return proto.CompactTextString(m) }
func (*FitSkillActiveReq) ProtoMessage()               {}
func (*FitSkillActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{14} }

func (m *FitSkillActiveReq) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

type FitSkillActiveAck struct {
	FitSkillId int32 `protobuf:"varint,1,opt,name=fitSkillId,proto3" json:"fitSkillId,omitempty"`
}

func (m *FitSkillActiveAck) Reset()                    { *m = FitSkillActiveAck{} }
func (m *FitSkillActiveAck) String() string            { return proto.CompactTextString(m) }
func (*FitSkillActiveAck) ProtoMessage()               {}
func (*FitSkillActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{15} }

func (m *FitSkillActiveAck) GetFitSkillId() int32 {
	if m != nil {
		return m.FitSkillId
	}
	return 0
}

//
type FitEnterReq struct {
}

func (m *FitEnterReq) Reset()                    { *m = FitEnterReq{} }
func (m *FitEnterReq) String() string            { return proto.CompactTextString(m) }
func (*FitEnterReq) ProtoMessage()               {}
func (*FitEnterReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{16} }

type FitEnterAck struct {
	CdStartTime int32 `protobuf:"varint,1,opt,name=cdStartTime,proto3" json:"cdStartTime,omitempty"`
	CdEndTime   int32 `protobuf:"varint,2,opt,name=cdEndTime,proto3" json:"cdEndTime,omitempty"`
}

func (m *FitEnterAck) Reset()                    { *m = FitEnterAck{} }
func (m *FitEnterAck) String() string            { return proto.CompactTextString(m) }
func (*FitEnterAck) ProtoMessage()               {}
func (*FitEnterAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{17} }

func (m *FitEnterAck) GetCdStartTime() int32 {
	if m != nil {
		return m.CdStartTime
	}
	return 0
}

func (m *FitEnterAck) GetCdEndTime() int32 {
	if m != nil {
		return m.CdEndTime
	}
	return 0
}

type FitCancleReq struct {
}

func (m *FitCancleReq) Reset()                    { *m = FitCancleReq{} }
func (m *FitCancleReq) String() string            { return proto.CompactTextString(m) }
func (*FitCancleReq) ProtoMessage()               {}
func (*FitCancleReq) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{18} }

type FitCancleAck struct {
}

func (m *FitCancleAck) Reset()                    { *m = FitCancleAck{} }
func (m *FitCancleAck) String() string            { return proto.CompactTextString(m) }
func (*FitCancleAck) ProtoMessage()               {}
func (*FitCancleAck) Descriptor() ([]byte, []int) { return fileDescriptorFit, []int{19} }

func init() {
	proto.RegisterType((*FitUpLvReq)(nil), "pb.FitUpLvReq")
	proto.RegisterType((*FitUpLvAck)(nil), "pb.FitUpLvAck")
	proto.RegisterType((*FitSkillUpLvReq)(nil), "pb.FitSkillUpLvReq")
	proto.RegisterType((*FitSkillUpLvAck)(nil), "pb.FitSkillUpLvAck")
	proto.RegisterType((*FitSkillUpStarReq)(nil), "pb.FitSkillUpStarReq")
	proto.RegisterType((*FitSkillUpStarAck)(nil), "pb.FitSkillUpStarAck")
	proto.RegisterType((*FitSkillChangeReq)(nil), "pb.FitSkillChangeReq")
	proto.RegisterType((*FitSkillChangeAck)(nil), "pb.FitSkillChangeAck")
	proto.RegisterType((*FitSkillResetReq)(nil), "pb.FitSkillResetReq")
	proto.RegisterType((*FitSkillResetAck)(nil), "pb.FitSkillResetAck")
	proto.RegisterType((*FitFashionUpLvReq)(nil), "pb.FitFashionUpLvReq")
	proto.RegisterType((*FitFashionUpLvAck)(nil), "pb.FitFashionUpLvAck")
	proto.RegisterType((*FitFashionChangeReq)(nil), "pb.FitFashionChangeReq")
	proto.RegisterType((*FitFashionChangeAck)(nil), "pb.FitFashionChangeAck")
	proto.RegisterType((*FitSkillActiveReq)(nil), "pb.FitSkillActiveReq")
	proto.RegisterType((*FitSkillActiveAck)(nil), "pb.FitSkillActiveAck")
	proto.RegisterType((*FitEnterReq)(nil), "pb.FitEnterReq")
	proto.RegisterType((*FitEnterAck)(nil), "pb.FitEnterAck")
	proto.RegisterType((*FitCancleReq)(nil), "pb.FitCancleReq")
	proto.RegisterType((*FitCancleAck)(nil), "pb.FitCancleAck")
}
func (m *FitUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitId))
	}
	return i, nil
}

func (m *FitUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitId))
	}
	if m.FitLvId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitLvId))
	}
	return i, nil
}

func (m *FitSkillUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	return i, nil
}

func (m *FitSkillUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	if m.FitSkillLv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillLv))
	}
	return i, nil
}

func (m *FitSkillUpStarReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillUpStarReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	return i, nil
}

func (m *FitSkillUpStarAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillUpStarAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	if m.FitSkillStar != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillStar))
	}
	return i, nil
}

func (m *FitSkillChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	if m.FitSkillSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillSlot))
	}
	return i, nil
}

func (m *FitSkillChangeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillChangeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	if m.FitSkillSlot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillSlot))
	}
	return i, nil
}

func (m *FitSkillResetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillResetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	return i, nil
}

func (m *FitSkillResetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillResetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	if m.FitSkillLv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillLv))
	}
	if m.FitSkillStar != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillStar))
	}
	return i, nil
}

func (m *FitFashionUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitFashionUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitFashionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitFashionId))
	}
	return i, nil
}

func (m *FitFashionUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitFashionUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitFashionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitFashionId))
	}
	if m.FitFashionLv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitFashionLv))
	}
	return i, nil
}

func (m *FitFashionChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitFashionChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitFashionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitFashionId))
	}
	return i, nil
}

func (m *FitFashionChangeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitFashionChangeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitFashionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitFashionId))
	}
	return i, nil
}

func (m *FitSkillActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	return i, nil
}

func (m *FitSkillActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitSkillActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FitSkillId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.FitSkillId))
	}
	return i, nil
}

func (m *FitEnterReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitEnterReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FitEnterAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitEnterAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CdStartTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.CdStartTime))
	}
	if m.CdEndTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFit(dAtA, i, uint64(m.CdEndTime))
	}
	return i, nil
}

func (m *FitCancleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitCancleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FitCancleAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FitCancleAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintFit(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FitUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.FitId != 0 {
		n += 1 + sovFit(uint64(m.FitId))
	}
	return n
}

func (m *FitUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.FitId != 0 {
		n += 1 + sovFit(uint64(m.FitId))
	}
	if m.FitLvId != 0 {
		n += 1 + sovFit(uint64(m.FitLvId))
	}
	return n
}

func (m *FitSkillUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	return n
}

func (m *FitSkillUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	if m.FitSkillLv != 0 {
		n += 1 + sovFit(uint64(m.FitSkillLv))
	}
	return n
}

func (m *FitSkillUpStarReq) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	return n
}

func (m *FitSkillUpStarAck) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	if m.FitSkillStar != 0 {
		n += 1 + sovFit(uint64(m.FitSkillStar))
	}
	return n
}

func (m *FitSkillChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	if m.FitSkillSlot != 0 {
		n += 1 + sovFit(uint64(m.FitSkillSlot))
	}
	return n
}

func (m *FitSkillChangeAck) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	if m.FitSkillSlot != 0 {
		n += 1 + sovFit(uint64(m.FitSkillSlot))
	}
	return n
}

func (m *FitSkillResetReq) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	return n
}

func (m *FitSkillResetAck) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	if m.FitSkillLv != 0 {
		n += 1 + sovFit(uint64(m.FitSkillLv))
	}
	if m.FitSkillStar != 0 {
		n += 1 + sovFit(uint64(m.FitSkillStar))
	}
	return n
}

func (m *FitFashionUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.FitFashionId != 0 {
		n += 1 + sovFit(uint64(m.FitFashionId))
	}
	return n
}

func (m *FitFashionUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.FitFashionId != 0 {
		n += 1 + sovFit(uint64(m.FitFashionId))
	}
	if m.FitFashionLv != 0 {
		n += 1 + sovFit(uint64(m.FitFashionLv))
	}
	return n
}

func (m *FitFashionChangeReq) Size() (n int) {
	var l int
	_ = l
	if m.FitFashionId != 0 {
		n += 1 + sovFit(uint64(m.FitFashionId))
	}
	return n
}

func (m *FitFashionChangeAck) Size() (n int) {
	var l int
	_ = l
	if m.FitFashionId != 0 {
		n += 1 + sovFit(uint64(m.FitFashionId))
	}
	return n
}

func (m *FitSkillActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	return n
}

func (m *FitSkillActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.FitSkillId != 0 {
		n += 1 + sovFit(uint64(m.FitSkillId))
	}
	return n
}

func (m *FitEnterReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FitEnterAck) Size() (n int) {
	var l int
	_ = l
	if m.CdStartTime != 0 {
		n += 1 + sovFit(uint64(m.CdStartTime))
	}
	if m.CdEndTime != 0 {
		n += 1 + sovFit(uint64(m.CdEndTime))
	}
	return n
}

func (m *FitCancleReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FitCancleAck) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovFit(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFit(x uint64) (n int) {
	return sovFit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FitUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitId", wireType)
			}
			m.FitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitId", wireType)
			}
			m.FitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitLvId", wireType)
			}
			m.FitLvId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitLvId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillLv", wireType)
			}
			m.FitSkillLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillUpStarReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillUpStarReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillUpStarReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillUpStarAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillUpStarAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillUpStarAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillStar", wireType)
			}
			m.FitSkillStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillSlot", wireType)
			}
			m.FitSkillSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillSlot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillChangeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillChangeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillChangeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillSlot", wireType)
			}
			m.FitSkillSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillSlot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillResetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillResetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillResetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillResetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillResetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillResetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillLv", wireType)
			}
			m.FitSkillLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillStar", wireType)
			}
			m.FitSkillStar = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillStar |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitFashionUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitFashionUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitFashionUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitFashionId", wireType)
			}
			m.FitFashionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitFashionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitFashionUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitFashionUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitFashionUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitFashionId", wireType)
			}
			m.FitFashionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitFashionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitFashionLv", wireType)
			}
			m.FitFashionLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitFashionLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitFashionChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitFashionChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitFashionChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitFashionId", wireType)
			}
			m.FitFashionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitFashionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitFashionChangeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitFashionChangeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitFashionChangeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitFashionId", wireType)
			}
			m.FitFashionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitFashionId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitSkillActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitSkillActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitSkillActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FitSkillId", wireType)
			}
			m.FitSkillId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FitSkillId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitEnterReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitEnterReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitEnterReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitEnterAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitEnterAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitEnterAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdStartTime", wireType)
			}
			m.CdStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdStartTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdEndTime", wireType)
			}
			m.CdEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdEndTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitCancleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitCancleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitCancleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FitCancleAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FitCancleAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FitCancleAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFit
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFit
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFit(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFit = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFit   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fit.proto", fileDescriptorFit) }

var fileDescriptorFit = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0x2d, 0x06, 0x0d, 0x03, 0x2a, 0x56, 0x0f, 0x1c, 0x4c, 0x43, 0xe6, 0xe4, 0xc9, 0x44,
	0x39, 0x18, 0x13, 0x2f, 0x48, 0x68, 0x42, 0x82, 0x07, 0x41, 0xe3, 0xc1, 0x53, 0xe9, 0x1f, 0xd9,
	0x50, 0x5b, 0x84, 0x49, 0x9f, 0xc5, 0x47, 0xf2, 0xe8, 0x23, 0x18, 0x7c, 0x11, 0xb3, 0xa5, 0x7f,
	0x76, 0x69, 0x8d, 0x6b, 0xe2, 0x71, 0xbe, 0xdd, 0xdf, 0xb7, 0x1f, 0x33, 0x43, 0xa1, 0xe6, 0x31,
	0x3a, 0x9b, 0x2f, 0x42, 0x0a, 0xf5, 0xca, 0x7c, 0x82, 0x08, 0x60, 0x32, 0x7a, 0x98, 0x0f, 0xa3,
	0x91, 0xfb, 0xaa, 0x1f, 0x43, 0xd5, 0x63, 0x34, 0x70, 0x5a, 0x5a, 0x5b, 0x3b, 0xad, 0x8e, 0xd6,
	0x05, 0x5e, 0x67, 0x77, 0xba, 0xf6, 0xac, 0xfc, 0x8e, 0xde, 0x82, 0x5d, 0x8f, 0xd1, 0x30, 0x1a,
	0x38, 0xad, 0x4a, 0xac, 0xa7, 0x25, 0x9e, 0xc3, 0x81, 0xc9, 0x68, 0x3c, 0x63, 0xbe, 0x9f, 0x3e,
	0x63, 0x00, 0x78, 0x89, 0x94, 0xf9, 0x08, 0x0a, 0xde, 0xc9, 0x08, 0x7f, 0xf5, 0x17, 0x44, 0x3c,
	0x1f, 0x46, 0x49, 0x04, 0x41, 0xc1, 0x0e, 0x1c, 0xe6, 0x96, 0x63, 0xb2, 0x16, 0x2a, 0x39, 0x1e,
	0x37, 0x21, 0x95, 0x24, 0x08, 0x8d, 0xb4, 0xe2, 0x48, 0x92, 0x45, 0xd2, 0x44, 0xe3, 0xde, 0xd4,
	0x0a, 0x9e, 0x5d, 0x85, 0x34, 0x92, 0xb1, 0x1f, 0x52, 0xc1, 0xd8, 0x0f, 0xa9, 0x68, 0xfc, 0xd7,
	0xc4, 0x3f, 0x19, 0x5f, 0x40, 0x33, 0x35, 0x1e, 0xb9, 0x4b, 0x97, 0x54, 0xda, 0x17, 0x6d, 0x30,
	0xff, 0x30, 0xc7, 0x42, 0x77, 0xb7, 0x4b, 0xba, 0x7b, 0x19, 0x37, 0xc1, 0xb4, 0x96, 0x53, 0x16,
	0x06, 0xe9, 0xce, 0xad, 0xc1, 0x44, 0xcc, 0x9e, 0x96, 0x34, 0x7c, 0xda, 0x04, 0x79, 0x62, 0x05,
	0x50, 0xbe, 0x93, 0xe5, 0x96, 0x34, 0xbc, 0x82, 0xa3, 0xdc, 0x3c, 0x9f, 0xba, 0x4a, 0xae, 0x12,
	0x54, 0x31, 0x99, 0xb8, 0xf7, 0x5d, 0x9b, 0x58, 0xa4, 0xb2, 0x69, 0x45, 0x48, 0x61, 0x72, 0xb8,
	0x07, 0x75, 0x93, 0x51, 0x3f, 0x20, 0x97, 0xff, 0xb7, 0xf0, 0x36, 0x2f, 0x39, 0xdd, 0x86, 0xba,
	0xed, 0xf0, 0xe9, 0xd0, 0x3d, 0x7b, 0x71, 0x13, 0x5c, 0x94, 0xf4, 0x13, 0xa8, 0xd9, 0x4e, 0x3f,
	0x70, 0xe2, 0xf3, 0x75, 0x03, 0x73, 0x01, 0xf7, 0xa1, 0x61, 0x32, 0xea, 0x59, 0x81, 0xed, 0xf3,
	0x9f, 0x20, 0xd5, 0x5d, 0x7b, 0x76, 0xd3, 0x7c, 0x5f, 0x19, 0xda, 0xc7, 0xca, 0xd0, 0x3e, 0x57,
	0x86, 0xf6, 0xf6, 0x65, 0x6c, 0x4d, 0x76, 0xe2, 0x8f, 0x5c, 0xe7, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x09, 0xe3, 0x07, 0x8d, 0xf1, 0x04, 0x00, 0x00,
}
