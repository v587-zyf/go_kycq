// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rein.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ReinActiveReq struct {
}

func (m *ReinActiveReq) Reset()                    { *m = ReinActiveReq{} }
func (m *ReinActiveReq) String() string            { return proto.CompactTextString(m) }
func (*ReinActiveReq) ProtoMessage()               {}
func (*ReinActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{0} }

type ReinActiveAck struct {
	Rein *Rein `protobuf:"bytes,1,opt,name=rein" json:"rein,omitempty"`
}

func (m *ReinActiveAck) Reset()                    { *m = ReinActiveAck{} }
func (m *ReinActiveAck) String() string            { return proto.CompactTextString(m) }
func (*ReinActiveAck) ProtoMessage()               {}
func (*ReinActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{1} }

func (m *ReinActiveAck) GetRein() *Rein {
	if m != nil {
		return m.Rein
	}
	return nil
}

type ReincarnationReq struct {
}

func (m *ReincarnationReq) Reset()                    { *m = ReincarnationReq{} }
func (m *ReincarnationReq) String() string            { return proto.CompactTextString(m) }
func (*ReincarnationReq) ProtoMessage()               {}
func (*ReincarnationReq) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{2} }

type ReincarnationAck struct {
	Rein *Rein `protobuf:"bytes,1,opt,name=rein" json:"rein,omitempty"`
}

func (m *ReincarnationAck) Reset()                    { *m = ReincarnationAck{} }
func (m *ReincarnationAck) String() string            { return proto.CompactTextString(m) }
func (*ReincarnationAck) ProtoMessage()               {}
func (*ReincarnationAck) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{3} }

func (m *ReincarnationAck) GetRein() *Rein {
	if m != nil {
		return m.Rein
	}
	return nil
}

type ReinCostBuyReq struct {
	Id  int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	Use bool  `protobuf:"varint,3,opt,name=use,proto3" json:"use,omitempty"`
}

func (m *ReinCostBuyReq) Reset()                    { *m = ReinCostBuyReq{} }
func (m *ReinCostBuyReq) String() string            { return proto.CompactTextString(m) }
func (*ReinCostBuyReq) ProtoMessage()               {}
func (*ReinCostBuyReq) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{4} }

func (m *ReinCostBuyReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReinCostBuyReq) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ReinCostBuyReq) GetUse() bool {
	if m != nil {
		return m.Use
	}
	return false
}

type ReinCostBuyAck struct {
	Rein     *Rein     `protobuf:"bytes,1,opt,name=rein" json:"rein,omitempty"`
	ReinCost *ReinCost `protobuf:"bytes,2,opt,name=reinCost" json:"reinCost,omitempty"`
}

func (m *ReinCostBuyAck) Reset()                    { *m = ReinCostBuyAck{} }
func (m *ReinCostBuyAck) String() string            { return proto.CompactTextString(m) }
func (*ReinCostBuyAck) ProtoMessage()               {}
func (*ReinCostBuyAck) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{5} }

func (m *ReinCostBuyAck) GetRein() *Rein {
	if m != nil {
		return m.Rein
	}
	return nil
}

func (m *ReinCostBuyAck) GetReinCost() *ReinCost {
	if m != nil {
		return m.ReinCost
	}
	return nil
}

type ReinCostUseReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ReinCostUseReq) Reset()                    { *m = ReinCostUseReq{} }
func (m *ReinCostUseReq) String() string            { return proto.CompactTextString(m) }
func (*ReinCostUseReq) ProtoMessage()               {}
func (*ReinCostUseReq) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{6} }

func (m *ReinCostUseReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ReinCostUseAck struct {
	Rein     *Rein     `protobuf:"bytes,1,opt,name=rein" json:"rein,omitempty"`
	ReinCost *ReinCost `protobuf:"bytes,2,opt,name=reinCost" json:"reinCost,omitempty"`
}

func (m *ReinCostUseAck) Reset()                    { *m = ReinCostUseAck{} }
func (m *ReinCostUseAck) String() string            { return proto.CompactTextString(m) }
func (*ReinCostUseAck) ProtoMessage()               {}
func (*ReinCostUseAck) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{7} }

func (m *ReinCostUseAck) GetRein() *Rein {
	if m != nil {
		return m.Rein
	}
	return nil
}

func (m *ReinCostUseAck) GetReinCost() *ReinCost {
	if m != nil {
		return m.ReinCost
	}
	return nil
}

type ReinCostBuyNumRefNtf struct {
	ReinCost []*ReinCost `protobuf:"bytes,1,rep,name=reinCost" json:"reinCost,omitempty"`
}

func (m *ReinCostBuyNumRefNtf) Reset()                    { *m = ReinCostBuyNumRefNtf{} }
func (m *ReinCostBuyNumRefNtf) String() string            { return proto.CompactTextString(m) }
func (*ReinCostBuyNumRefNtf) ProtoMessage()               {}
func (*ReinCostBuyNumRefNtf) Descriptor() ([]byte, []int) { return fileDescriptorRein, []int{8} }

func (m *ReinCostBuyNumRefNtf) GetReinCost() []*ReinCost {
	if m != nil {
		return m.ReinCost
	}
	return nil
}

func init() {
	proto.RegisterType((*ReinActiveReq)(nil), "pb.ReinActiveReq")
	proto.RegisterType((*ReinActiveAck)(nil), "pb.ReinActiveAck")
	proto.RegisterType((*ReincarnationReq)(nil), "pb.ReincarnationReq")
	proto.RegisterType((*ReincarnationAck)(nil), "pb.ReincarnationAck")
	proto.RegisterType((*ReinCostBuyReq)(nil), "pb.ReinCostBuyReq")
	proto.RegisterType((*ReinCostBuyAck)(nil), "pb.ReinCostBuyAck")
	proto.RegisterType((*ReinCostUseReq)(nil), "pb.ReinCostUseReq")
	proto.RegisterType((*ReinCostUseAck)(nil), "pb.ReinCostUseAck")
	proto.RegisterType((*ReinCostBuyNumRefNtf)(nil), "pb.ReinCostBuyNumRefNtf")
}
func (m *ReinActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReinActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rein != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Rein.Size()))
		n1, err := m.Rein.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ReincarnationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReincarnationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReincarnationAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReincarnationAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rein != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Rein.Size()))
		n2, err := m.Rein.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ReinCostBuyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinCostBuyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Id))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Num))
	}
	if m.Use {
		dAtA[i] = 0x18
		i++
		if m.Use {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ReinCostBuyAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinCostBuyAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rein != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Rein.Size()))
		n3, err := m.Rein.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.ReinCost != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.ReinCost.Size()))
		n4, err := m.ReinCost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ReinCostUseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinCostUseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ReinCostUseAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinCostUseAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rein != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.Rein.Size()))
		n5, err := m.Rein.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ReinCost != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRein(dAtA, i, uint64(m.ReinCost.Size()))
		n6, err := m.ReinCost.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ReinCostBuyNumRefNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReinCostBuyNumRefNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReinCost) > 0 {
		for _, msg := range m.ReinCost {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRein(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintRein(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ReinActiveReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReinActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Rein != nil {
		l = m.Rein.Size()
		n += 1 + l + sovRein(uint64(l))
	}
	return n
}

func (m *ReincarnationReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReincarnationAck) Size() (n int) {
	var l int
	_ = l
	if m.Rein != nil {
		l = m.Rein.Size()
		n += 1 + l + sovRein(uint64(l))
	}
	return n
}

func (m *ReinCostBuyReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRein(uint64(m.Id))
	}
	if m.Num != 0 {
		n += 1 + sovRein(uint64(m.Num))
	}
	if m.Use {
		n += 2
	}
	return n
}

func (m *ReinCostBuyAck) Size() (n int) {
	var l int
	_ = l
	if m.Rein != nil {
		l = m.Rein.Size()
		n += 1 + l + sovRein(uint64(l))
	}
	if m.ReinCost != nil {
		l = m.ReinCost.Size()
		n += 1 + l + sovRein(uint64(l))
	}
	return n
}

func (m *ReinCostUseReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRein(uint64(m.Id))
	}
	return n
}

func (m *ReinCostUseAck) Size() (n int) {
	var l int
	_ = l
	if m.Rein != nil {
		l = m.Rein.Size()
		n += 1 + l + sovRein(uint64(l))
	}
	if m.ReinCost != nil {
		l = m.ReinCost.Size()
		n += 1 + l + sovRein(uint64(l))
	}
	return n
}

func (m *ReinCostBuyNumRefNtf) Size() (n int) {
	var l int
	_ = l
	if len(m.ReinCost) > 0 {
		for _, e := range m.ReinCost {
			l = e.Size()
			n += 1 + l + sovRein(uint64(l))
		}
	}
	return n
}

func sovRein(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRein(x uint64) (n int) {
	return sovRein(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReinActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rein", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rein == nil {
				m.Rein = &Rein{}
			}
			if err := m.Rein.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReincarnationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReincarnationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReincarnationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReincarnationAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReincarnationAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReincarnationAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rein", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rein == nil {
				m.Rein = &Rein{}
			}
			if err := m.Rein.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinCostBuyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinCostBuyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinCostBuyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Use = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinCostBuyAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinCostBuyAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinCostBuyAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rein", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rein == nil {
				m.Rein = &Rein{}
			}
			if err := m.Rein.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReinCost == nil {
				m.ReinCost = &ReinCost{}
			}
			if err := m.ReinCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinCostUseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinCostUseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinCostUseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinCostUseAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinCostUseAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinCostUseAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rein", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rein == nil {
				m.Rein = &Rein{}
			}
			if err := m.Rein.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReinCost == nil {
				m.ReinCost = &ReinCost{}
			}
			if err := m.ReinCost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReinCostBuyNumRefNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRein
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReinCostBuyNumRefNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReinCostBuyNumRefNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReinCost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRein
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRein
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReinCost = append(m.ReinCost, &ReinCost{})
			if err := m.ReinCost[len(m.ReinCost)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRein(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRein
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRein(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRein
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRein
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRein
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRein
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRein
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRein(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRein = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRein   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rein.proto", fileDescriptorRein) }

var fileDescriptorRein = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x4a, 0xcd, 0xcc,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0x87, 0x8a, 0x28, 0xf1, 0x73, 0xf1, 0x06, 0xa5, 0x66, 0xe6, 0x39, 0x26, 0x97, 0x64, 0x96,
	0xa5, 0x06, 0xa5, 0x16, 0x2a, 0xe9, 0x22, 0x0b, 0x38, 0x26, 0x67, 0x0b, 0xc9, 0x70, 0xb1, 0x80,
	0x4c, 0x90, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0xe2, 0xd0, 0x2b, 0x48, 0xd2, 0x03, 0x29, 0x08,
	0x02, 0x8b, 0x2a, 0x09, 0x71, 0x09, 0x80, 0x78, 0xc9, 0x89, 0x45, 0x79, 0x89, 0x25, 0x99, 0xf9,
	0x79, 0x20, 0x23, 0x0c, 0xd0, 0xc4, 0x08, 0x9b, 0xe2, 0xc2, 0xc5, 0x07, 0xe2, 0x39, 0xe7, 0x17,
	0x97, 0x38, 0x95, 0x56, 0x06, 0xa5, 0x16, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x80, 0x55, 0xb3,
	0x06, 0x31, 0x65, 0xa6, 0x08, 0x09, 0x70, 0x31, 0xe7, 0x95, 0xe6, 0x4a, 0x30, 0x81, 0x05, 0x40,
	0x4c, 0x90, 0x48, 0x69, 0x71, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x47, 0x10, 0x88, 0xa9, 0x14,
	0x81, 0x62, 0x0a, 0x41, 0x5b, 0x85, 0x34, 0xb8, 0x38, 0x8a, 0xa0, 0xea, 0xc1, 0x06, 0x73, 0x1b,
	0xf1, 0xc0, 0x54, 0x80, 0xc4, 0x82, 0xe0, 0xb2, 0x4a, 0x0a, 0x08, 0x93, 0x43, 0x8b, 0x53, 0xb1,
	0xb8, 0x0f, 0xd9, 0xee, 0xd0, 0xe2, 0x54, 0x6a, 0xda, 0xed, 0xc0, 0x25, 0x82, 0xe4, 0x2b, 0xbf,
	0xd2, 0xdc, 0xa0, 0xd4, 0x34, 0xbf, 0x92, 0x34, 0x14, 0x13, 0x18, 0x15, 0x98, 0x71, 0x9b, 0xe0,
	0x24, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78,
	0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x8e, 0x7c, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xba, 0xa1,
	0x9b, 0x66, 0x1c, 0x02, 0x00, 0x00,
}
