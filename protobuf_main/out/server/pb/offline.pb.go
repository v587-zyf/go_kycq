// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: offline.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OfflineAwardLoadReq struct {
}

func (m *OfflineAwardLoadReq) Reset()                    { *m = OfflineAwardLoadReq{} }
func (m *OfflineAwardLoadReq) String() string            { return proto.CompactTextString(m) }
func (*OfflineAwardLoadReq) ProtoMessage()               {}
func (*OfflineAwardLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorOffline, []int{0} }

type OfflineAwardLoadAck struct {
	OfflineTimes int64 `protobuf:"varint,1,opt,name=offlineTimes,proto3" json:"offlineTimes,omitempty"`
	GetExpNum    int64 `protobuf:"varint,2,opt,name=getExpNum,proto3" json:"getExpNum,omitempty"`
}

func (m *OfflineAwardLoadAck) Reset()                    { *m = OfflineAwardLoadAck{} }
func (m *OfflineAwardLoadAck) String() string            { return proto.CompactTextString(m) }
func (*OfflineAwardLoadAck) ProtoMessage()               {}
func (*OfflineAwardLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorOffline, []int{1} }

func (m *OfflineAwardLoadAck) GetOfflineTimes() int64 {
	if m != nil {
		return m.OfflineTimes
	}
	return 0
}

func (m *OfflineAwardLoadAck) GetGetExpNum() int64 {
	if m != nil {
		return m.GetExpNum
	}
	return 0
}

type OfflineAwardGetReq struct {
}

func (m *OfflineAwardGetReq) Reset()                    { *m = OfflineAwardGetReq{} }
func (m *OfflineAwardGetReq) String() string            { return proto.CompactTextString(m) }
func (*OfflineAwardGetReq) ProtoMessage()               {}
func (*OfflineAwardGetReq) Descriptor() ([]byte, []int) { return fileDescriptorOffline, []int{2} }

type OfflineAwardGetAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
	IsGet bool            `protobuf:"varint,2,opt,name=isGet,proto3" json:"isGet,omitempty"`
}

func (m *OfflineAwardGetAck) Reset()                    { *m = OfflineAwardGetAck{} }
func (m *OfflineAwardGetAck) String() string            { return proto.CompactTextString(m) }
func (*OfflineAwardGetAck) ProtoMessage()               {}
func (*OfflineAwardGetAck) Descriptor() ([]byte, []int) { return fileDescriptorOffline, []int{3} }

func (m *OfflineAwardGetAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *OfflineAwardGetAck) GetIsGet() bool {
	if m != nil {
		return m.IsGet
	}
	return false
}

func init() {
	proto.RegisterType((*OfflineAwardLoadReq)(nil), "pb.OfflineAwardLoadReq")
	proto.RegisterType((*OfflineAwardLoadAck)(nil), "pb.OfflineAwardLoadAck")
	proto.RegisterType((*OfflineAwardGetReq)(nil), "pb.OfflineAwardGetReq")
	proto.RegisterType((*OfflineAwardGetAck)(nil), "pb.OfflineAwardGetAck")
}
func (m *OfflineAwardLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineAwardLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OfflineAwardLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineAwardLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OfflineTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOffline(dAtA, i, uint64(m.OfflineTimes))
	}
	if m.GetExpNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOffline(dAtA, i, uint64(m.GetExpNum))
	}
	return i, nil
}

func (m *OfflineAwardGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineAwardGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *OfflineAwardGetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineAwardGetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOffline(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsGet {
		dAtA[i] = 0x10
		i++
		if m.IsGet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintOffline(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *OfflineAwardLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *OfflineAwardLoadAck) Size() (n int) {
	var l int
	_ = l
	if m.OfflineTimes != 0 {
		n += 1 + sovOffline(uint64(m.OfflineTimes))
	}
	if m.GetExpNum != 0 {
		n += 1 + sovOffline(uint64(m.GetExpNum))
	}
	return n
}

func (m *OfflineAwardGetReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *OfflineAwardGetAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovOffline(uint64(l))
	}
	if m.IsGet {
		n += 2
	}
	return n
}

func sovOffline(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOffline(x uint64) (n int) {
	return sovOffline(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OfflineAwardLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineAwardLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineAwardLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOffline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOffline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineAwardLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineAwardLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineAwardLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTimes", wireType)
			}
			m.OfflineTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTimes |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetExpNum", wireType)
			}
			m.GetExpNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetExpNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOffline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOffline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineAwardGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineAwardGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineAwardGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOffline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOffline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineAwardGetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOffline
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineAwardGetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineAwardGetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOffline
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOffline
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGet = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOffline(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOffline
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOffline(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOffline
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOffline
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOffline
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOffline
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOffline(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOffline = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOffline   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("offline.proto", fileDescriptorOffline) }

var fileDescriptorOffline = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x4f, 0x4b, 0xcb,
	0xc9, 0xcc, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x89, 0x72, 0x09, 0xfb, 0x43, 0x94, 0x38, 0x96,
	0x27, 0x16, 0xa5, 0xf8, 0xe4, 0x27, 0xa6, 0x04, 0xa5, 0x16, 0x2a, 0x85, 0x63, 0x0a, 0x3b, 0x26,
	0x67, 0x0b, 0x29, 0x71, 0xf1, 0x40, 0x0d, 0x0c, 0xc9, 0xcc, 0x4d, 0x2d, 0x96, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0e, 0x42, 0x11, 0x13, 0x92, 0xe1, 0xe2, 0x4c, 0x4f, 0x2d, 0x71, 0xad, 0x28, 0xf0,
	0x2b, 0xcd, 0x95, 0x60, 0x02, 0x2b, 0x40, 0x08, 0x28, 0x89, 0x70, 0x09, 0x21, 0x1b, 0xec, 0x9e,
	0x5a, 0x02, 0xb2, 0x2e, 0x04, 0x43, 0x14, 0x64, 0x9b, 0x06, 0x17, 0x6b, 0x7a, 0x7e, 0x7e, 0x0a,
	0xc4, 0x1a, 0x6e, 0x23, 0x21, 0xbd, 0x82, 0x24, 0x3d, 0x77, 0x90, 0x80, 0x73, 0x46, 0x62, 0x5e,
	0x7a, 0xaa, 0x5f, 0x49, 0x5a, 0x10, 0x44, 0x81, 0x90, 0x08, 0x17, 0x6b, 0x66, 0xb1, 0x7b, 0x6a,
	0x09, 0xd8, 0x3e, 0x8e, 0x20, 0x08, 0xc7, 0x49, 0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4,
	0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x69, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x72, 0x80, 0x73, 0x7a, 0x17, 0x01, 0x00, 0x00,
}
