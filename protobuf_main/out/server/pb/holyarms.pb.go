// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: holyarms.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 神兵激活
type HolyActiveReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *HolyActiveReq) Reset()                    { *m = HolyActiveReq{} }
func (m *HolyActiveReq) String() string            { return proto.CompactTextString(m) }
func (*HolyActiveReq) ProtoMessage()               {}
func (*HolyActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{0} }

func (m *HolyActiveReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HolyActiveAck struct {
	Holy *Holy `protobuf:"bytes,1,opt,name=holy" json:"holy,omitempty"`
}

func (m *HolyActiveAck) Reset()                    { *m = HolyActiveAck{} }
func (m *HolyActiveAck) String() string            { return proto.CompactTextString(m) }
func (*HolyActiveAck) ProtoMessage()               {}
func (*HolyActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{1} }

func (m *HolyActiveAck) GetHoly() *Holy {
	if m != nil {
		return m.Holy
	}
	return nil
}

// 神兵升级
type HolyUpLevelReq struct {
	Id     int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemId int32 `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
}

func (m *HolyUpLevelReq) Reset()                    { *m = HolyUpLevelReq{} }
func (m *HolyUpLevelReq) String() string            { return proto.CompactTextString(m) }
func (*HolyUpLevelReq) ProtoMessage()               {}
func (*HolyUpLevelReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{2} }

func (m *HolyUpLevelReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HolyUpLevelReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type HolyUpLevelAck struct {
	Holy *Holy `protobuf:"bytes,1,opt,name=holy" json:"holy,omitempty"`
}

func (m *HolyUpLevelAck) Reset()                    { *m = HolyUpLevelAck{} }
func (m *HolyUpLevelAck) String() string            { return proto.CompactTextString(m) }
func (*HolyUpLevelAck) ProtoMessage()               {}
func (*HolyUpLevelAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{3} }

func (m *HolyUpLevelAck) GetHoly() *Holy {
	if m != nil {
		return m.Holy
	}
	return nil
}

// 神兵技能激活
type HolySkillActiveReq struct {
	Hid int32 `protobuf:"varint,1,opt,name=hid,proto3" json:"hid,omitempty"`
	Hlv int32 `protobuf:"varint,2,opt,name=hlv,proto3" json:"hlv,omitempty"`
}

func (m *HolySkillActiveReq) Reset()                    { *m = HolySkillActiveReq{} }
func (m *HolySkillActiveReq) String() string            { return proto.CompactTextString(m) }
func (*HolySkillActiveReq) ProtoMessage()               {}
func (*HolySkillActiveReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{4} }

func (m *HolySkillActiveReq) GetHid() int32 {
	if m != nil {
		return m.Hid
	}
	return 0
}

func (m *HolySkillActiveReq) GetHlv() int32 {
	if m != nil {
		return m.Hlv
	}
	return 0
}

type HolySkillActiveAck struct {
	Holy *Holy `protobuf:"bytes,1,opt,name=holy" json:"holy,omitempty"`
}

func (m *HolySkillActiveAck) Reset()                    { *m = HolySkillActiveAck{} }
func (m *HolySkillActiveAck) String() string            { return proto.CompactTextString(m) }
func (*HolySkillActiveAck) ProtoMessage()               {}
func (*HolySkillActiveAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{5} }

func (m *HolySkillActiveAck) GetHoly() *Holy {
	if m != nil {
		return m.Holy
	}
	return nil
}

// 神兵技能升级
type HolySkillUpLvReq struct {
	Hid int32 `protobuf:"varint,1,opt,name=hid,proto3" json:"hid,omitempty"`
	Hlv int32 `protobuf:"varint,2,opt,name=hlv,proto3" json:"hlv,omitempty"`
}

func (m *HolySkillUpLvReq) Reset()                    { *m = HolySkillUpLvReq{} }
func (m *HolySkillUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*HolySkillUpLvReq) ProtoMessage()               {}
func (*HolySkillUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{6} }

func (m *HolySkillUpLvReq) GetHid() int32 {
	if m != nil {
		return m.Hid
	}
	return 0
}

func (m *HolySkillUpLvReq) GetHlv() int32 {
	if m != nil {
		return m.Hlv
	}
	return 0
}

type HolySkillUpLvAck struct {
	Holy *Holy `protobuf:"bytes,1,opt,name=holy" json:"holy,omitempty"`
}

func (m *HolySkillUpLvAck) Reset()                    { *m = HolySkillUpLvAck{} }
func (m *HolySkillUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*HolySkillUpLvAck) ProtoMessage()               {}
func (*HolySkillUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorHolyarms, []int{7} }

func (m *HolySkillUpLvAck) GetHoly() *Holy {
	if m != nil {
		return m.Holy
	}
	return nil
}

func init() {
	proto.RegisterType((*HolyActiveReq)(nil), "pb.HolyActiveReq")
	proto.RegisterType((*HolyActiveAck)(nil), "pb.HolyActiveAck")
	proto.RegisterType((*HolyUpLevelReq)(nil), "pb.HolyUpLevelReq")
	proto.RegisterType((*HolyUpLevelAck)(nil), "pb.HolyUpLevelAck")
	proto.RegisterType((*HolySkillActiveReq)(nil), "pb.HolySkillActiveReq")
	proto.RegisterType((*HolySkillActiveAck)(nil), "pb.HolySkillActiveAck")
	proto.RegisterType((*HolySkillUpLvReq)(nil), "pb.HolySkillUpLvReq")
	proto.RegisterType((*HolySkillUpLvAck)(nil), "pb.HolySkillUpLvAck")
}
func (m *HolyActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *HolyActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Holy != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Holy.Size()))
		n1, err := m.Holy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *HolyUpLevelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyUpLevelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Id))
	}
	if m.ItemId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.ItemId))
	}
	return i, nil
}

func (m *HolyUpLevelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolyUpLevelAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Holy != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Holy.Size()))
		n2, err := m.Holy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *HolySkillActiveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolySkillActiveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Hid))
	}
	if m.Hlv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Hlv))
	}
	return i, nil
}

func (m *HolySkillActiveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolySkillActiveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Holy != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Holy.Size()))
		n3, err := m.Holy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *HolySkillUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolySkillUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Hid))
	}
	if m.Hlv != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Hlv))
	}
	return i, nil
}

func (m *HolySkillUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HolySkillUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Holy != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintHolyarms(dAtA, i, uint64(m.Holy.Size()))
		n4, err := m.Holy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintHolyarms(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HolyActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHolyarms(uint64(m.Id))
	}
	return n
}

func (m *HolyActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Holy != nil {
		l = m.Holy.Size()
		n += 1 + l + sovHolyarms(uint64(l))
	}
	return n
}

func (m *HolyUpLevelReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHolyarms(uint64(m.Id))
	}
	if m.ItemId != 0 {
		n += 1 + sovHolyarms(uint64(m.ItemId))
	}
	return n
}

func (m *HolyUpLevelAck) Size() (n int) {
	var l int
	_ = l
	if m.Holy != nil {
		l = m.Holy.Size()
		n += 1 + l + sovHolyarms(uint64(l))
	}
	return n
}

func (m *HolySkillActiveReq) Size() (n int) {
	var l int
	_ = l
	if m.Hid != 0 {
		n += 1 + sovHolyarms(uint64(m.Hid))
	}
	if m.Hlv != 0 {
		n += 1 + sovHolyarms(uint64(m.Hlv))
	}
	return n
}

func (m *HolySkillActiveAck) Size() (n int) {
	var l int
	_ = l
	if m.Holy != nil {
		l = m.Holy.Size()
		n += 1 + l + sovHolyarms(uint64(l))
	}
	return n
}

func (m *HolySkillUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.Hid != 0 {
		n += 1 + sovHolyarms(uint64(m.Hid))
	}
	if m.Hlv != 0 {
		n += 1 + sovHolyarms(uint64(m.Hlv))
	}
	return n
}

func (m *HolySkillUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.Holy != nil {
		l = m.Holy.Size()
		n += 1 + l + sovHolyarms(uint64(l))
	}
	return n
}

func sovHolyarms(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHolyarms(x uint64) (n int) {
	return sovHolyarms(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HolyActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyarms
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Holy == nil {
				m.Holy = &Holy{}
			}
			if err := m.Holy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyUpLevelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyUpLevelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyUpLevelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolyUpLevelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolyUpLevelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolyUpLevelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyarms
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Holy == nil {
				m.Holy = &Holy{}
			}
			if err := m.Holy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolySkillActiveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolySkillActiveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolySkillActiveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hid", wireType)
			}
			m.Hid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hlv", wireType)
			}
			m.Hlv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hlv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolySkillActiveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolySkillActiveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolySkillActiveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyarms
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Holy == nil {
				m.Holy = &Holy{}
			}
			if err := m.Holy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolySkillUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolySkillUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolySkillUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hid", wireType)
			}
			m.Hid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hlv", wireType)
			}
			m.Hlv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hlv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HolySkillUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HolySkillUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HolySkillUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHolyarms
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Holy == nil {
				m.Holy = &Holy{}
			}
			if err := m.Holy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHolyarms(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHolyarms
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHolyarms(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHolyarms
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHolyarms
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHolyarms
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHolyarms
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHolyarms(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHolyarms = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHolyarms   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("holyarms.proto", fileDescriptorHolyarms) }

var fileDescriptorHolyarms = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xc8, 0xcf, 0xa9,
	0x4c, 0x2c, 0xca, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2,
	0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0xc9, 0x73, 0xf1, 0x7a, 0xe4, 0xe7, 0x54,
	0x3a, 0x26, 0x97, 0x64, 0x96, 0xa5, 0x06, 0xa5, 0x16, 0x0a, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x31, 0x65, 0xa6, 0x28, 0xe9, 0x22, 0x2b, 0x70, 0x4c, 0xce,
	0x16, 0x92, 0xe1, 0x62, 0x01, 0x99, 0x0a, 0x56, 0xc2, 0x6d, 0xc4, 0xa1, 0x57, 0x90, 0xa4, 0x07,
	0x52, 0x10, 0x04, 0x16, 0x55, 0xb2, 0xe0, 0xe2, 0x03, 0xf1, 0x42, 0x0b, 0x7c, 0x52, 0xcb, 0x52,
	0x73, 0xb0, 0x18, 0x28, 0x24, 0xc6, 0xc5, 0x96, 0x59, 0x92, 0x9a, 0xeb, 0x99, 0x22, 0xc1, 0x04,
	0x16, 0x83, 0xf2, 0x94, 0xf4, 0x50, 0x74, 0x12, 0x63, 0x93, 0x10, 0x88, 0x17, 0x9c, 0x9d, 0x99,
	0x93, 0x83, 0x70, 0xbe, 0x00, 0x17, 0x73, 0x06, 0xdc, 0x3a, 0x10, 0x13, 0x2c, 0x92, 0x53, 0x06,
	0xb5, 0x0c, 0xc4, 0x54, 0x32, 0xc2, 0xd0, 0x49, 0xd8, 0x36, 0x33, 0x2e, 0x01, 0xb8, 0x9e, 0xd0,
	0x02, 0x9f, 0x32, 0x62, 0xed, 0x32, 0x40, 0xd3, 0x47, 0xd0, 0x26, 0x27, 0x81, 0x13, 0x8f, 0xe4,
	0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36,
	0x70, 0x54, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3e, 0x7b, 0xf9, 0xb1, 0xce, 0x01, 0x00,
	0x00,
}
