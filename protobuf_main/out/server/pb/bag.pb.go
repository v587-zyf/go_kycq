// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bag.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BagInfoReq struct {
}

func (m *BagInfoReq) Reset()                    { *m = BagInfoReq{} }
func (m *BagInfoReq) String() string            { return proto.CompactTextString(m) }
func (*BagInfoReq) ProtoMessage()               {}
func (*BagInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{0} }

type BagInfoNtf struct {
	BagMax       int32   `protobuf:"varint,1,opt,name=bagMax,proto3" json:"bagMax,omitempty"`
	Items        []*Item `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	HaveBuyTimes int32   `protobuf:"varint,3,opt,name=haveBuyTimes,proto3" json:"haveBuyTimes,omitempty"`
}

func (m *BagInfoNtf) Reset()                    { *m = BagInfoNtf{} }
func (m *BagInfoNtf) String() string            { return proto.CompactTextString(m) }
func (*BagInfoNtf) ProtoMessage()               {}
func (*BagInfoNtf) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{1} }

func (m *BagInfoNtf) GetBagMax() int32 {
	if m != nil {
		return m.BagMax
	}
	return 0
}

func (m *BagInfoNtf) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *BagInfoNtf) GetHaveBuyTimes() int32 {
	if m != nil {
		return m.HaveBuyTimes
	}
	return 0
}

// 背包扩容
type BagSpaceAddReq struct {
}

func (m *BagSpaceAddReq) Reset()                    { *m = BagSpaceAddReq{} }
func (m *BagSpaceAddReq) String() string            { return proto.CompactTextString(m) }
func (*BagSpaceAddReq) ProtoMessage()               {}
func (*BagSpaceAddReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{2} }

type BagSpaceAddAck struct {
	BagMax int32 `protobuf:"varint,1,opt,name=bagMax,proto3" json:"bagMax,omitempty"`
}

func (m *BagSpaceAddAck) Reset()                    { *m = BagSpaceAddAck{} }
func (m *BagSpaceAddAck) String() string            { return proto.CompactTextString(m) }
func (*BagSpaceAddAck) ProtoMessage()               {}
func (*BagSpaceAddAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{3} }

func (m *BagSpaceAddAck) GetBagMax() int32 {
	if m != nil {
		return m.BagMax
	}
	return 0
}

// 背包整理
type BagSortReq struct {
}

func (m *BagSortReq) Reset()                    { *m = BagSortReq{} }
func (m *BagSortReq) String() string            { return proto.CompactTextString(m) }
func (*BagSortReq) ProtoMessage()               {}
func (*BagSortReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{4} }

type BagSortAck struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *BagSortAck) Reset()                    { *m = BagSortAck{} }
func (m *BagSortAck) String() string            { return proto.CompactTextString(m) }
func (*BagSortAck) ProtoMessage()               {}
func (*BagSortAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{5} }

func (m *BagSortAck) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// 使用宝箱
type GiftUseReq struct {
	ItemId   int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Position int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *GiftUseReq) Reset()                    { *m = GiftUseReq{} }
func (m *GiftUseReq) String() string            { return proto.CompactTextString(m) }
func (*GiftUseReq) ProtoMessage()               {}
func (*GiftUseReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{6} }

func (m *GiftUseReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *GiftUseReq) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type GiftUseAck struct {
	Result int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *GiftUseAck) Reset()                    { *m = GiftUseAck{} }
func (m *GiftUseAck) String() string            { return proto.CompactTextString(m) }
func (*GiftUseAck) ProtoMessage()               {}
func (*GiftUseAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{7} }

func (m *GiftUseAck) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

// 装备回收
type EquipRecoverReq struct {
	Positions []int32 `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
}

func (m *EquipRecoverReq) Reset()                    { *m = EquipRecoverReq{} }
func (m *EquipRecoverReq) String() string            { return proto.CompactTextString(m) }
func (*EquipRecoverReq) ProtoMessage()               {}
func (*EquipRecoverReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{8} }

func (m *EquipRecoverReq) GetPositions() []int32 {
	if m != nil {
		return m.Positions
	}
	return nil
}

type EquipRecoverAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *EquipRecoverAck) Reset()                    { *m = EquipRecoverAck{} }
func (m *EquipRecoverAck) String() string            { return proto.CompactTextString(m) }
func (*EquipRecoverAck) ProtoMessage()               {}
func (*EquipRecoverAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{9} }

func (m *EquipRecoverAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type ItemUseReq struct {
	ItemId    int32 `protobuf:"varint,1,opt,name=itemId,proto3" json:"itemId,omitempty"`
	ItemNum   int32 `protobuf:"varint,2,opt,name=itemNum,proto3" json:"itemNum,omitempty"`
	HeroIndex int32 `protobuf:"varint,3,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
}

func (m *ItemUseReq) Reset()                    { *m = ItemUseReq{} }
func (m *ItemUseReq) String() string            { return proto.CompactTextString(m) }
func (*ItemUseReq) ProtoMessage()               {}
func (*ItemUseReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{10} }

func (m *ItemUseReq) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *ItemUseReq) GetItemNum() int32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

func (m *ItemUseReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

type ItemUseAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *ItemUseAck) Reset()                    { *m = ItemUseAck{} }
func (m *ItemUseAck) String() string            { return proto.CompactTextString(m) }
func (*ItemUseAck) ProtoMessage()               {}
func (*ItemUseAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{11} }

func (m *ItemUseAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 装备销毁
type EquipDestroyReq struct {
	Positions int32 `protobuf:"varint,1,opt,name=positions,proto3" json:"positions,omitempty"`
	Count     int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *EquipDestroyReq) Reset()                    { *m = EquipDestroyReq{} }
func (m *EquipDestroyReq) String() string            { return proto.CompactTextString(m) }
func (*EquipDestroyReq) ProtoMessage()               {}
func (*EquipDestroyReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{12} }

func (m *EquipDestroyReq) GetPositions() int32 {
	if m != nil {
		return m.Positions
	}
	return 0
}

func (m *EquipDestroyReq) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type EquipDestroyAck struct {
	Goods *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
}

func (m *EquipDestroyAck) Reset()                    { *m = EquipDestroyAck{} }
func (m *EquipDestroyAck) String() string            { return proto.CompactTextString(m) }
func (*EquipDestroyAck) ProtoMessage()               {}
func (*EquipDestroyAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{13} }

func (m *EquipDestroyAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

type WarehouseInfoReq struct {
}

func (m *WarehouseInfoReq) Reset()                    { *m = WarehouseInfoReq{} }
func (m *WarehouseInfoReq) String() string            { return proto.CompactTextString(m) }
func (*WarehouseInfoReq) ProtoMessage()               {}
func (*WarehouseInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{14} }

type WarehouseInfoNtf struct {
	BagMax       int32   `protobuf:"varint,1,opt,name=bagMax,proto3" json:"bagMax,omitempty"`
	Items        []*Item `protobuf:"bytes,2,rep,name=items" json:"items,omitempty"`
	HaveBuyTimes int32   `protobuf:"varint,3,opt,name=haveBuyTimes,proto3" json:"haveBuyTimes,omitempty"`
}

func (m *WarehouseInfoNtf) Reset()                    { *m = WarehouseInfoNtf{} }
func (m *WarehouseInfoNtf) String() string            { return proto.CompactTextString(m) }
func (*WarehouseInfoNtf) ProtoMessage()               {}
func (*WarehouseInfoNtf) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{15} }

func (m *WarehouseInfoNtf) GetBagMax() int32 {
	if m != nil {
		return m.BagMax
	}
	return 0
}

func (m *WarehouseInfoNtf) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WarehouseInfoNtf) GetHaveBuyTimes() int32 {
	if m != nil {
		return m.HaveBuyTimes
	}
	return 0
}

// 仓库扩容
type WareHouseSpaceAddReq struct {
}

func (m *WareHouseSpaceAddReq) Reset()                    { *m = WareHouseSpaceAddReq{} }
func (m *WareHouseSpaceAddReq) String() string            { return proto.CompactTextString(m) }
func (*WareHouseSpaceAddReq) ProtoMessage()               {}
func (*WareHouseSpaceAddReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{16} }

type WareHouseSpaceAddAck struct {
	BagMax int32 `protobuf:"varint,1,opt,name=bagMax,proto3" json:"bagMax,omitempty"`
}

func (m *WareHouseSpaceAddAck) Reset()                    { *m = WareHouseSpaceAddAck{} }
func (m *WareHouseSpaceAddAck) String() string            { return proto.CompactTextString(m) }
func (*WareHouseSpaceAddAck) ProtoMessage()               {}
func (*WareHouseSpaceAddAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{17} }

func (m *WareHouseSpaceAddAck) GetBagMax() int32 {
	if m != nil {
		return m.BagMax
	}
	return 0
}

// 仓库移入物品
type WarehouseAddReq struct {
	Positions []int32 `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
}

func (m *WarehouseAddReq) Reset()                    { *m = WarehouseAddReq{} }
func (m *WarehouseAddReq) String() string            { return proto.CompactTextString(m) }
func (*WarehouseAddReq) ProtoMessage()               {}
func (*WarehouseAddReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{18} }

func (m *WarehouseAddReq) GetPositions() []int32 {
	if m != nil {
		return m.Positions
	}
	return nil
}

type WarehouseAddAck struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *WarehouseAddAck) Reset()                    { *m = WarehouseAddAck{} }
func (m *WarehouseAddAck) String() string            { return proto.CompactTextString(m) }
func (*WarehouseAddAck) ProtoMessage()               {}
func (*WarehouseAddAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{19} }

func (m *WarehouseAddAck) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

// 仓库移出物品
type WarehouseShiftOutReq struct {
	Positions []int32 `protobuf:"varint,1,rep,packed,name=positions" json:"positions,omitempty"`
}

func (m *WarehouseShiftOutReq) Reset()                    { *m = WarehouseShiftOutReq{} }
func (m *WarehouseShiftOutReq) String() string            { return proto.CompactTextString(m) }
func (*WarehouseShiftOutReq) ProtoMessage()               {}
func (*WarehouseShiftOutReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{20} }

func (m *WarehouseShiftOutReq) GetPositions() []int32 {
	if m != nil {
		return m.Positions
	}
	return nil
}

type WarehouseShiftOutAck struct {
	Items []*Item         `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Goods *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *WarehouseShiftOutAck) Reset()                    { *m = WarehouseShiftOutAck{} }
func (m *WarehouseShiftOutAck) String() string            { return proto.CompactTextString(m) }
func (*WarehouseShiftOutAck) ProtoMessage()               {}
func (*WarehouseShiftOutAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{21} }

func (m *WarehouseShiftOutAck) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *WarehouseShiftOutAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 仓库整理
type WarehouseSortReq struct {
}

func (m *WarehouseSortReq) Reset()                    { *m = WarehouseSortReq{} }
func (m *WarehouseSortReq) String() string            { return proto.CompactTextString(m) }
func (*WarehouseSortReq) ProtoMessage()               {}
func (*WarehouseSortReq) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{22} }

type WarehouseSortAck struct {
	Items []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *WarehouseSortAck) Reset()                    { *m = WarehouseSortAck{} }
func (m *WarehouseSortAck) String() string            { return proto.CompactTextString(m) }
func (*WarehouseSortAck) ProtoMessage()               {}
func (*WarehouseSortAck) Descriptor() ([]byte, []int) { return fileDescriptorBag, []int{23} }

func (m *WarehouseSortAck) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*BagInfoReq)(nil), "pb.BagInfoReq")
	proto.RegisterType((*BagInfoNtf)(nil), "pb.BagInfoNtf")
	proto.RegisterType((*BagSpaceAddReq)(nil), "pb.BagSpaceAddReq")
	proto.RegisterType((*BagSpaceAddAck)(nil), "pb.BagSpaceAddAck")
	proto.RegisterType((*BagSortReq)(nil), "pb.BagSortReq")
	proto.RegisterType((*BagSortAck)(nil), "pb.BagSortAck")
	proto.RegisterType((*GiftUseReq)(nil), "pb.GiftUseReq")
	proto.RegisterType((*GiftUseAck)(nil), "pb.GiftUseAck")
	proto.RegisterType((*EquipRecoverReq)(nil), "pb.EquipRecoverReq")
	proto.RegisterType((*EquipRecoverAck)(nil), "pb.EquipRecoverAck")
	proto.RegisterType((*ItemUseReq)(nil), "pb.ItemUseReq")
	proto.RegisterType((*ItemUseAck)(nil), "pb.ItemUseAck")
	proto.RegisterType((*EquipDestroyReq)(nil), "pb.EquipDestroyReq")
	proto.RegisterType((*EquipDestroyAck)(nil), "pb.EquipDestroyAck")
	proto.RegisterType((*WarehouseInfoReq)(nil), "pb.WarehouseInfoReq")
	proto.RegisterType((*WarehouseInfoNtf)(nil), "pb.WarehouseInfoNtf")
	proto.RegisterType((*WareHouseSpaceAddReq)(nil), "pb.WareHouseSpaceAddReq")
	proto.RegisterType((*WareHouseSpaceAddAck)(nil), "pb.WareHouseSpaceAddAck")
	proto.RegisterType((*WarehouseAddReq)(nil), "pb.WarehouseAddReq")
	proto.RegisterType((*WarehouseAddAck)(nil), "pb.WarehouseAddAck")
	proto.RegisterType((*WarehouseShiftOutReq)(nil), "pb.WarehouseShiftOutReq")
	proto.RegisterType((*WarehouseShiftOutAck)(nil), "pb.WarehouseShiftOutAck")
	proto.RegisterType((*WarehouseSortReq)(nil), "pb.WarehouseSortReq")
	proto.RegisterType((*WarehouseSortAck)(nil), "pb.WarehouseSortAck")
}
func (m *BagInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BagInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BagMax != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.BagMax))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HaveBuyTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.HaveBuyTimes))
	}
	return i, nil
}

func (m *BagSpaceAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagSpaceAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BagSpaceAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagSpaceAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BagMax != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.BagMax))
	}
	return i, nil
}

func (m *BagSortReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagSortReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BagSortAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BagSortAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GiftUseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftUseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
	}
	if m.Position != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Position))
	}
	return i, nil
}

func (m *GiftUseAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiftUseAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *EquipRecoverReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipRecoverReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		dAtA2 := make([]byte, len(m.Positions)*10)
		var j1 int
		for _, num1 := range m.Positions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *EquipRecoverAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipRecoverAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Goods.Size()))
		n3, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ItemUseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemUseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItemId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.ItemId))
	}
	if m.ItemNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.ItemNum))
	}
	if m.HeroIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.HeroIndex))
	}
	return i, nil
}

func (m *ItemUseAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemUseAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Goods.Size()))
		n4, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *EquipDestroyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipDestroyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Positions != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Positions))
	}
	if m.Count != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *EquipDestroyAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipDestroyAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Goods.Size()))
		n5, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *WarehouseInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WarehouseInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BagMax != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.BagMax))
	}
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.HaveBuyTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.HaveBuyTimes))
	}
	return i, nil
}

func (m *WareHouseSpaceAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WareHouseSpaceAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WareHouseSpaceAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WareHouseSpaceAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BagMax != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.BagMax))
	}
	return i, nil
}

func (m *WarehouseAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		dAtA7 := make([]byte, len(m.Positions)*10)
		var j6 int
		for _, num1 := range m.Positions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	return i, nil
}

func (m *WarehouseAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WarehouseShiftOutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseShiftOutReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		dAtA9 := make([]byte, len(m.Positions)*10)
		var j8 int
		for _, num1 := range m.Positions {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintBag(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func (m *WarehouseShiftOutAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseShiftOutAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBag(dAtA, i, uint64(m.Goods.Size()))
		n10, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *WarehouseSortReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseSortReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *WarehouseSortAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WarehouseSortAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, msg := range m.Items {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBag(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BagInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BagInfoNtf) Size() (n int) {
	var l int
	_ = l
	if m.BagMax != 0 {
		n += 1 + sovBag(uint64(m.BagMax))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if m.HaveBuyTimes != 0 {
		n += 1 + sovBag(uint64(m.HaveBuyTimes))
	}
	return n
}

func (m *BagSpaceAddReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BagSpaceAddAck) Size() (n int) {
	var l int
	_ = l
	if m.BagMax != 0 {
		n += 1 + sovBag(uint64(m.BagMax))
	}
	return n
}

func (m *BagSortReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BagSortAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *GiftUseReq) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.Position != 0 {
		n += 1 + sovBag(uint64(m.Position))
	}
	return n
}

func (m *GiftUseAck) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovBag(uint64(m.Result))
	}
	return n
}

func (m *EquipRecoverReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Positions) > 0 {
		l = 0
		for _, e := range m.Positions {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	return n
}

func (m *EquipRecoverAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *ItemUseReq) Size() (n int) {
	var l int
	_ = l
	if m.ItemId != 0 {
		n += 1 + sovBag(uint64(m.ItemId))
	}
	if m.ItemNum != 0 {
		n += 1 + sovBag(uint64(m.ItemNum))
	}
	if m.HeroIndex != 0 {
		n += 1 + sovBag(uint64(m.HeroIndex))
	}
	return n
}

func (m *ItemUseAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *EquipDestroyReq) Size() (n int) {
	var l int
	_ = l
	if m.Positions != 0 {
		n += 1 + sovBag(uint64(m.Positions))
	}
	if m.Count != 0 {
		n += 1 + sovBag(uint64(m.Count))
	}
	return n
}

func (m *EquipDestroyAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *WarehouseInfoReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WarehouseInfoNtf) Size() (n int) {
	var l int
	_ = l
	if m.BagMax != 0 {
		n += 1 + sovBag(uint64(m.BagMax))
	}
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if m.HaveBuyTimes != 0 {
		n += 1 + sovBag(uint64(m.HaveBuyTimes))
	}
	return n
}

func (m *WareHouseSpaceAddReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WareHouseSpaceAddAck) Size() (n int) {
	var l int
	_ = l
	if m.BagMax != 0 {
		n += 1 + sovBag(uint64(m.BagMax))
	}
	return n
}

func (m *WarehouseAddReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Positions) > 0 {
		l = 0
		for _, e := range m.Positions {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	return n
}

func (m *WarehouseAddAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func (m *WarehouseShiftOutReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Positions) > 0 {
		l = 0
		for _, e := range m.Positions {
			l += sovBag(uint64(e))
		}
		n += 1 + sovBag(uint64(l)) + l
	}
	return n
}

func (m *WarehouseShiftOutAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovBag(uint64(l))
	}
	return n
}

func (m *WarehouseSortReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *WarehouseSortAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovBag(uint64(l))
		}
	}
	return n
}

func sovBag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBag(x uint64) (n int) {
	return sovBag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BagInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagMax", wireType)
			}
			m.BagMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveBuyTimes", wireType)
			}
			m.HaveBuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveBuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagSpaceAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagSpaceAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagSpaceAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagSpaceAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagSpaceAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagSpaceAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagMax", wireType)
			}
			m.BagMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagSortReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagSortReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagSortReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BagSortAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BagSortAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BagSortAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftUseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftUseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftUseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiftUseAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftUseAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftUseAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipRecoverReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipRecoverReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipRecoverReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Positions = append(m.Positions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Positions = append(m.Positions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipRecoverAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipRecoverAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipRecoverAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemUseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemUseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemUseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemId", wireType)
			}
			m.ItemId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNum", wireType)
			}
			m.ItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemUseAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemUseAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemUseAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipDestroyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipDestroyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipDestroyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			m.Positions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Positions |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipDestroyAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipDestroyAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipDestroyAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagMax", wireType)
			}
			m.BagMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveBuyTimes", wireType)
			}
			m.HaveBuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveBuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WareHouseSpaceAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WareHouseSpaceAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WareHouseSpaceAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WareHouseSpaceAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WareHouseSpaceAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WareHouseSpaceAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BagMax", wireType)
			}
			m.BagMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BagMax |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Positions = append(m.Positions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Positions = append(m.Positions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseShiftOutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseShiftOutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseShiftOutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Positions = append(m.Positions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBag
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBag
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBag
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Positions = append(m.Positions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseShiftOutAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseShiftOutAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseShiftOutAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseSortReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseSortReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseSortReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WarehouseSortAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WarehouseSortAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WarehouseSortAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBag   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bag.proto", fileDescriptorBag) }

var fileDescriptorBag = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xc5, 0xa9, 0x5c, 0xda, 0xdb, 0x88, 0x46, 0x56, 0x55, 0x59, 0x15, 0xb2, 0xaa, 0x11, 0x8b,
	0x2c, 0x50, 0x2a, 0x02, 0x62, 0xc3, 0x86, 0x06, 0xaa, 0x92, 0x05, 0x41, 0x72, 0x40, 0x6c, 0x58,
	0x30, 0xb6, 0xaf, 0x1f, 0x02, 0x7b, 0x1c, 0x7b, 0x5c, 0xb5, 0x7f, 0xc2, 0x27, 0xb1, 0xe4, 0x13,
	0x50, 0xf8, 0x11, 0x34, 0x9e, 0xf1, 0x04, 0x47, 0x86, 0x24, 0x0b, 0x76, 0x39, 0x27, 0x39, 0x8f,
	0x3b, 0x73, 0x27, 0x70, 0xe8, 0xd1, 0x68, 0x94, 0x17, 0x8c, 0x33, 0xab, 0x97, 0x7b, 0x67, 0x7d,
	0x9f, 0xa5, 0x29, 0xcb, 0x24, 0x43, 0xfa, 0x00, 0x13, 0x1a, 0x4d, 0xb3, 0x90, 0xb9, 0xb8, 0x20,
	0xb1, 0x46, 0x33, 0x1e, 0x5a, 0xa7, 0xb0, 0xef, 0xd1, 0xe8, 0x2d, 0xbd, 0xb5, 0x8d, 0x73, 0x63,
	0x68, 0xba, 0x0a, 0x59, 0x0e, 0x98, 0x09, 0xc7, 0xb4, 0xb4, 0x7b, 0xe7, 0x7b, 0xc3, 0xa3, 0xf1,
	0xc1, 0x28, 0xf7, 0x46, 0x53, 0x8e, 0xa9, 0x2b, 0x69, 0x8b, 0x40, 0x3f, 0xa6, 0x37, 0x38, 0xa9,
	0xee, 0xde, 0x27, 0x29, 0x96, 0xf6, 0x5e, 0xad, 0x6e, 0x71, 0x64, 0x00, 0x0f, 0x26, 0x34, 0x9a,
	0xe7, 0xd4, 0xc7, 0xcb, 0x20, 0x10, 0xd9, 0xc3, 0x16, 0x73, 0xe9, 0x7f, 0xf9, 0x5b, 0xbe, 0xea,
	0x3c, 0x67, 0x05, 0x17, 0xba, 0xc7, 0x1a, 0x09, 0x8d, 0xee, 0x66, 0x74, 0x76, 0x23, 0x2f, 0x01,
	0xae, 0x93, 0x90, 0x7f, 0x28, 0xd1, 0xc5, 0x85, 0x48, 0x10, 0xf4, 0x34, 0x68, 0x12, 0x24, 0xb2,
	0xce, 0xe0, 0x20, 0x67, 0x65, 0xc2, 0x13, 0x96, 0xd9, 0xbd, 0xfa, 0x1b, 0x8d, 0xc9, 0x23, 0xed,
	0xa0, 0x3a, 0x16, 0x58, 0x56, 0x5f, 0x79, 0xe3, 0x20, 0x11, 0xb9, 0x80, 0xe3, 0xab, 0x45, 0x95,
	0xe4, 0x2e, 0xfa, 0xec, 0x06, 0x0b, 0x11, 0xf6, 0x10, 0x0e, 0x1b, 0x13, 0x59, 0xcf, 0x74, 0x57,
	0x04, 0x79, 0xd1, 0x16, 0x08, 0xef, 0x21, 0x98, 0x11, 0x63, 0x41, 0x59, 0x5b, 0x1f, 0x8d, 0x2d,
	0x31, 0xcb, 0xb5, 0x20, 0x5e, 0xc5, 0x34, 0x8b, 0x70, 0xc6, 0x43, 0x57, 0xfe, 0x80, 0x7c, 0x02,
	0x10, 0x43, 0x6e, 0x98, 0xca, 0x86, 0xfb, 0xe2, 0xd3, 0xac, 0x4a, 0xd5, 0x50, 0x0d, 0x14, 0xd5,
	0x62, 0x2c, 0xd8, 0x34, 0x0b, 0xf0, 0x56, 0x5d, 0xd7, 0x8a, 0x20, 0xcf, 0xb5, 0xfb, 0x6e, 0xad,
	0xae, 0xd4, 0x48, 0xaf, 0xb1, 0xe4, 0x05, 0xbb, 0xeb, 0x38, 0x03, 0xa3, 0x75, 0x06, 0xd6, 0x09,
	0x98, 0x3e, 0xab, 0x32, 0xae, 0xea, 0x49, 0xa0, 0x4f, 0x46, 0xd9, 0xec, 0xd6, 0xc1, 0x82, 0xc1,
	0x47, 0x5a, 0x60, 0xcc, 0xaa, 0x12, 0x9b, 0x2d, 0xcf, 0xd6, 0xb8, 0xff, 0xbd, 0xeb, 0xa7, 0x70,
	0x22, 0xf2, 0xde, 0x88, 0xbc, 0x3f, 0x37, 0x7e, 0xd4, 0xc1, 0xff, 0x6b, 0xef, 0x2f, 0xe0, 0x58,
	0xf7, 0x96, 0x16, 0x1b, 0x76, 0xea, 0x49, 0x5b, 0xb0, 0xcd, 0xfb, 0x78, 0x26, 0x3b, 0xd5, 0x92,
	0x79, 0x9c, 0x84, 0xfc, 0x5d, 0xc5, 0x37, 0x07, 0x7d, 0xee, 0x50, 0x6d, 0x91, 0xb6, 0xba, 0xc7,
	0xde, 0x2e, 0xf7, 0xd8, 0xbc, 0xfc, 0xf1, 0x1a, 0xb7, 0x45, 0xe2, 0x64, 0xf0, 0x7d, 0xe9, 0x18,
	0x3f, 0x96, 0x8e, 0xf1, 0x73, 0xe9, 0x18, 0xdf, 0x7e, 0x39, 0xf7, 0xbc, 0xfd, 0xfa, 0x8f, 0xf0,
	0xe9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x23, 0xa9, 0xcc, 0x27, 0x05, 0x00, 0x00,
}
