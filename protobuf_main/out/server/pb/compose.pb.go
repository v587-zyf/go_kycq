// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compose.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 合成
type ComposeReq struct {
	HeroIndex  int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	SubId      int32 `protobuf:"varint,2,opt,name=subId,proto3" json:"subId,omitempty"`
	ComposeNum int32 `protobuf:"varint,3,opt,name=composeNum,proto3" json:"composeNum,omitempty"`
}

func (m *ComposeReq) Reset()                    { *m = ComposeReq{} }
func (m *ComposeReq) String() string            { return proto.CompactTextString(m) }
func (*ComposeReq) ProtoMessage()               {}
func (*ComposeReq) Descriptor() ([]byte, []int) { return fileDescriptorCompose, []int{0} }

func (m *ComposeReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ComposeReq) GetSubId() int32 {
	if m != nil {
		return m.SubId
	}
	return 0
}

func (m *ComposeReq) GetComposeNum() int32 {
	if m != nil {
		return m.ComposeNum
	}
	return 0
}

type ComposeAck struct {
	HeroIndex int32           `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Goods     *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
}

func (m *ComposeAck) Reset()                    { *m = ComposeAck{} }
func (m *ComposeAck) String() string            { return proto.CompactTextString(m) }
func (*ComposeAck) ProtoMessage()               {}
func (*ComposeAck) Descriptor() ([]byte, []int) { return fileDescriptorCompose, []int{1} }

func (m *ComposeAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *ComposeAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 合成装备
type ComposeEquipReq struct {
	ComposeEquipSubId int32 `protobuf:"varint,1,opt,name=composeEquipSubId,proto3" json:"composeEquipSubId,omitempty"`
	IsLuckyStone      bool  `protobuf:"varint,2,opt,name=isLuckyStone,proto3" json:"isLuckyStone,omitempty"`
	BigLuckyStone     bool  `protobuf:"varint,3,opt,name=bigLuckyStone,proto3" json:"bigLuckyStone,omitempty"`
}

func (m *ComposeEquipReq) Reset()                    { *m = ComposeEquipReq{} }
func (m *ComposeEquipReq) String() string            { return proto.CompactTextString(m) }
func (*ComposeEquipReq) ProtoMessage()               {}
func (*ComposeEquipReq) Descriptor() ([]byte, []int) { return fileDescriptorCompose, []int{2} }

func (m *ComposeEquipReq) GetComposeEquipSubId() int32 {
	if m != nil {
		return m.ComposeEquipSubId
	}
	return 0
}

func (m *ComposeEquipReq) GetIsLuckyStone() bool {
	if m != nil {
		return m.IsLuckyStone
	}
	return false
}

func (m *ComposeEquipReq) GetBigLuckyStone() bool {
	if m != nil {
		return m.BigLuckyStone
	}
	return false
}

type ComposeEquipAck struct {
	ComposeEquipSubId int32           `protobuf:"varint,1,opt,name=composeEquipSubId,proto3" json:"composeEquipSubId,omitempty"`
	IsLuckyStone      bool            `protobuf:"varint,2,opt,name=isLuckyStone,proto3" json:"isLuckyStone,omitempty"`
	BigLuckyStone     bool            `protobuf:"varint,3,opt,name=bigLuckyStone,proto3" json:"bigLuckyStone,omitempty"`
	Goods             *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *ComposeEquipAck) Reset()                    { *m = ComposeEquipAck{} }
func (m *ComposeEquipAck) String() string            { return proto.CompactTextString(m) }
func (*ComposeEquipAck) ProtoMessage()               {}
func (*ComposeEquipAck) Descriptor() ([]byte, []int) { return fileDescriptorCompose, []int{3} }

func (m *ComposeEquipAck) GetComposeEquipSubId() int32 {
	if m != nil {
		return m.ComposeEquipSubId
	}
	return 0
}

func (m *ComposeEquipAck) GetIsLuckyStone() bool {
	if m != nil {
		return m.IsLuckyStone
	}
	return false
}

func (m *ComposeEquipAck) GetBigLuckyStone() bool {
	if m != nil {
		return m.BigLuckyStone
	}
	return false
}

func (m *ComposeEquipAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func init() {
	proto.RegisterType((*ComposeReq)(nil), "pb.ComposeReq")
	proto.RegisterType((*ComposeAck)(nil), "pb.ComposeAck")
	proto.RegisterType((*ComposeEquipReq)(nil), "pb.ComposeEquipReq")
	proto.RegisterType((*ComposeEquipAck)(nil), "pb.ComposeEquipAck")
}
func (m *ComposeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComposeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.HeroIndex))
	}
	if m.SubId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.SubId))
	}
	if m.ComposeNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.ComposeNum))
	}
	return i, nil
}

func (m *ComposeAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComposeAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ComposeEquipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComposeEquipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ComposeEquipSubId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.ComposeEquipSubId))
	}
	if m.IsLuckyStone {
		dAtA[i] = 0x10
		i++
		if m.IsLuckyStone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BigLuckyStone {
		dAtA[i] = 0x18
		i++
		if m.BigLuckyStone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ComposeEquipAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComposeEquipAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ComposeEquipSubId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.ComposeEquipSubId))
	}
	if m.IsLuckyStone {
		dAtA[i] = 0x10
		i++
		if m.IsLuckyStone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BigLuckyStone {
		dAtA[i] = 0x18
		i++
		if m.BigLuckyStone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompose(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintCompose(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ComposeReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovCompose(uint64(m.HeroIndex))
	}
	if m.SubId != 0 {
		n += 1 + sovCompose(uint64(m.SubId))
	}
	if m.ComposeNum != 0 {
		n += 1 + sovCompose(uint64(m.ComposeNum))
	}
	return n
}

func (m *ComposeAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovCompose(uint64(m.HeroIndex))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovCompose(uint64(l))
	}
	return n
}

func (m *ComposeEquipReq) Size() (n int) {
	var l int
	_ = l
	if m.ComposeEquipSubId != 0 {
		n += 1 + sovCompose(uint64(m.ComposeEquipSubId))
	}
	if m.IsLuckyStone {
		n += 2
	}
	if m.BigLuckyStone {
		n += 2
	}
	return n
}

func (m *ComposeEquipAck) Size() (n int) {
	var l int
	_ = l
	if m.ComposeEquipSubId != 0 {
		n += 1 + sovCompose(uint64(m.ComposeEquipSubId))
	}
	if m.IsLuckyStone {
		n += 2
	}
	if m.BigLuckyStone {
		n += 2
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovCompose(uint64(l))
	}
	return n
}

func sovCompose(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompose(x uint64) (n int) {
	return sovCompose(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComposeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComposeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComposeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubId", wireType)
			}
			m.SubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeNum", wireType)
			}
			m.ComposeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComposeNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComposeAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComposeAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComposeAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompose
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComposeEquipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComposeEquipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComposeEquipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeEquipSubId", wireType)
			}
			m.ComposeEquipSubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComposeEquipSubId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLuckyStone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLuckyStone = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLuckyStone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigLuckyStone = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCompose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComposeEquipAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComposeEquipAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComposeEquipAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComposeEquipSubId", wireType)
			}
			m.ComposeEquipSubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComposeEquipSubId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLuckyStone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLuckyStone = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigLuckyStone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BigLuckyStone = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompose
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompose(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompose
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompose
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompose
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompose(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompose = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompose   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("compose.proto", fileDescriptorCompose) }

var fileDescriptorCompose = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0x2d,
	0xc8, 0x2f, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x88, 0x28, 0x25, 0x70, 0x71, 0x39, 0x43, 0x94, 0x04, 0xa5,
	0x16, 0x0a, 0xc9, 0x70, 0x71, 0x66, 0xa4, 0x16, 0xe5, 0x7b, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30,
	0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0x44, 0xb8, 0x58, 0x8b, 0x4b, 0x93, 0x3c, 0x53,
	0x24, 0x98, 0xc0, 0x32, 0x10, 0x8e, 0x90, 0x1c, 0x17, 0x17, 0xd4, 0x12, 0xbf, 0xd2, 0x5c, 0x09,
	0x66, 0xb0, 0x14, 0x92, 0x88, 0x52, 0x08, 0xdc, 0x06, 0xc7, 0xe4, 0x6c, 0x02, 0x36, 0x68, 0x70,
	0xb1, 0xa6, 0xe7, 0xe7, 0xa7, 0x14, 0x83, 0x6d, 0xe0, 0x36, 0x12, 0xd2, 0x2b, 0x48, 0xd2, 0x73,
	0x07, 0x09, 0x38, 0x67, 0x24, 0xe6, 0xa5, 0xa7, 0xfa, 0x95, 0xa4, 0x05, 0x41, 0x14, 0x28, 0x75,
	0x32, 0x72, 0xf1, 0x43, 0x8d, 0x75, 0x2d, 0x2c, 0xcd, 0x2c, 0x00, 0xb9, 0x5e, 0x87, 0x4b, 0x30,
	0x19, 0x49, 0x28, 0x18, 0xec, 0x56, 0x88, 0x1d, 0x98, 0x12, 0x42, 0x4a, 0x5c, 0x3c, 0x99, 0xc5,
	0x3e, 0xa5, 0xc9, 0xd9, 0x95, 0xc1, 0x25, 0xf9, 0x79, 0xa9, 0x60, 0x2b, 0x39, 0x82, 0x50, 0xc4,
	0x84, 0x54, 0xb8, 0x78, 0x93, 0x32, 0xd3, 0x91, 0x14, 0x31, 0x83, 0x15, 0xa1, 0x0a, 0x2a, 0x6d,
	0x46, 0x73, 0x0b, 0xc8, 0x9f, 0x03, 0xe4, 0x16, 0x44, 0x08, 0xb2, 0x10, 0x08, 0x41, 0x27, 0x81,
	0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39,
	0x86, 0x24, 0x36, 0x70, 0x92, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x12, 0x84, 0x71, 0x05,
	0x35, 0x02, 0x00, 0x00,
}
