// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dragonEquip.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 龙器升级
type DragonEquipUpLvReq struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *DragonEquipUpLvReq) Reset()                    { *m = DragonEquipUpLvReq{} }
func (m *DragonEquipUpLvReq) String() string            { return proto.CompactTextString(m) }
func (*DragonEquipUpLvReq) ProtoMessage()               {}
func (*DragonEquipUpLvReq) Descriptor() ([]byte, []int) { return fileDescriptorDragonEquip, []int{0} }

func (m *DragonEquipUpLvReq) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *DragonEquipUpLvReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DragonEquipUpLvAck struct {
	HeroIndex int32 `protobuf:"varint,1,opt,name=heroIndex,proto3" json:"heroIndex,omitempty"`
	Id        int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Lv        int32 `protobuf:"varint,3,opt,name=lv,proto3" json:"lv,omitempty"`
}

func (m *DragonEquipUpLvAck) Reset()                    { *m = DragonEquipUpLvAck{} }
func (m *DragonEquipUpLvAck) String() string            { return proto.CompactTextString(m) }
func (*DragonEquipUpLvAck) ProtoMessage()               {}
func (*DragonEquipUpLvAck) Descriptor() ([]byte, []int) { return fileDescriptorDragonEquip, []int{1} }

func (m *DragonEquipUpLvAck) GetHeroIndex() int32 {
	if m != nil {
		return m.HeroIndex
	}
	return 0
}

func (m *DragonEquipUpLvAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DragonEquipUpLvAck) GetLv() int32 {
	if m != nil {
		return m.Lv
	}
	return 0
}

func init() {
	proto.RegisterType((*DragonEquipUpLvReq)(nil), "pb.DragonEquipUpLvReq")
	proto.RegisterType((*DragonEquipUpLvAck)(nil), "pb.DragonEquipUpLvAck")
}
func (m *DragonEquipUpLvReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DragonEquipUpLvReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDragonEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDragonEquip(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *DragonEquipUpLvAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DragonEquipUpLvAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HeroIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDragonEquip(dAtA, i, uint64(m.HeroIndex))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDragonEquip(dAtA, i, uint64(m.Id))
	}
	if m.Lv != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDragonEquip(dAtA, i, uint64(m.Lv))
	}
	return i, nil
}

func encodeVarintDragonEquip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DragonEquipUpLvReq) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovDragonEquip(uint64(m.HeroIndex))
	}
	if m.Id != 0 {
		n += 1 + sovDragonEquip(uint64(m.Id))
	}
	return n
}

func (m *DragonEquipUpLvAck) Size() (n int) {
	var l int
	_ = l
	if m.HeroIndex != 0 {
		n += 1 + sovDragonEquip(uint64(m.HeroIndex))
	}
	if m.Id != 0 {
		n += 1 + sovDragonEquip(uint64(m.Id))
	}
	if m.Lv != 0 {
		n += 1 + sovDragonEquip(uint64(m.Lv))
	}
	return n
}

func sovDragonEquip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDragonEquip(x uint64) (n int) {
	return sovDragonEquip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DragonEquipUpLvReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDragonEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DragonEquipUpLvReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DragonEquipUpLvReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDragonEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDragonEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DragonEquipUpLvAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDragonEquip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DragonEquipUpLvAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DragonEquipUpLvAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeroIndex", wireType)
			}
			m.HeroIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeroIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lv", wireType)
			}
			m.Lv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDragonEquip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDragonEquip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDragonEquip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDragonEquip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDragonEquip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDragonEquip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDragonEquip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDragonEquip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDragonEquip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDragonEquip   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dragonEquip.proto", fileDescriptorDragonEquip) }

var fileDescriptorDragonEquip = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x29, 0x4a, 0x4c,
	0xcf, 0xcf, 0x73, 0x2d, 0x2c, 0xcd, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a,
	0x48, 0x52, 0x72, 0xe2, 0x12, 0x72, 0x41, 0x48, 0x84, 0x16, 0xf8, 0x94, 0x05, 0xa5, 0x16, 0x0a,
	0xc9, 0x70, 0x71, 0x66, 0xa4, 0x16, 0xe5, 0x7b, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0x21, 0x04, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x98, 0xc0, 0xc2, 0x4c,
	0x99, 0x29, 0x4a, 0x41, 0x18, 0x66, 0x38, 0x26, 0x67, 0x93, 0x66, 0x06, 0x88, 0x9f, 0x53, 0x26,
	0xc1, 0x0c, 0xe1, 0xe7, 0x94, 0x39, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0x1d, 0x6d, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0xae, 0x75, 0x3b, 0x6d, 0xc9, 0x00, 0x00, 0x00,
}
