// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: friend.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 好友列表
type FriendListReq struct {
}

func (m *FriendListReq) Reset()                    { *m = FriendListReq{} }
func (m *FriendListReq) String() string            { return proto.CompactTextString(m) }
func (*FriendListReq) ProtoMessage()               {}
func (*FriendListReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{0} }

type FriendListAck struct {
	FriendList []*FriendInfo `protobuf:"bytes,1,rep,name=friendList" json:"friendList,omitempty"`
}

func (m *FriendListAck) Reset()                    { *m = FriendListAck{} }
func (m *FriendListAck) String() string            { return proto.CompactTextString(m) }
func (*FriendListAck) ProtoMessage()               {}
func (*FriendListAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{1} }

func (m *FriendListAck) GetFriendList() []*FriendInfo {
	if m != nil {
		return m.FriendList
	}
	return nil
}

// 加好友
type FriendAddReq struct {
	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendAddReq) Reset()                    { *m = FriendAddReq{} }
func (m *FriendAddReq) String() string            { return proto.CompactTextString(m) }
func (*FriendAddReq) ProtoMessage()               {}
func (*FriendAddReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{2} }

func (m *FriendAddReq) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type FriendAddAck struct {
	FriendInfo []*FriendInfo `protobuf:"bytes,1,rep,name=friendInfo" json:"friendInfo,omitempty"`
}

func (m *FriendAddAck) Reset()                    { *m = FriendAddAck{} }
func (m *FriendAddAck) String() string            { return proto.CompactTextString(m) }
func (*FriendAddAck) ProtoMessage()               {}
func (*FriendAddAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{3} }

func (m *FriendAddAck) GetFriendInfo() []*FriendInfo {
	if m != nil {
		return m.FriendInfo
	}
	return nil
}

// 删除好友
type FriendDelReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendDelReq) Reset()                    { *m = FriendDelReq{} }
func (m *FriendDelReq) String() string            { return proto.CompactTextString(m) }
func (*FriendDelReq) ProtoMessage()               {}
func (*FriendDelReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{4} }

func (m *FriendDelReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendDelAck struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendDelAck) Reset()                    { *m = FriendDelAck{} }
func (m *FriendDelAck) String() string            { return proto.CompactTextString(m) }
func (*FriendDelAck) ProtoMessage()               {}
func (*FriendDelAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{5} }

func (m *FriendDelAck) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 拉黑好友
type FriendBlockAddReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendBlockAddReq) Reset()                    { *m = FriendBlockAddReq{} }
func (m *FriendBlockAddReq) String() string            { return proto.CompactTextString(m) }
func (*FriendBlockAddReq) ProtoMessage()               {}
func (*FriendBlockAddReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{6} }

func (m *FriendBlockAddReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendBlockAddAck struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendBlockAddAck) Reset()                    { *m = FriendBlockAddAck{} }
func (m *FriendBlockAddAck) String() string            { return proto.CompactTextString(m) }
func (*FriendBlockAddAck) ProtoMessage()               {}
func (*FriendBlockAddAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{7} }

func (m *FriendBlockAddAck) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// 搜索好友
type FriendSearchReq struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FriendSearchReq) Reset()                    { *m = FriendSearchReq{} }
func (m *FriendSearchReq) String() string            { return proto.CompactTextString(m) }
func (*FriendSearchReq) ProtoMessage()               {}
func (*FriendSearchReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{8} }

func (m *FriendSearchReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FriendSearchAck struct {
	FriendList []*FriendInfo `protobuf:"bytes,1,rep,name=friendList" json:"friendList,omitempty"`
}

func (m *FriendSearchAck) Reset()                    { *m = FriendSearchAck{} }
func (m *FriendSearchAck) String() string            { return proto.CompactTextString(m) }
func (*FriendSearchAck) ProtoMessage()               {}
func (*FriendSearchAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{9} }

func (m *FriendSearchAck) GetFriendList() []*FriendInfo {
	if m != nil {
		return m.FriendList
	}
	return nil
}

// 黑名单列表
type FriendBlockListReq struct {
}

func (m *FriendBlockListReq) Reset()                    { *m = FriendBlockListReq{} }
func (m *FriendBlockListReq) String() string            { return proto.CompactTextString(m) }
func (*FriendBlockListReq) ProtoMessage()               {}
func (*FriendBlockListReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{10} }

type FriendBlockListAck struct {
	FriendList []*FriendInfo `protobuf:"bytes,1,rep,name=friendList" json:"friendList,omitempty"`
}

func (m *FriendBlockListAck) Reset()                    { *m = FriendBlockListAck{} }
func (m *FriendBlockListAck) String() string            { return proto.CompactTextString(m) }
func (*FriendBlockListAck) ProtoMessage()               {}
func (*FriendBlockListAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{11} }

func (m *FriendBlockListAck) GetFriendList() []*FriendInfo {
	if m != nil {
		return m.FriendList
	}
	return nil
}

// 解除黑名单
type FriendBlockDelReq struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendBlockDelReq) Reset()                    { *m = FriendBlockDelReq{} }
func (m *FriendBlockDelReq) String() string            { return proto.CompactTextString(m) }
func (*FriendBlockDelReq) ProtoMessage()               {}
func (*FriendBlockDelReq) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{12} }

func (m *FriendBlockDelReq) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendBlockDelAck struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FriendBlockDelAck) Reset()                    { *m = FriendBlockDelAck{} }
func (m *FriendBlockDelAck) String() string            { return proto.CompactTextString(m) }
func (*FriendBlockDelAck) ProtoMessage()               {}
func (*FriendBlockDelAck) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{13} }

func (m *FriendBlockDelAck) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FriendInfo struct {
	UserInfo *BriefUserInfo `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	IsOnline bool           `protobuf:"varint,2,opt,name=isOnline,proto3" json:"isOnline,omitempty"`
	OutTime  int64          `protobuf:"varint,3,opt,name=outTime,proto3" json:"outTime,omitempty"`
	MsgLog   []*MsgLog      `protobuf:"bytes,4,rep,name=msgLog" json:"msgLog,omitempty"`
}

func (m *FriendInfo) Reset()                    { *m = FriendInfo{} }
func (m *FriendInfo) String() string            { return proto.CompactTextString(m) }
func (*FriendInfo) ProtoMessage()               {}
func (*FriendInfo) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{14} }

func (m *FriendInfo) GetUserInfo() *BriefUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *FriendInfo) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *FriendInfo) GetOutTime() int64 {
	if m != nil {
		return m.OutTime
	}
	return 0
}

func (m *FriendInfo) GetMsgLog() []*MsgLog {
	if m != nil {
		return m.MsgLog
	}
	return nil
}

type MsgLog struct {
	Msg  string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Time int64  `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	IsMy bool   `protobuf:"varint,3,opt,name=isMy,proto3" json:"isMy,omitempty"`
}

func (m *MsgLog) Reset()                    { *m = MsgLog{} }
func (m *MsgLog) String() string            { return proto.CompactTextString(m) }
func (*MsgLog) ProtoMessage()               {}
func (*MsgLog) Descriptor() ([]byte, []int) { return fileDescriptorFriend, []int{15} }

func (m *MsgLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MsgLog) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MsgLog) GetIsMy() bool {
	if m != nil {
		return m.IsMy
	}
	return false
}

func init() {
	proto.RegisterType((*FriendListReq)(nil), "pb.FriendListReq")
	proto.RegisterType((*FriendListAck)(nil), "pb.FriendListAck")
	proto.RegisterType((*FriendAddReq)(nil), "pb.FriendAddReq")
	proto.RegisterType((*FriendAddAck)(nil), "pb.FriendAddAck")
	proto.RegisterType((*FriendDelReq)(nil), "pb.FriendDelReq")
	proto.RegisterType((*FriendDelAck)(nil), "pb.FriendDelAck")
	proto.RegisterType((*FriendBlockAddReq)(nil), "pb.FriendBlockAddReq")
	proto.RegisterType((*FriendBlockAddAck)(nil), "pb.FriendBlockAddAck")
	proto.RegisterType((*FriendSearchReq)(nil), "pb.FriendSearchReq")
	proto.RegisterType((*FriendSearchAck)(nil), "pb.FriendSearchAck")
	proto.RegisterType((*FriendBlockListReq)(nil), "pb.FriendBlockListReq")
	proto.RegisterType((*FriendBlockListAck)(nil), "pb.FriendBlockListAck")
	proto.RegisterType((*FriendBlockDelReq)(nil), "pb.FriendBlockDelReq")
	proto.RegisterType((*FriendBlockDelAck)(nil), "pb.FriendBlockDelAck")
	proto.RegisterType((*FriendInfo)(nil), "pb.FriendInfo")
	proto.RegisterType((*MsgLog)(nil), "pb.MsgLog")
}
func (m *FriendListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FriendListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, msg := range m.FriendList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFriend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFriend(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	return i, nil
}

func (m *FriendAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendInfo) > 0 {
		for _, msg := range m.FriendInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFriend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendDelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FriendDelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendDelAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FriendBlockAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBlockAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FriendBlockAddAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBlockAddAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FriendSearchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendSearchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFriend(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *FriendSearchAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendSearchAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, msg := range m.FriendList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFriend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendBlockListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBlockListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FriendBlockListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBlockListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, msg := range m.FriendList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFriend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FriendBlockDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBlockDelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FriendBlockDelAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendBlockDelAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FriendInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.UserInfo.Size()))
		n1, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.IsOnline {
		dAtA[i] = 0x10
		i++
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.OutTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.OutTime))
	}
	if len(m.MsgLog) > 0 {
		for _, msg := range m.MsgLog {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFriend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MsgLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFriend(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFriend(dAtA, i, uint64(m.Time))
	}
	if m.IsMy {
		dAtA[i] = 0x18
		i++
		if m.IsMy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintFriend(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FriendListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FriendListAck) Size() (n int) {
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, e := range m.FriendList {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	return n
}

func (m *FriendAddReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *FriendAddAck) Size() (n int) {
	var l int
	_ = l
	if len(m.FriendInfo) > 0 {
		for _, e := range m.FriendInfo {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	return n
}

func (m *FriendDelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFriend(uint64(m.UserId))
	}
	return n
}

func (m *FriendDelAck) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFriend(uint64(m.UserId))
	}
	return n
}

func (m *FriendBlockAddReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFriend(uint64(m.UserId))
	}
	return n
}

func (m *FriendBlockAddAck) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFriend(uint64(m.UserId))
	}
	return n
}

func (m *FriendSearchReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	return n
}

func (m *FriendSearchAck) Size() (n int) {
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, e := range m.FriendList {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	return n
}

func (m *FriendBlockListReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FriendBlockListAck) Size() (n int) {
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for _, e := range m.FriendList {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	return n
}

func (m *FriendBlockDelReq) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFriend(uint64(m.UserId))
	}
	return n
}

func (m *FriendBlockDelAck) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFriend(uint64(m.UserId))
	}
	return n
}

func (m *FriendInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovFriend(uint64(l))
	}
	if m.IsOnline {
		n += 2
	}
	if m.OutTime != 0 {
		n += 1 + sovFriend(uint64(m.OutTime))
	}
	if len(m.MsgLog) > 0 {
		for _, e := range m.MsgLog {
			l = e.Size()
			n += 1 + l + sovFriend(uint64(l))
		}
	}
	return n
}

func (m *MsgLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFriend(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovFriend(uint64(m.Time))
	}
	if m.IsMy {
		n += 2
	}
	return n
}

func sovFriend(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFriend(x uint64) (n int) {
	return sovFriend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FriendListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendList = append(m.FriendList, &FriendInfo{})
			if err := m.FriendList[len(m.FriendList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendInfo = append(m.FriendInfo, &FriendInfo{})
			if err := m.FriendInfo[len(m.FriendInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendDelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendDelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendDelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBlockAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBlockAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBlockAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBlockAddAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBlockAddAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBlockAddAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendSearchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendSearchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendSearchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendSearchAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendSearchAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendSearchAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendList = append(m.FriendList, &FriendInfo{})
			if err := m.FriendList[len(m.FriendList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBlockListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBlockListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBlockListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBlockListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBlockListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBlockListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendList = append(m.FriendList, &FriendInfo{})
			if err := m.FriendList[len(m.FriendList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBlockDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBlockDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBlockDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendBlockDelAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendBlockDelAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendBlockDelAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &BriefUserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTime", wireType)
			}
			m.OutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgLog = append(m.MsgLog, &MsgLog{})
			if err := m.MsgLog[len(m.MsgLog)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFriend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFriend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFriend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFriend
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFriend
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFriend(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFriend = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFriend   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("friend.proto", fileDescriptorFriend) }

var fileDescriptorFriend = []byte{
	// 381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0xff, 0x69, 0x4a, 0xfe, 0x78, 0x5b, 0x6d, 0x3b, 0x88, 0x84, 0x2e, 0x42, 0x09, 0x28,
	0x01, 0x31, 0x8b, 0xba, 0x57, 0x1a, 0x8a, 0x50, 0x68, 0x11, 0x46, 0x7d, 0x80, 0x36, 0x99, 0xd4,
	0xd0, 0x26, 0xd3, 0x26, 0xe9, 0xc2, 0x07, 0x11, 0x7c, 0x24, 0x97, 0x3e, 0x82, 0xd4, 0x17, 0x91,
	0x99, 0x49, 0xd3, 0x94, 0x6a, 0x84, 0xee, 0xee, 0x9c, 0xfb, 0x71, 0xce, 0xcc, 0xbd, 0x09, 0xd4,
	0xfd, 0x38, 0xa0, 0x91, 0x67, 0x2f, 0x62, 0x96, 0x32, 0x5c, 0x59, 0x4c, 0xda, 0x75, 0x97, 0x85,
	0x21, 0x8b, 0xa4, 0x62, 0x36, 0xe0, 0xf8, 0x4e, 0x10, 0xc3, 0x20, 0x49, 0x09, 0x5d, 0x9a, 0xb7,
	0x45, 0xa1, 0xe7, 0xce, 0xb0, 0x0d, 0xe0, 0xe7, 0x82, 0x8e, 0x3a, 0x8a, 0x55, 0xeb, 0x9e, 0xd8,
	0x8b, 0x89, 0x2d, 0xb1, 0x41, 0xe4, 0x33, 0x52, 0x20, 0xcc, 0x0b, 0xa8, 0xcb, 0x4e, 0xcf, 0xf3,
	0x08, 0x5d, 0xe2, 0x33, 0x50, 0x57, 0x09, 0x8d, 0x07, 0x9e, 0x8e, 0x3a, 0xc8, 0x3a, 0x22, 0xd9,
	0xc9, 0xbc, 0x29, 0x70, 0x3b, 0x39, 0xdc, 0xb1, 0x3c, 0x87, 0xd7, 0xdb, 0x9c, 0x3e, 0x9d, 0xef,
	0xe7, 0x28, 0x79, 0x4e, 0x91, 0xe3, 0x39, 0xbf, 0x71, 0x97, 0xd0, 0x92, 0x9c, 0x33, 0x67, 0xee,
	0xec, 0xc7, 0xcb, 0x97, 0xc0, 0x65, 0xce, 0xe7, 0xd0, 0x90, 0xf0, 0x03, 0x1d, 0xc7, 0xee, 0x33,
	0xf7, 0xc5, 0x50, 0x8d, 0xc6, 0x21, 0xcd, 0x46, 0x22, 0x6a, 0xb3, 0xb7, 0x8b, 0x1d, 0x32, 0xfb,
	0x53, 0xc0, 0x85, 0x6b, 0x6d, 0x56, 0xda, 0xdf, 0x53, 0x0f, 0xf1, 0xde, 0x7d, 0xf2, 0x1f, 0x43,
	0xdf, 0x83, 0xcb, 0xe6, 0xf3, 0x8a, 0x00, 0xb6, 0xa1, 0xf8, 0x0a, 0x34, 0xd1, 0x90, 0x9f, 0x01,
	0xb2, 0x6a, 0xdd, 0x16, 0xbf, 0x96, 0x13, 0x07, 0xd4, 0x7f, 0xca, 0x1a, 0x24, 0x47, 0x70, 0x1b,
	0xb4, 0x20, 0xb9, 0x8f, 0xe6, 0x41, 0x44, 0xf5, 0x4a, 0x07, 0x59, 0x1a, 0xc9, 0xcf, 0x58, 0x87,
	0xff, 0x6c, 0x95, 0x3e, 0x06, 0x21, 0xd5, 0x15, 0x11, 0xb9, 0x39, 0x62, 0x13, 0xd4, 0x30, 0x99,
	0x0e, 0xd9, 0x54, 0xaf, 0x8a, 0x97, 0x03, 0x8f, 0x18, 0x09, 0x85, 0x64, 0x1d, 0xd3, 0x01, 0x55,
	0x2a, 0xb8, 0x09, 0x4a, 0x98, 0x4c, 0xb3, 0x6d, 0xf1, 0x92, 0x2f, 0x30, 0xe5, 0xb6, 0x15, 0x61,
	0x2b, 0x6a, 0xae, 0x05, 0xc9, 0xe8, 0x45, 0x44, 0x69, 0x44, 0xd4, 0x4e, 0xf3, 0x7d, 0x6d, 0xa0,
	0x8f, 0xb5, 0x81, 0x3e, 0xd7, 0x06, 0x7a, 0xfb, 0x32, 0xfe, 0x4d, 0x54, 0xf1, 0xe3, 0x5d, 0x7f,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x64, 0x78, 0x24, 0x9a, 0x03, 0x00, 0x00,
}
