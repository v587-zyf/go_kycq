// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: expStage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 进入战斗
type ExpStageFightReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *ExpStageFightReq) Reset()                    { *m = ExpStageFightReq{} }
func (m *ExpStageFightReq) String() string            { return proto.CompactTextString(m) }
func (*ExpStageFightReq) ProtoMessage()               {}
func (*ExpStageFightReq) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{0} }

func (m *ExpStageFightReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

// 获得经验后减少次数
type ExpStageDareNumNtf struct {
	DareNum int32 `protobuf:"varint,1,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
}

func (m *ExpStageDareNumNtf) Reset()                    { *m = ExpStageDareNumNtf{} }
func (m *ExpStageDareNumNtf) String() string            { return proto.CompactTextString(m) }
func (*ExpStageDareNumNtf) ProtoMessage()               {}
func (*ExpStageDareNumNtf) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{1} }

func (m *ExpStageDareNumNtf) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

// 战斗结算
type ExpStageFightResultNtf struct {
	StageId    int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Exp        int64 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
	MonsterNum int32 `protobuf:"varint,3,opt,name=monsterNum,proto3" json:"monsterNum,omitempty"`
	Grade      int32 `protobuf:"varint,4,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (m *ExpStageFightResultNtf) Reset()                    { *m = ExpStageFightResultNtf{} }
func (m *ExpStageFightResultNtf) String() string            { return proto.CompactTextString(m) }
func (*ExpStageFightResultNtf) ProtoMessage()               {}
func (*ExpStageFightResultNtf) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{2} }

func (m *ExpStageFightResultNtf) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *ExpStageFightResultNtf) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *ExpStageFightResultNtf) GetMonsterNum() int32 {
	if m != nil {
		return m.MonsterNum
	}
	return 0
}

func (m *ExpStageFightResultNtf) GetGrade() int32 {
	if m != nil {
		return m.Grade
	}
	return 0
}

// 再领一次
type ExpStageDoubleReq struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
}

func (m *ExpStageDoubleReq) Reset()                    { *m = ExpStageDoubleReq{} }
func (m *ExpStageDoubleReq) String() string            { return proto.CompactTextString(m) }
func (*ExpStageDoubleReq) ProtoMessage()               {}
func (*ExpStageDoubleReq) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{3} }

func (m *ExpStageDoubleReq) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

type ExpStageDoubleAck struct {
	StageId int32 `protobuf:"varint,1,opt,name=stageId,proto3" json:"stageId,omitempty"`
	Exp     int64 `protobuf:"varint,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *ExpStageDoubleAck) Reset()                    { *m = ExpStageDoubleAck{} }
func (m *ExpStageDoubleAck) String() string            { return proto.CompactTextString(m) }
func (*ExpStageDoubleAck) ProtoMessage()               {}
func (*ExpStageDoubleAck) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{4} }

func (m *ExpStageDoubleAck) GetStageId() int32 {
	if m != nil {
		return m.StageId
	}
	return 0
}

func (m *ExpStageDoubleAck) GetExp() int64 {
	if m != nil {
		return m.Exp
	}
	return 0
}

// 重置
type ExpStageRefNtf struct {
	IsRef bool `protobuf:"varint,1,opt,name=isRef,proto3" json:"isRef,omitempty"`
}

func (m *ExpStageRefNtf) Reset()                    { *m = ExpStageRefNtf{} }
func (m *ExpStageRefNtf) String() string            { return proto.CompactTextString(m) }
func (*ExpStageRefNtf) ProtoMessage()               {}
func (*ExpStageRefNtf) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{5} }

func (m *ExpStageRefNtf) GetIsRef() bool {
	if m != nil {
		return m.IsRef
	}
	return false
}

// 购买次数增加
type ExpStageBuyNumNtf struct {
	BuyNum int32 `protobuf:"varint,1,opt,name=buyNum,proto3" json:"buyNum,omitempty"`
}

func (m *ExpStageBuyNumNtf) Reset()                    { *m = ExpStageBuyNumNtf{} }
func (m *ExpStageBuyNumNtf) String() string            { return proto.CompactTextString(m) }
func (*ExpStageBuyNumNtf) ProtoMessage()               {}
func (*ExpStageBuyNumNtf) Descriptor() ([]byte, []int) { return fileDescriptorExpStage, []int{6} }

func (m *ExpStageBuyNumNtf) GetBuyNum() int32 {
	if m != nil {
		return m.BuyNum
	}
	return 0
}

func init() {
	proto.RegisterType((*ExpStageFightReq)(nil), "pb.ExpStageFightReq")
	proto.RegisterType((*ExpStageDareNumNtf)(nil), "pb.ExpStageDareNumNtf")
	proto.RegisterType((*ExpStageFightResultNtf)(nil), "pb.ExpStageFightResultNtf")
	proto.RegisterType((*ExpStageDoubleReq)(nil), "pb.ExpStageDoubleReq")
	proto.RegisterType((*ExpStageDoubleAck)(nil), "pb.ExpStageDoubleAck")
	proto.RegisterType((*ExpStageRefNtf)(nil), "pb.ExpStageRefNtf")
	proto.RegisterType((*ExpStageBuyNumNtf)(nil), "pb.ExpStageBuyNumNtf")
}
func (m *ExpStageFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *ExpStageDareNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageDareNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DareNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.DareNum))
	}
	return i, nil
}

func (m *ExpStageFightResultNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageFightResultNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.StageId))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.Exp))
	}
	if m.MonsterNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.MonsterNum))
	}
	if m.Grade != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.Grade))
	}
	return i, nil
}

func (m *ExpStageDoubleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageDoubleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.StageId))
	}
	return i, nil
}

func (m *ExpStageDoubleAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageDoubleAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StageId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.StageId))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.Exp))
	}
	return i, nil
}

func (m *ExpStageRefNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageRefNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsRef {
		dAtA[i] = 0x8
		i++
		if m.IsRef {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ExpStageBuyNumNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpStageBuyNumNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BuyNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExpStage(dAtA, i, uint64(m.BuyNum))
	}
	return i, nil
}

func encodeVarintExpStage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ExpStageFightReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovExpStage(uint64(m.StageId))
	}
	return n
}

func (m *ExpStageDareNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.DareNum != 0 {
		n += 1 + sovExpStage(uint64(m.DareNum))
	}
	return n
}

func (m *ExpStageFightResultNtf) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovExpStage(uint64(m.StageId))
	}
	if m.Exp != 0 {
		n += 1 + sovExpStage(uint64(m.Exp))
	}
	if m.MonsterNum != 0 {
		n += 1 + sovExpStage(uint64(m.MonsterNum))
	}
	if m.Grade != 0 {
		n += 1 + sovExpStage(uint64(m.Grade))
	}
	return n
}

func (m *ExpStageDoubleReq) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovExpStage(uint64(m.StageId))
	}
	return n
}

func (m *ExpStageDoubleAck) Size() (n int) {
	var l int
	_ = l
	if m.StageId != 0 {
		n += 1 + sovExpStage(uint64(m.StageId))
	}
	if m.Exp != 0 {
		n += 1 + sovExpStage(uint64(m.Exp))
	}
	return n
}

func (m *ExpStageRefNtf) Size() (n int) {
	var l int
	_ = l
	if m.IsRef {
		n += 2
	}
	return n
}

func (m *ExpStageBuyNumNtf) Size() (n int) {
	var l int
	_ = l
	if m.BuyNum != 0 {
		n += 1 + sovExpStage(uint64(m.BuyNum))
	}
	return n
}

func sovExpStage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExpStage(x uint64) (n int) {
	return sovExpStage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExpStageFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStageDareNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageDareNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageDareNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStageFightResultNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageFightResultNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageFightResultNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterNum", wireType)
			}
			m.MonsterNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonsterNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			m.Grade = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Grade |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStageDoubleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageDoubleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageDoubleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStageDoubleAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageDoubleAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageDoubleAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StageId", wireType)
			}
			m.StageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StageId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStageRefNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageRefNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageRefNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRef", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRef = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpStageBuyNumNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpStageBuyNumNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpStageBuyNumNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExpStage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExpStage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExpStage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExpStage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExpStage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExpStage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExpStage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExpStage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExpStage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExpStage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("expStage.proto", fileDescriptorExpStage) }

var fileDescriptorExpStage = []byte{
	// 255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xad, 0x28, 0x08,
	0x2e, 0x49, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xd2,
	0xe1, 0x12, 0x70, 0x85, 0x8a, 0xba, 0x65, 0xa6, 0x67, 0x94, 0x04, 0xa5, 0x16, 0x0a, 0x49, 0x70,
	0xb1, 0x17, 0x83, 0x04, 0x3c, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x60, 0x5c, 0x25,
	0x3d, 0x2e, 0x21, 0x98, 0x6a, 0x97, 0xc4, 0xa2, 0x54, 0xbf, 0xd2, 0x5c, 0xbf, 0x92, 0x34, 0x90,
	0xfa, 0x14, 0x08, 0x0f, 0xa6, 0x1e, 0xca, 0x55, 0xaa, 0xe2, 0x12, 0x43, 0x33, 0xbd, 0xb8, 0x34,
	0xa7, 0x04, 0xaa, 0x07, 0xbb, 0x1d, 0x42, 0x02, 0x5c, 0xcc, 0xa9, 0x15, 0x05, 0x12, 0x4c, 0x0a,
	0x8c, 0x1a, 0xcc, 0x41, 0x20, 0xa6, 0x90, 0x1c, 0x17, 0x57, 0x6e, 0x7e, 0x5e, 0x71, 0x49, 0x6a,
	0x11, 0xc8, 0x0a, 0x66, 0xb0, 0x72, 0x24, 0x11, 0x21, 0x11, 0x2e, 0xd6, 0xf4, 0xa2, 0xc4, 0x94,
	0x54, 0x09, 0x16, 0xb0, 0x14, 0x84, 0xa3, 0xa4, 0xcb, 0x25, 0x08, 0x77, 0x6b, 0x7e, 0x69, 0x52,
	0x4e, 0x2a, 0x7e, 0xaf, 0xd9, 0xa3, 0x2b, 0x77, 0x4c, 0xce, 0x26, 0xc5, 0x95, 0x4a, 0x6a, 0x5c,
	0x7c, 0x30, 0x03, 0x82, 0x52, 0xd3, 0x40, 0x7e, 0x14, 0xe1, 0x62, 0xcd, 0x2c, 0x0e, 0x4a, 0x4d,
	0x03, 0xeb, 0xe5, 0x08, 0x82, 0x70, 0x94, 0xb4, 0x11, 0x16, 0x39, 0x95, 0x56, 0x42, 0x83, 0x50,
	0x8c, 0x8b, 0x2d, 0x09, 0xcc, 0x81, 0xda, 0x03, 0xe5, 0x39, 0x09, 0x9c, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x24, 0xb1, 0x81, 0xe3,
	0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xe2, 0xbd, 0x48, 0xcd, 0x01, 0x00, 0x00,
}
