// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fieldFight.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 野战load
type FieldFightLoadReq struct {
}

func (m *FieldFightLoadReq) Reset()                    { *m = FieldFightLoadReq{} }
func (m *FieldFightLoadReq) String() string            { return proto.CompactTextString(m) }
func (*FieldFightLoadReq) ProtoMessage()               {}
func (*FieldFightLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorFieldFight, []int{0} }

type FieldFightLoadAck struct {
	ListInfo             []*FieldFightListInfo         `protobuf:"bytes,1,rep,name=listInfo" json:"listInfo,omitempty"`
	MyCombat             int32                         `protobuf:"varint,2,opt,name=myCombat,proto3" json:"myCombat,omitempty"`
	RemainChallengeTimes int32                         `protobuf:"varint,3,opt,name=remainChallengeTimes,proto3" json:"remainChallengeTimes,omitempty"`
	TodayCanBuyTimes     int32                         `protobuf:"varint,4,opt,name=todayCanBuyTimes,proto3" json:"todayCanBuyTimes,omitempty"`
	ChangeRivalCd        int32                         `protobuf:"varint,5,opt,name=changeRivalCd,proto3" json:"changeRivalCd,omitempty"`
	BeatBackOwnUserInfo  []*FieldFightBeatBackUserInfo `protobuf:"bytes,6,rep,name=BeatBackOwnUserInfo" json:"BeatBackOwnUserInfo,omitempty"`
	IsCheckNoPromptState int32                         `protobuf:"varint,7,opt,name=isCheckNoPromptState,proto3" json:"isCheckNoPromptState,omitempty"`
}

func (m *FieldFightLoadAck) Reset()                    { *m = FieldFightLoadAck{} }
func (m *FieldFightLoadAck) String() string            { return proto.CompactTextString(m) }
func (*FieldFightLoadAck) ProtoMessage()               {}
func (*FieldFightLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorFieldFight, []int{1} }

func (m *FieldFightLoadAck) GetListInfo() []*FieldFightListInfo {
	if m != nil {
		return m.ListInfo
	}
	return nil
}

func (m *FieldFightLoadAck) GetMyCombat() int32 {
	if m != nil {
		return m.MyCombat
	}
	return 0
}

func (m *FieldFightLoadAck) GetRemainChallengeTimes() int32 {
	if m != nil {
		return m.RemainChallengeTimes
	}
	return 0
}

func (m *FieldFightLoadAck) GetTodayCanBuyTimes() int32 {
	if m != nil {
		return m.TodayCanBuyTimes
	}
	return 0
}

func (m *FieldFightLoadAck) GetChangeRivalCd() int32 {
	if m != nil {
		return m.ChangeRivalCd
	}
	return 0
}

func (m *FieldFightLoadAck) GetBeatBackOwnUserInfo() []*FieldFightBeatBackUserInfo {
	if m != nil {
		return m.BeatBackOwnUserInfo
	}
	return nil
}

func (m *FieldFightLoadAck) GetIsCheckNoPromptState() int32 {
	if m != nil {
		return m.IsCheckNoPromptState
	}
	return 0
}

// 进入战斗
type EnterFieldFightReq struct {
	ChallengeUid int32 `protobuf:"varint,1,opt,name=challengeUid,proto3" json:"challengeUid,omitempty"`
	IsBeatBack   int32 `protobuf:"varint,2,opt,name=isBeatBack,proto3" json:"isBeatBack,omitempty"`
}

func (m *EnterFieldFightReq) Reset()                    { *m = EnterFieldFightReq{} }
func (m *EnterFieldFightReq) String() string            { return proto.CompactTextString(m) }
func (*EnterFieldFightReq) ProtoMessage()               {}
func (*EnterFieldFightReq) Descriptor() ([]byte, []int) { return fileDescriptorFieldFight, []int{2} }

func (m *EnterFieldFightReq) GetChallengeUid() int32 {
	if m != nil {
		return m.ChallengeUid
	}
	return 0
}

func (m *EnterFieldFightReq) GetIsBeatBack() int32 {
	if m != nil {
		return m.IsBeatBack
	}
	return 0
}

type FieldFightNtf struct {
	Result               int32           `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Goods                *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
	RemainChallengeTimes int32           `protobuf:"varint,3,opt,name=remainChallengeTimes,proto3" json:"remainChallengeTimes,omitempty"`
}

func (m *FieldFightNtf) Reset()                    { *m = FieldFightNtf{} }
func (m *FieldFightNtf) String() string            { return proto.CompactTextString(m) }
func (*FieldFightNtf) ProtoMessage()               {}
func (*FieldFightNtf) Descriptor() ([]byte, []int) { return fileDescriptorFieldFight, []int{3} }

func (m *FieldFightNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *FieldFightNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *FieldFightNtf) GetRemainChallengeTimes() int32 {
	if m != nil {
		return m.RemainChallengeTimes
	}
	return 0
}

// 挑战次数购买
type BuyFieldFightChallengeTimesReq struct {
}

func (m *BuyFieldFightChallengeTimesReq) Reset()         { *m = BuyFieldFightChallengeTimesReq{} }
func (m *BuyFieldFightChallengeTimesReq) String() string { return proto.CompactTextString(m) }
func (*BuyFieldFightChallengeTimesReq) ProtoMessage()    {}
func (*BuyFieldFightChallengeTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorFieldFight, []int{4}
}

type BuyFieldFightChallengeTimesAck struct {
	ResidueTimes     int32 `protobuf:"varint,1,opt,name=residueTimes,proto3" json:"residueTimes,omitempty"`
	TodayCanBuyTimes int32 `protobuf:"varint,2,opt,name=todayCanBuyTimes,proto3" json:"todayCanBuyTimes,omitempty"`
}

func (m *BuyFieldFightChallengeTimesAck) Reset()         { *m = BuyFieldFightChallengeTimesAck{} }
func (m *BuyFieldFightChallengeTimesAck) String() string { return proto.CompactTextString(m) }
func (*BuyFieldFightChallengeTimesAck) ProtoMessage()    {}
func (*BuyFieldFightChallengeTimesAck) Descriptor() ([]byte, []int) {
	return fileDescriptorFieldFight, []int{5}
}

func (m *BuyFieldFightChallengeTimesAck) GetResidueTimes() int32 {
	if m != nil {
		return m.ResidueTimes
	}
	return 0
}

func (m *BuyFieldFightChallengeTimesAck) GetTodayCanBuyTimes() int32 {
	if m != nil {
		return m.TodayCanBuyTimes
	}
	return 0
}

// 刷新对手
type RefFieldFightRivalUserReq struct {
}

func (m *RefFieldFightRivalUserReq) Reset()         { *m = RefFieldFightRivalUserReq{} }
func (m *RefFieldFightRivalUserReq) String() string { return proto.CompactTextString(m) }
func (*RefFieldFightRivalUserReq) ProtoMessage()    {}
func (*RefFieldFightRivalUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptorFieldFight, []int{6}
}

type RefFieldFightRivalUserAck struct {
	ListInfo      []*FieldFightListInfo `protobuf:"bytes,1,rep,name=listInfo" json:"listInfo,omitempty"`
	ChangeRivalCd int32                 `protobuf:"varint,2,opt,name=changeRivalCd,proto3" json:"changeRivalCd,omitempty"`
}

func (m *RefFieldFightRivalUserAck) Reset()         { *m = RefFieldFightRivalUserAck{} }
func (m *RefFieldFightRivalUserAck) String() string { return proto.CompactTextString(m) }
func (*RefFieldFightRivalUserAck) ProtoMessage()    {}
func (*RefFieldFightRivalUserAck) Descriptor() ([]byte, []int) {
	return fileDescriptorFieldFight, []int{7}
}

func (m *RefFieldFightRivalUserAck) GetListInfo() []*FieldFightListInfo {
	if m != nil {
		return m.ListInfo
	}
	return nil
}

func (m *RefFieldFightRivalUserAck) GetChangeRivalCd() int32 {
	if m != nil {
		return m.ChangeRivalCd
	}
	return 0
}

type FieldFightListInfo struct {
	DifficultyLevel int32       `protobuf:"varint,1,opt,name=difficultyLevel,proto3" json:"difficultyLevel,omitempty"`
	Avatar          string      `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	NickName        string      `protobuf:"bytes,3,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Combat          int32       `protobuf:"varint,4,opt,name=combat,proto3" json:"combat,omitempty"`
	UserLv          int32       `protobuf:"varint,5,opt,name=userLv,proto3" json:"userLv,omitempty"`
	RewardInfos     []*ItemUnit `protobuf:"bytes,6,rep,name=rewardInfos" json:"rewardInfos,omitempty"`
	UserId          int32       `protobuf:"varint,7,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (m *FieldFightListInfo) Reset()                    { *m = FieldFightListInfo{} }
func (m *FieldFightListInfo) String() string            { return proto.CompactTextString(m) }
func (*FieldFightListInfo) ProtoMessage()               {}
func (*FieldFightListInfo) Descriptor() ([]byte, []int) { return fileDescriptorFieldFight, []int{8} }

func (m *FieldFightListInfo) GetDifficultyLevel() int32 {
	if m != nil {
		return m.DifficultyLevel
	}
	return 0
}

func (m *FieldFightListInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *FieldFightListInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *FieldFightListInfo) GetCombat() int32 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *FieldFightListInfo) GetUserLv() int32 {
	if m != nil {
		return m.UserLv
	}
	return 0
}

func (m *FieldFightListInfo) GetRewardInfos() []*ItemUnit {
	if m != nil {
		return m.RewardInfos
	}
	return nil
}

func (m *FieldFightListInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type FieldFightBeatBackUserInfo struct {
	UserId   int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	NickName string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName,omitempty"`
}

func (m *FieldFightBeatBackUserInfo) Reset()         { *m = FieldFightBeatBackUserInfo{} }
func (m *FieldFightBeatBackUserInfo) String() string { return proto.CompactTextString(m) }
func (*FieldFightBeatBackUserInfo) ProtoMessage()    {}
func (*FieldFightBeatBackUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptorFieldFight, []int{9}
}

func (m *FieldFightBeatBackUserInfo) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FieldFightBeatBackUserInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func init() {
	proto.RegisterType((*FieldFightLoadReq)(nil), "pb.FieldFightLoadReq")
	proto.RegisterType((*FieldFightLoadAck)(nil), "pb.FieldFightLoadAck")
	proto.RegisterType((*EnterFieldFightReq)(nil), "pb.EnterFieldFightReq")
	proto.RegisterType((*FieldFightNtf)(nil), "pb.FieldFightNtf")
	proto.RegisterType((*BuyFieldFightChallengeTimesReq)(nil), "pb.BuyFieldFightChallengeTimesReq")
	proto.RegisterType((*BuyFieldFightChallengeTimesAck)(nil), "pb.BuyFieldFightChallengeTimesAck")
	proto.RegisterType((*RefFieldFightRivalUserReq)(nil), "pb.RefFieldFightRivalUserReq")
	proto.RegisterType((*RefFieldFightRivalUserAck)(nil), "pb.RefFieldFightRivalUserAck")
	proto.RegisterType((*FieldFightListInfo)(nil), "pb.FieldFightListInfo")
	proto.RegisterType((*FieldFightBeatBackUserInfo)(nil), "pb.FieldFightBeatBackUserInfo")
}
func (m *FieldFightLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldFightLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *FieldFightLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldFightLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListInfo) > 0 {
		for _, msg := range m.ListInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFieldFight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.MyCombat != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.MyCombat))
	}
	if m.RemainChallengeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.RemainChallengeTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.TodayCanBuyTimes))
	}
	if m.ChangeRivalCd != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.ChangeRivalCd))
	}
	if len(m.BeatBackOwnUserInfo) > 0 {
		for _, msg := range m.BeatBackOwnUserInfo {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFieldFight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsCheckNoPromptState != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.IsCheckNoPromptState))
	}
	return i, nil
}

func (m *EnterFieldFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterFieldFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChallengeUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.ChallengeUid))
	}
	if m.IsBeatBack != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.IsBeatBack))
	}
	return i, nil
}

func (m *FieldFightNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldFightNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.Result))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.RemainChallengeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.RemainChallengeTimes))
	}
	return i, nil
}

func (m *BuyFieldFightChallengeTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyFieldFightChallengeTimesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BuyFieldFightChallengeTimesAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyFieldFightChallengeTimesAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResidueTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.ResidueTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.TodayCanBuyTimes))
	}
	return i, nil
}

func (m *RefFieldFightRivalUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefFieldFightRivalUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefFieldFightRivalUserAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefFieldFightRivalUserAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ListInfo) > 0 {
		for _, msg := range m.ListInfo {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFieldFight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ChangeRivalCd != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.ChangeRivalCd))
	}
	return i, nil
}

func (m *FieldFightListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldFightListInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DifficultyLevel != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.DifficultyLevel))
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if m.Combat != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.Combat))
	}
	if m.UserLv != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.UserLv))
	}
	if len(m.RewardInfos) > 0 {
		for _, msg := range m.RewardInfos {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFieldFight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UserId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.UserId))
	}
	return i, nil
}

func (m *FieldFightBeatBackUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldFightBeatBackUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(m.UserId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFieldFight(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	return i, nil
}

func encodeVarintFieldFight(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FieldFightLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *FieldFightLoadAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ListInfo) > 0 {
		for _, e := range m.ListInfo {
			l = e.Size()
			n += 1 + l + sovFieldFight(uint64(l))
		}
	}
	if m.MyCombat != 0 {
		n += 1 + sovFieldFight(uint64(m.MyCombat))
	}
	if m.RemainChallengeTimes != 0 {
		n += 1 + sovFieldFight(uint64(m.RemainChallengeTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		n += 1 + sovFieldFight(uint64(m.TodayCanBuyTimes))
	}
	if m.ChangeRivalCd != 0 {
		n += 1 + sovFieldFight(uint64(m.ChangeRivalCd))
	}
	if len(m.BeatBackOwnUserInfo) > 0 {
		for _, e := range m.BeatBackOwnUserInfo {
			l = e.Size()
			n += 1 + l + sovFieldFight(uint64(l))
		}
	}
	if m.IsCheckNoPromptState != 0 {
		n += 1 + sovFieldFight(uint64(m.IsCheckNoPromptState))
	}
	return n
}

func (m *EnterFieldFightReq) Size() (n int) {
	var l int
	_ = l
	if m.ChallengeUid != 0 {
		n += 1 + sovFieldFight(uint64(m.ChallengeUid))
	}
	if m.IsBeatBack != 0 {
		n += 1 + sovFieldFight(uint64(m.IsBeatBack))
	}
	return n
}

func (m *FieldFightNtf) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovFieldFight(uint64(m.Result))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovFieldFight(uint64(l))
	}
	if m.RemainChallengeTimes != 0 {
		n += 1 + sovFieldFight(uint64(m.RemainChallengeTimes))
	}
	return n
}

func (m *BuyFieldFightChallengeTimesReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BuyFieldFightChallengeTimesAck) Size() (n int) {
	var l int
	_ = l
	if m.ResidueTimes != 0 {
		n += 1 + sovFieldFight(uint64(m.ResidueTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		n += 1 + sovFieldFight(uint64(m.TodayCanBuyTimes))
	}
	return n
}

func (m *RefFieldFightRivalUserReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RefFieldFightRivalUserAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ListInfo) > 0 {
		for _, e := range m.ListInfo {
			l = e.Size()
			n += 1 + l + sovFieldFight(uint64(l))
		}
	}
	if m.ChangeRivalCd != 0 {
		n += 1 + sovFieldFight(uint64(m.ChangeRivalCd))
	}
	return n
}

func (m *FieldFightListInfo) Size() (n int) {
	var l int
	_ = l
	if m.DifficultyLevel != 0 {
		n += 1 + sovFieldFight(uint64(m.DifficultyLevel))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovFieldFight(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovFieldFight(uint64(l))
	}
	if m.Combat != 0 {
		n += 1 + sovFieldFight(uint64(m.Combat))
	}
	if m.UserLv != 0 {
		n += 1 + sovFieldFight(uint64(m.UserLv))
	}
	if len(m.RewardInfos) > 0 {
		for _, e := range m.RewardInfos {
			l = e.Size()
			n += 1 + l + sovFieldFight(uint64(l))
		}
	}
	if m.UserId != 0 {
		n += 1 + sovFieldFight(uint64(m.UserId))
	}
	return n
}

func (m *FieldFightBeatBackUserInfo) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovFieldFight(uint64(m.UserId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovFieldFight(uint64(l))
	}
	return n
}

func sovFieldFight(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFieldFight(x uint64) (n int) {
	return sovFieldFight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FieldFightLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldFightLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldFightLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldFightLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldFightLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldFightLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListInfo = append(m.ListInfo, &FieldFightListInfo{})
			if err := m.ListInfo[len(m.ListInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCombat", wireType)
			}
			m.MyCombat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyCombat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainChallengeTimes", wireType)
			}
			m.RemainChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayCanBuyTimes", wireType)
			}
			m.TodayCanBuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayCanBuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeRivalCd", wireType)
			}
			m.ChangeRivalCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeRivalCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeatBackOwnUserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BeatBackOwnUserInfo = append(m.BeatBackOwnUserInfo, &FieldFightBeatBackUserInfo{})
			if err := m.BeatBackOwnUserInfo[len(m.BeatBackOwnUserInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCheckNoPromptState", wireType)
			}
			m.IsCheckNoPromptState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsCheckNoPromptState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterFieldFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterFieldFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterFieldFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeUid", wireType)
			}
			m.ChallengeUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBeatBack", wireType)
			}
			m.IsBeatBack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBeatBack |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldFightNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldFightNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldFightNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainChallengeTimes", wireType)
			}
			m.RemainChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyFieldFightChallengeTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyFieldFightChallengeTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyFieldFightChallengeTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyFieldFightChallengeTimesAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyFieldFightChallengeTimesAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyFieldFightChallengeTimesAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidueTimes", wireType)
			}
			m.ResidueTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidueTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayCanBuyTimes", wireType)
			}
			m.TodayCanBuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayCanBuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefFieldFightRivalUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefFieldFightRivalUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefFieldFightRivalUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefFieldFightRivalUserAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefFieldFightRivalUserAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefFieldFightRivalUserAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ListInfo = append(m.ListInfo, &FieldFightListInfo{})
			if err := m.ListInfo[len(m.ListInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeRivalCd", wireType)
			}
			m.ChangeRivalCd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeRivalCd |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldFightListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldFightListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldFightListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			m.DifficultyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DifficultyLevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserLv", wireType)
			}
			m.UserLv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserLv |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardInfos = append(m.RewardInfos, &ItemUnit{})
			if err := m.RewardInfos[len(m.RewardInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldFightBeatBackUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldFightBeatBackUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldFightBeatBackUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFieldFight
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFieldFight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFieldFight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFieldFight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFieldFight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFieldFight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFieldFight
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFieldFight
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFieldFight(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFieldFight = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFieldFight   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fieldFight.proto", fileDescriptorFieldFight) }

var fileDescriptorFieldFight = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x2e, 0x0d, 0xed, 0x24, 0x15, 0x61, 0x8b, 0x2a, 0x13, 0x24, 0x2b, 0xb2, 0x38, 0x44,
	0x1c, 0x72, 0x08, 0x5f, 0x40, 0x2c, 0x8a, 0x2a, 0x45, 0x21, 0x32, 0x44, 0xe2, 0xba, 0xb1, 0xc7,
	0xc9, 0x2a, 0xb6, 0x37, 0xb5, 0xd7, 0xa9, 0xf2, 0x01, 0xfc, 0x03, 0x9f, 0xc4, 0x91, 0x4f, 0x40,
	0xe1, 0xc6, 0x85, 0x5f, 0x40, 0xbb, 0xde, 0x24, 0x76, 0xe3, 0x72, 0xe8, 0x71, 0xde, 0xbc, 0x1d,
	0xcf, 0x9b, 0x99, 0x67, 0x68, 0x87, 0x0c, 0xa3, 0xe0, 0x9a, 0xcd, 0x17, 0xa2, 0xbf, 0x4a, 0xb9,
	0xe0, 0xc4, 0x5c, 0xcd, 0x3a, 0x2d, 0x9f, 0xc7, 0x31, 0x4f, 0x0a, 0xc4, 0xb9, 0x84, 0x17, 0xd7,
	0x7b, 0xd6, 0x88, 0xd3, 0xc0, 0xc3, 0x5b, 0xe7, 0xaf, 0x79, 0x1f, 0x7d, 0xef, 0x2f, 0xc9, 0x00,
	0xce, 0x22, 0x96, 0x89, 0x9b, 0x24, 0xe4, 0x96, 0xd1, 0x3d, 0xe9, 0x35, 0x07, 0x57, 0xfd, 0xd5,
	0xac, 0x5f, 0x22, 0xea, 0xac, 0xb7, 0xe7, 0x91, 0x0e, 0x9c, 0xc5, 0x1b, 0x97, 0xc7, 0x33, 0x2a,
	0x2c, 0xb3, 0x6b, 0xf4, 0x4e, 0xbd, 0x7d, 0x4c, 0x06, 0xf0, 0x32, 0xc5, 0x98, 0xb2, 0xc4, 0x5d,
	0xd0, 0x28, 0xc2, 0x64, 0x8e, 0x5f, 0x58, 0x8c, 0x99, 0x75, 0xa2, 0x78, 0xb5, 0x39, 0xf2, 0x16,
	0xda, 0x82, 0x07, 0x74, 0xe3, 0xd2, 0x64, 0x98, 0x6f, 0x0a, 0xfe, 0x53, 0xc5, 0x3f, 0xc2, 0xc9,
	0x1b, 0xb8, 0xf0, 0x17, 0x34, 0x99, 0xa3, 0xc7, 0xd6, 0x34, 0x72, 0x03, 0xeb, 0x54, 0x11, 0xab,
	0x20, 0x99, 0xc0, 0xe5, 0x10, 0xa9, 0x18, 0x52, 0x7f, 0xf9, 0xe9, 0x2e, 0x99, 0x66, 0x98, 0x2a,
	0x81, 0x0d, 0x25, 0xd0, 0xae, 0x0a, 0xdc, 0x11, 0x77, 0x2c, 0xaf, 0xee, 0xa9, 0xd4, 0xc5, 0x32,
	0x77, 0x81, 0xfe, 0x72, 0xcc, 0x27, 0x29, 0x8f, 0x57, 0xe2, 0xb3, 0xa0, 0x02, 0xad, 0x67, 0x85,
	0xae, 0xba, 0x9c, 0xf3, 0x15, 0xc8, 0x87, 0x44, 0x60, 0x7a, 0xf8, 0x96, 0x87, 0xb7, 0xc4, 0x81,
	0x96, 0xbf, 0xd3, 0x3f, 0x65, 0x81, 0x65, 0xa8, 0x0a, 0x15, 0x8c, 0xd8, 0x00, 0x2c, 0xdb, 0xb5,
	0xa1, 0x67, 0x5c, 0x42, 0x9c, 0x6f, 0x06, 0x5c, 0x1c, 0xaa, 0x8e, 0x45, 0x48, 0xae, 0xa0, 0x91,
	0x62, 0x96, 0x47, 0x42, 0xd7, 0xd3, 0x11, 0xe9, 0xc1, 0xe9, 0x9c, 0xf3, 0x20, 0x53, 0x45, 0x9a,
	0x03, 0x22, 0xb5, 0x7f, 0x94, 0x80, 0xab, 0x06, 0x36, 0x16, 0xa1, 0x57, 0x10, 0x1e, 0xb3, 0x39,
	0xa7, 0x0b, 0xf6, 0x30, 0xdf, 0x1c, 0x3a, 0xa9, 0xa6, 0xe5, 0xd5, 0xad, 0xfe, 0xcb, 0x90, 0x17,
	0xe8, 0x40, 0x2b, 0xc5, 0x8c, 0x05, 0xb9, 0xfe, 0x9e, 0x9e, 0x47, 0x19, 0xab, 0xbd, 0x10, 0xb3,
	0xfe, 0x42, 0x9c, 0xd7, 0xf0, 0xca, 0xc3, 0xb0, 0x34, 0x73, 0x79, 0x13, 0x72, 0x8f, 0xb2, 0x9d,
	0xfc, 0xa1, 0xe4, 0x63, 0xbd, 0x70, 0x74, 0x8f, 0x66, 0xcd, 0x3d, 0x3a, 0x7f, 0x0c, 0x20, 0xc7,
	0x65, 0x48, 0x0f, 0x9e, 0x07, 0x2c, 0x0c, 0x99, 0x9f, 0x47, 0x62, 0x33, 0xc2, 0x35, 0x46, 0x5a,
	0xfd, 0x7d, 0x58, 0xae, 0x97, 0xae, 0xa9, 0xa0, 0xa9, 0xaa, 0x7f, 0xee, 0xe9, 0x48, 0x5a, 0x31,
	0x61, 0xfe, 0x72, 0x4c, 0x63, 0x54, 0x8b, 0x3a, 0xf7, 0xf6, 0xb1, 0x7c, 0xe3, 0x17, 0x26, 0x2d,
	0xcc, 0xa4, 0x23, 0x89, 0xe7, 0x19, 0xa6, 0xa3, 0xb5, 0xf6, 0x8e, 0x8e, 0x48, 0x1f, 0x9a, 0x29,
	0xde, 0xd1, 0x34, 0x90, 0xbd, 0x65, 0xda, 0x2c, 0x2d, 0x39, 0x01, 0x26, 0x30, 0x9e, 0x26, 0x4c,
	0x78, 0x65, 0xc2, 0xae, 0xce, 0x4d, 0xa0, 0x4d, 0xa0, 0x23, 0x67, 0x02, 0x9d, 0x87, 0xdd, 0x55,
	0x7a, 0x65, 0x94, 0x5f, 0x55, 0x94, 0x98, 0x55, 0x25, 0xc3, 0xf6, 0x8f, 0xad, 0x6d, 0xfc, 0xdc,
	0xda, 0xc6, 0xaf, 0xad, 0x6d, 0x7c, 0xff, 0x6d, 0x3f, 0x99, 0x35, 0xd4, 0x8f, 0xee, 0xdd, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0x6f, 0x83, 0xb2, 0x0e, 0x05, 0x00, 0x00,
}
