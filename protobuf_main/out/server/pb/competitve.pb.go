// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: competitve.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 打开页面
type CompetitveLoadReq struct {
}

func (m *CompetitveLoadReq) Reset()                    { *m = CompetitveLoadReq{} }
func (m *CompetitveLoadReq) String() string            { return proto.CompactTextString(m) }
func (*CompetitveLoadReq) ProtoMessage()               {}
func (*CompetitveLoadReq) Descriptor() ([]byte, []int) { return fileDescriptorCompetitve, []int{0} }

type CompetitveLoadAck struct {
	SeasonTimes             int32                 `protobuf:"varint,1,opt,name=seasonTimes,proto3" json:"seasonTimes,omitempty"`
	SessionWinTimes         int32                 `protobuf:"varint,2,opt,name=sessionWinTimes,proto3" json:"sessionWinTimes,omitempty"`
	RemainChallengeTimes    int32                 `protobuf:"varint,3,opt,name=remainChallengeTimes,proto3" json:"remainChallengeTimes,omitempty"`
	TodayCanBuyTimes        int32                 `protobuf:"varint,4,opt,name=todayCanBuyTimes,proto3" json:"todayCanBuyTimes,omitempty"`
	UserScore               int32                 `protobuf:"varint,5,opt,name=userScore,proto3" json:"userScore,omitempty"`
	YestardayReward         int32                 `protobuf:"varint,6,opt,name=yestardayReward,proto3" json:"yestardayReward,omitempty"`
	SeasonRank              []*CompetitveRankInfo `protobuf:"bytes,7,rep,name=seasonRank" json:"seasonRank,omitempty"`
	LastSeasonRank          []*CompetitveRankInfo `protobuf:"bytes,8,rep,name=lastSeasonRank" json:"lastSeasonRank,omitempty"`
	BeginTimes              int32                 `protobuf:"varint,9,opt,name=beginTimes,proto3" json:"beginTimes,omitempty"`
	LastSeasonUserRank      int32                 `protobuf:"varint,10,opt,name=lastSeasonUserRank,proto3" json:"lastSeasonUserRank,omitempty"`
	LastSeasonUserRankScore int32                 `protobuf:"varint,11,opt,name=lastSeasonUserRankScore,proto3" json:"lastSeasonUserRankScore,omitempty"`
}

func (m *CompetitveLoadAck) Reset()                    { *m = CompetitveLoadAck{} }
func (m *CompetitveLoadAck) String() string            { return proto.CompactTextString(m) }
func (*CompetitveLoadAck) ProtoMessage()               {}
func (*CompetitveLoadAck) Descriptor() ([]byte, []int) { return fileDescriptorCompetitve, []int{1} }

func (m *CompetitveLoadAck) GetSeasonTimes() int32 {
	if m != nil {
		return m.SeasonTimes
	}
	return 0
}

func (m *CompetitveLoadAck) GetSessionWinTimes() int32 {
	if m != nil {
		return m.SessionWinTimes
	}
	return 0
}

func (m *CompetitveLoadAck) GetRemainChallengeTimes() int32 {
	if m != nil {
		return m.RemainChallengeTimes
	}
	return 0
}

func (m *CompetitveLoadAck) GetTodayCanBuyTimes() int32 {
	if m != nil {
		return m.TodayCanBuyTimes
	}
	return 0
}

func (m *CompetitveLoadAck) GetUserScore() int32 {
	if m != nil {
		return m.UserScore
	}
	return 0
}

func (m *CompetitveLoadAck) GetYestardayReward() int32 {
	if m != nil {
		return m.YestardayReward
	}
	return 0
}

func (m *CompetitveLoadAck) GetSeasonRank() []*CompetitveRankInfo {
	if m != nil {
		return m.SeasonRank
	}
	return nil
}

func (m *CompetitveLoadAck) GetLastSeasonRank() []*CompetitveRankInfo {
	if m != nil {
		return m.LastSeasonRank
	}
	return nil
}

func (m *CompetitveLoadAck) GetBeginTimes() int32 {
	if m != nil {
		return m.BeginTimes
	}
	return 0
}

func (m *CompetitveLoadAck) GetLastSeasonUserRank() int32 {
	if m != nil {
		return m.LastSeasonUserRank
	}
	return 0
}

func (m *CompetitveLoadAck) GetLastSeasonUserRankScore() int32 {
	if m != nil {
		return m.LastSeasonUserRankScore
	}
	return 0
}

// 进入战斗
type EnterCompetitveFightReq struct {
	ChallengeUid     int32 `protobuf:"varint,1,opt,name=challengeUid,proto3" json:"challengeUid,omitempty"`
	ChallengeRanking int32 `protobuf:"varint,2,opt,name=challengeRanking,proto3" json:"challengeRanking,omitempty"`
}

func (m *EnterCompetitveFightReq) Reset()         { *m = EnterCompetitveFightReq{} }
func (m *EnterCompetitveFightReq) String() string { return proto.CompactTextString(m) }
func (*EnterCompetitveFightReq) ProtoMessage()    {}
func (*EnterCompetitveFightReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCompetitve, []int{2}
}

func (m *EnterCompetitveFightReq) GetChallengeUid() int32 {
	if m != nil {
		return m.ChallengeUid
	}
	return 0
}

func (m *EnterCompetitveFightReq) GetChallengeRanking() int32 {
	if m != nil {
		return m.ChallengeRanking
	}
	return 0
}

type CompetitveFightNtf struct {
	Result int32           `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Goods  *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
	MyRank int32           `protobuf:"varint,3,opt,name=myRank,proto3" json:"myRank,omitempty"`
}

func (m *CompetitveFightNtf) Reset()                    { *m = CompetitveFightNtf{} }
func (m *CompetitveFightNtf) String() string            { return proto.CompactTextString(m) }
func (*CompetitveFightNtf) ProtoMessage()               {}
func (*CompetitveFightNtf) Descriptor() ([]byte, []int) { return fileDescriptorCompetitve, []int{3} }

func (m *CompetitveFightNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *CompetitveFightNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *CompetitveFightNtf) GetMyRank() int32 {
	if m != nil {
		return m.MyRank
	}
	return 0
}

// 竞技场挑战次数购买
type BuyCompetitveChallengeTimesReq struct {
}

func (m *BuyCompetitveChallengeTimesReq) Reset()         { *m = BuyCompetitveChallengeTimesReq{} }
func (m *BuyCompetitveChallengeTimesReq) String() string { return proto.CompactTextString(m) }
func (*BuyCompetitveChallengeTimesReq) ProtoMessage()    {}
func (*BuyCompetitveChallengeTimesReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCompetitve, []int{4}
}

type BuyCompetitveChallengeTimesAck struct {
	ResidueTimes     int32           `protobuf:"varint,1,opt,name=residueTimes,proto3" json:"residueTimes,omitempty"`
	TodayCanBuyTimes int32           `protobuf:"varint,2,opt,name=todayCanBuyTimes,proto3" json:"todayCanBuyTimes,omitempty"`
	Goods            *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *BuyCompetitveChallengeTimesAck) Reset()         { *m = BuyCompetitveChallengeTimesAck{} }
func (m *BuyCompetitveChallengeTimesAck) String() string { return proto.CompactTextString(m) }
func (*BuyCompetitveChallengeTimesAck) ProtoMessage()    {}
func (*BuyCompetitveChallengeTimesAck) Descriptor() ([]byte, []int) {
	return fileDescriptorCompetitve, []int{5}
}

func (m *BuyCompetitveChallengeTimesAck) GetResidueTimes() int32 {
	if m != nil {
		return m.ResidueTimes
	}
	return 0
}

func (m *BuyCompetitveChallengeTimesAck) GetTodayCanBuyTimes() int32 {
	if m != nil {
		return m.TodayCanBuyTimes
	}
	return 0
}

func (m *BuyCompetitveChallengeTimesAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 刷新对手
type RefCompetitveRankReq struct {
}

func (m *RefCompetitveRankReq) Reset()                    { *m = RefCompetitveRankReq{} }
func (m *RefCompetitveRankReq) String() string            { return proto.CompactTextString(m) }
func (*RefCompetitveRankReq) ProtoMessage()               {}
func (*RefCompetitveRankReq) Descriptor() ([]byte, []int) { return fileDescriptorCompetitve, []int{6} }

type RefCompetitveRankAck struct {
	UserInfo *BriefUserInfo `protobuf:"bytes,1,opt,name=userInfo" json:"userInfo,omitempty"`
	Score    int32          `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Heros    []*HeroInfo    `protobuf:"bytes,3,rep,name=heros" json:"heros,omitempty"`
}

func (m *RefCompetitveRankAck) Reset()                    { *m = RefCompetitveRankAck{} }
func (m *RefCompetitveRankAck) String() string            { return proto.CompactTextString(m) }
func (*RefCompetitveRankAck) ProtoMessage()               {}
func (*RefCompetitveRankAck) Descriptor() ([]byte, []int) { return fileDescriptorCompetitve, []int{7} }

func (m *RefCompetitveRankAck) GetUserInfo() *BriefUserInfo {
	if m != nil {
		return m.UserInfo
	}
	return nil
}

func (m *RefCompetitveRankAck) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RefCompetitveRankAck) GetHeros() []*HeroInfo {
	if m != nil {
		return m.Heros
	}
	return nil
}

type CompetitveRankInfo struct {
	Ranking  int32  `protobuf:"varint,1,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Avatar   string `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Score    int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	NickName string `protobuf:"bytes,4,opt,name=nickName,proto3" json:"nickName,omitempty"`
}

func (m *CompetitveRankInfo) Reset()                    { *m = CompetitveRankInfo{} }
func (m *CompetitveRankInfo) String() string            { return proto.CompactTextString(m) }
func (*CompetitveRankInfo) ProtoMessage()               {}
func (*CompetitveRankInfo) Descriptor() ([]byte, []int) { return fileDescriptorCompetitve, []int{8} }

func (m *CompetitveRankInfo) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *CompetitveRankInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *CompetitveRankInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *CompetitveRankInfo) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

// 领取每日奖励
type GetCompetitveDailyRewardReq struct {
}

func (m *GetCompetitveDailyRewardReq) Reset()         { *m = GetCompetitveDailyRewardReq{} }
func (m *GetCompetitveDailyRewardReq) String() string { return proto.CompactTextString(m) }
func (*GetCompetitveDailyRewardReq) ProtoMessage()    {}
func (*GetCompetitveDailyRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptorCompetitve, []int{9}
}

type GetCompetitveDailyRewardAck struct {
	Goods              *GoodsChangeNtf `protobuf:"bytes,1,opt,name=goods" json:"goods,omitempty"`
	HaveGetRewardState int32           `protobuf:"varint,2,opt,name=haveGetRewardState,proto3" json:"haveGetRewardState,omitempty"`
}

func (m *GetCompetitveDailyRewardAck) Reset()         { *m = GetCompetitveDailyRewardAck{} }
func (m *GetCompetitveDailyRewardAck) String() string { return proto.CompactTextString(m) }
func (*GetCompetitveDailyRewardAck) ProtoMessage()    {}
func (*GetCompetitveDailyRewardAck) Descriptor() ([]byte, []int) {
	return fileDescriptorCompetitve, []int{10}
}

func (m *GetCompetitveDailyRewardAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *GetCompetitveDailyRewardAck) GetHaveGetRewardState() int32 {
	if m != nil {
		return m.HaveGetRewardState
	}
	return 0
}

func init() {
	proto.RegisterType((*CompetitveLoadReq)(nil), "pb.CompetitveLoadReq")
	proto.RegisterType((*CompetitveLoadAck)(nil), "pb.CompetitveLoadAck")
	proto.RegisterType((*EnterCompetitveFightReq)(nil), "pb.EnterCompetitveFightReq")
	proto.RegisterType((*CompetitveFightNtf)(nil), "pb.CompetitveFightNtf")
	proto.RegisterType((*BuyCompetitveChallengeTimesReq)(nil), "pb.BuyCompetitveChallengeTimesReq")
	proto.RegisterType((*BuyCompetitveChallengeTimesAck)(nil), "pb.BuyCompetitveChallengeTimesAck")
	proto.RegisterType((*RefCompetitveRankReq)(nil), "pb.RefCompetitveRankReq")
	proto.RegisterType((*RefCompetitveRankAck)(nil), "pb.RefCompetitveRankAck")
	proto.RegisterType((*CompetitveRankInfo)(nil), "pb.CompetitveRankInfo")
	proto.RegisterType((*GetCompetitveDailyRewardReq)(nil), "pb.GetCompetitveDailyRewardReq")
	proto.RegisterType((*GetCompetitveDailyRewardAck)(nil), "pb.GetCompetitveDailyRewardAck")
}
func (m *CompetitveLoadReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompetitveLoadReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CompetitveLoadAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompetitveLoadAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SeasonTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.SeasonTimes))
	}
	if m.SessionWinTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.SessionWinTimes))
	}
	if m.RemainChallengeTimes != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.RemainChallengeTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.TodayCanBuyTimes))
	}
	if m.UserScore != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.UserScore))
	}
	if m.YestardayReward != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.YestardayReward))
	}
	if len(m.SeasonRank) > 0 {
		for _, msg := range m.SeasonRank {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCompetitve(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.LastSeasonRank) > 0 {
		for _, msg := range m.LastSeasonRank {
			dAtA[i] = 0x42
			i++
			i = encodeVarintCompetitve(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.BeginTimes != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.BeginTimes))
	}
	if m.LastSeasonUserRank != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.LastSeasonUserRank))
	}
	if m.LastSeasonUserRankScore != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.LastSeasonUserRankScore))
	}
	return i, nil
}

func (m *EnterCompetitveFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterCompetitveFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChallengeUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.ChallengeUid))
	}
	if m.ChallengeRanking != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.ChallengeRanking))
	}
	return i, nil
}

func (m *CompetitveFightNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompetitveFightNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Result))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MyRank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.MyRank))
	}
	return i, nil
}

func (m *BuyCompetitveChallengeTimesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyCompetitveChallengeTimesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BuyCompetitveChallengeTimesAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyCompetitveChallengeTimesAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResidueTimes != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.ResidueTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.TodayCanBuyTimes))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RefCompetitveRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefCompetitveRankReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefCompetitveRankAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefCompetitveRankAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.UserInfo.Size()))
		n3, err := m.UserInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Score != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Score))
	}
	if len(m.Heros) > 0 {
		for _, msg := range m.Heros {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintCompetitve(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CompetitveRankInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompetitveRankInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ranking != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Ranking))
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Score))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	return i, nil
}

func (m *GetCompetitveDailyRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompetitveDailyRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetCompetitveDailyRewardAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCompetitveDailyRewardAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Goods != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.Goods.Size()))
		n4, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.HaveGetRewardState != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCompetitve(dAtA, i, uint64(m.HaveGetRewardState))
	}
	return i, nil
}

func encodeVarintCompetitve(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CompetitveLoadReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CompetitveLoadAck) Size() (n int) {
	var l int
	_ = l
	if m.SeasonTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.SeasonTimes))
	}
	if m.SessionWinTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.SessionWinTimes))
	}
	if m.RemainChallengeTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.RemainChallengeTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.TodayCanBuyTimes))
	}
	if m.UserScore != 0 {
		n += 1 + sovCompetitve(uint64(m.UserScore))
	}
	if m.YestardayReward != 0 {
		n += 1 + sovCompetitve(uint64(m.YestardayReward))
	}
	if len(m.SeasonRank) > 0 {
		for _, e := range m.SeasonRank {
			l = e.Size()
			n += 1 + l + sovCompetitve(uint64(l))
		}
	}
	if len(m.LastSeasonRank) > 0 {
		for _, e := range m.LastSeasonRank {
			l = e.Size()
			n += 1 + l + sovCompetitve(uint64(l))
		}
	}
	if m.BeginTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.BeginTimes))
	}
	if m.LastSeasonUserRank != 0 {
		n += 1 + sovCompetitve(uint64(m.LastSeasonUserRank))
	}
	if m.LastSeasonUserRankScore != 0 {
		n += 1 + sovCompetitve(uint64(m.LastSeasonUserRankScore))
	}
	return n
}

func (m *EnterCompetitveFightReq) Size() (n int) {
	var l int
	_ = l
	if m.ChallengeUid != 0 {
		n += 1 + sovCompetitve(uint64(m.ChallengeUid))
	}
	if m.ChallengeRanking != 0 {
		n += 1 + sovCompetitve(uint64(m.ChallengeRanking))
	}
	return n
}

func (m *CompetitveFightNtf) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovCompetitve(uint64(m.Result))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovCompetitve(uint64(l))
	}
	if m.MyRank != 0 {
		n += 1 + sovCompetitve(uint64(m.MyRank))
	}
	return n
}

func (m *BuyCompetitveChallengeTimesReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BuyCompetitveChallengeTimesAck) Size() (n int) {
	var l int
	_ = l
	if m.ResidueTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.ResidueTimes))
	}
	if m.TodayCanBuyTimes != 0 {
		n += 1 + sovCompetitve(uint64(m.TodayCanBuyTimes))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovCompetitve(uint64(l))
	}
	return n
}

func (m *RefCompetitveRankReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RefCompetitveRankAck) Size() (n int) {
	var l int
	_ = l
	if m.UserInfo != nil {
		l = m.UserInfo.Size()
		n += 1 + l + sovCompetitve(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovCompetitve(uint64(m.Score))
	}
	if len(m.Heros) > 0 {
		for _, e := range m.Heros {
			l = e.Size()
			n += 1 + l + sovCompetitve(uint64(l))
		}
	}
	return n
}

func (m *CompetitveRankInfo) Size() (n int) {
	var l int
	_ = l
	if m.Ranking != 0 {
		n += 1 + sovCompetitve(uint64(m.Ranking))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCompetitve(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovCompetitve(uint64(m.Score))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovCompetitve(uint64(l))
	}
	return n
}

func (m *GetCompetitveDailyRewardReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *GetCompetitveDailyRewardAck) Size() (n int) {
	var l int
	_ = l
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovCompetitve(uint64(l))
	}
	if m.HaveGetRewardState != 0 {
		n += 1 + sovCompetitve(uint64(m.HaveGetRewardState))
	}
	return n
}

func sovCompetitve(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCompetitve(x uint64) (n int) {
	return sovCompetitve(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CompetitveLoadReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompetitveLoadReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompetitveLoadReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompetitveLoadAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompetitveLoadAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompetitveLoadAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonTimes", wireType)
			}
			m.SeasonTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionWinTimes", wireType)
			}
			m.SessionWinTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionWinTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainChallengeTimes", wireType)
			}
			m.RemainChallengeTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainChallengeTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayCanBuyTimes", wireType)
			}
			m.TodayCanBuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayCanBuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserScore", wireType)
			}
			m.UserScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field YestardayReward", wireType)
			}
			m.YestardayReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.YestardayReward |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonRank = append(m.SeasonRank, &CompetitveRankInfo{})
			if err := m.SeasonRank[len(m.SeasonRank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeasonRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSeasonRank = append(m.LastSeasonRank, &CompetitveRankInfo{})
			if err := m.LastSeasonRank[len(m.LastSeasonRank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginTimes", wireType)
			}
			m.BeginTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeasonUserRank", wireType)
			}
			m.LastSeasonUserRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeasonUserRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeasonUserRankScore", wireType)
			}
			m.LastSeasonUserRankScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeasonUserRankScore |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterCompetitveFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterCompetitveFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterCompetitveFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeUid", wireType)
			}
			m.ChallengeUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeRanking", wireType)
			}
			m.ChallengeRanking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeRanking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompetitveFightNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompetitveFightNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompetitveFightNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyRank", wireType)
			}
			m.MyRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyCompetitveChallengeTimesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyCompetitveChallengeTimesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyCompetitveChallengeTimesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyCompetitveChallengeTimesAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyCompetitveChallengeTimesAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyCompetitveChallengeTimesAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResidueTimes", wireType)
			}
			m.ResidueTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResidueTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TodayCanBuyTimes", wireType)
			}
			m.TodayCanBuyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TodayCanBuyTimes |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefCompetitveRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefCompetitveRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefCompetitveRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefCompetitveRankAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefCompetitveRankAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefCompetitveRankAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserInfo == nil {
				m.UserInfo = &BriefUserInfo{}
			}
			if err := m.UserInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heros", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Heros = append(m.Heros, &HeroInfo{})
			if err := m.Heros[len(m.Heros)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompetitveRankInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompetitveRankInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompetitveRankInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompetitveDailyRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompetitveDailyRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompetitveDailyRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCompetitveDailyRewardAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCompetitveDailyRewardAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCompetitveDailyRewardAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCompetitve
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HaveGetRewardState", wireType)
			}
			m.HaveGetRewardState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HaveGetRewardState |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCompetitve(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCompetitve
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCompetitve(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCompetitve
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCompetitve
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCompetitve
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCompetitve
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCompetitve(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCompetitve = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCompetitve   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("competitve.proto", fileDescriptorCompetitve) }

var fileDescriptorCompetitve = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xc5, 0x6d, 0xd3, 0x36, 0x93, 0x08, 0xda, 0xa5, 0x6a, 0xa3, 0x02, 0x56, 0xe4, 0x53, 0x84,
	0x44, 0x0e, 0x41, 0x42, 0x9c, 0x90, 0x48, 0x80, 0x82, 0x84, 0x7a, 0x70, 0xa9, 0x38, 0x6f, 0xec,
	0x89, 0xb3, 0x6a, 0xbc, 0x9b, 0xee, 0x6e, 0x5a, 0x7c, 0xe2, 0xcc, 0x1f, 0x20, 0xbe, 0x88, 0x23,
	0x9f, 0x80, 0xca, 0x8f, 0xa0, 0xdd, 0x75, 0x6c, 0x27, 0x4d, 0xda, 0xe3, 0xbc, 0x79, 0xb3, 0xfb,
	0xfc, 0xf6, 0x8d, 0x61, 0x2f, 0x12, 0xe9, 0x14, 0x35, 0xd3, 0x57, 0xd8, 0x9d, 0x4a, 0xa1, 0x05,
	0xd9, 0x98, 0x0e, 0x8f, 0x9b, 0x91, 0x48, 0x53, 0xc1, 0x1d, 0x12, 0x3c, 0x86, 0xfd, 0x41, 0xc1,
	0xfa, 0x2c, 0x68, 0x1c, 0xe2, 0x65, 0xf0, 0x63, 0x6b, 0x19, 0x7d, 0x1b, 0x5d, 0x90, 0x36, 0x34,
	0x14, 0x52, 0x25, 0xf8, 0x17, 0x96, 0xa2, 0x6a, 0x79, 0x6d, 0xaf, 0x53, 0x0b, 0xab, 0x10, 0xe9,
	0xc0, 0x23, 0x85, 0x4a, 0x31, 0xc1, 0xbf, 0xb2, 0x9c, 0xb5, 0x61, 0x59, 0xcb, 0x30, 0xe9, 0xc1,
	0x81, 0xc4, 0x94, 0x32, 0x3e, 0x18, 0xd3, 0xc9, 0x04, 0x79, 0x82, 0x8e, 0xbe, 0x69, 0xe9, 0x2b,
	0x7b, 0xe4, 0x39, 0xec, 0x69, 0x11, 0xd3, 0x6c, 0x40, 0x79, 0x7f, 0x96, 0x39, 0xfe, 0x96, 0xe5,
	0xdf, 0xc2, 0xc9, 0x53, 0xa8, 0xcf, 0x14, 0xca, 0xb3, 0x48, 0x48, 0x6c, 0xd5, 0x2c, 0xa9, 0x04,
	0x8c, 0xce, 0x0c, 0x95, 0xa6, 0x32, 0xa6, 0x59, 0x88, 0xd7, 0x54, 0xc6, 0xad, 0x6d, 0xa7, 0x73,
	0x09, 0x26, 0xaf, 0x00, 0xdc, 0x07, 0x86, 0x94, 0x5f, 0xb4, 0x76, 0xda, 0x9b, 0x9d, 0x46, 0xef,
	0xb0, 0x3b, 0x1d, 0x76, 0x4b, 0x7b, 0x4c, 0xe7, 0x13, 0x1f, 0x89, 0xb0, 0xc2, 0x24, 0x6f, 0xe0,
	0xe1, 0x84, 0x2a, 0x7d, 0x56, 0xce, 0xee, 0xde, 0x39, 0xbb, 0xc4, 0x26, 0x3e, 0xc0, 0x10, 0x93,
	0xb9, 0x89, 0x75, 0x2b, 0xae, 0x82, 0x90, 0x2e, 0x90, 0x72, 0xe2, 0x5c, 0xa1, 0xb4, 0x77, 0x80,
	0xe5, 0xad, 0xe8, 0x90, 0xd7, 0x70, 0x74, 0x1b, 0x75, 0xee, 0x34, 0xec, 0xd0, 0xba, 0x76, 0xc0,
	0xe0, 0xe8, 0x3d, 0xd7, 0x28, 0x4b, 0xd1, 0x1f, 0x58, 0x32, 0xd6, 0x21, 0x5e, 0x92, 0x00, 0x9a,
	0xd1, 0xfc, 0x89, 0xce, 0x59, 0x9c, 0x27, 0x62, 0x01, 0x33, 0x8f, 0x56, 0xd4, 0xe6, 0x50, 0xc6,
	0x93, 0x3c, 0x13, 0xb7, 0xf0, 0x80, 0x03, 0x59, 0xba, 0xe5, 0x54, 0x8f, 0xc8, 0x21, 0x6c, 0x4b,
	0x54, 0xb3, 0x89, 0xce, 0xcf, 0xcf, 0x2b, 0xd2, 0x81, 0x5a, 0x22, 0x44, 0xec, 0x22, 0xd6, 0xe8,
	0x11, 0xe3, 0xec, 0x89, 0x01, 0x06, 0x63, 0xca, 0x13, 0x3c, 0xd5, 0xa3, 0xd0, 0x11, 0xcc, 0x09,
	0x69, 0x66, 0x0d, 0x72, 0xf1, 0xca, 0xab, 0xa0, 0x0d, 0x7e, 0x7f, 0x96, 0x95, 0x57, 0x2e, 0xe6,
	0xcd, 0x2c, 0xc2, 0x2f, 0xef, 0x4e, 0x8a, 0xd9, 0x8a, 0x00, 0x9a, 0x12, 0x15, 0x8b, 0x67, 0x58,
	0x5d, 0x8b, 0x05, 0x6c, 0x65, 0x72, 0x37, 0xd6, 0x24, 0xb7, 0xf8, 0xac, 0xad, 0x7b, 0x3e, 0x2b,
	0x38, 0x84, 0x83, 0x10, 0x47, 0x8b, 0x61, 0x32, 0xa2, 0xbf, 0xaf, 0xc0, 0x8d, 0xd2, 0x17, 0xb0,
	0x6b, 0x56, 0xc0, 0xe4, 0xcd, 0xaa, 0x6c, 0xf4, 0xf6, 0xcd, 0xe1, 0x7d, 0xc9, 0x70, 0x74, 0x9e,
	0x37, 0xc2, 0x82, 0x42, 0x0e, 0xa0, 0xa6, 0x6c, 0x40, 0x9c, 0x52, 0x57, 0x90, 0x00, 0x6a, 0x63,
	0x94, 0xc2, 0x6c, 0xaa, 0xc9, 0x73, 0xd3, 0x9c, 0xf0, 0x11, 0xa5, 0xb0, 0xc3, 0xae, 0x15, 0x7c,
	0xab, 0xbe, 0xe3, 0x3c, 0xe2, 0xa4, 0x05, 0x3b, 0x32, 0x0f, 0x80, 0xf3, 0x68, 0x5e, 0x9a, 0xf7,
	0xa1, 0x57, 0x54, 0x53, 0x69, 0xaf, 0xaa, 0x87, 0x79, 0x55, 0x2a, 0xd8, 0xac, 0x2a, 0x38, 0x86,
	0x5d, 0xce, 0xa2, 0x8b, 0x53, 0x9a, 0xa2, 0xf5, 0xa8, 0x1e, 0x16, 0x75, 0xf0, 0x0c, 0x9e, 0x9c,
	0xa0, 0x2e, 0x2f, 0x7f, 0x47, 0xd9, 0x24, 0x5f, 0x65, 0xe3, 0xcc, 0xf5, 0xfa, 0xb6, 0x31, 0xa8,
	0xb0, 0xde, 0xbb, 0x2f, 0x51, 0x5d, 0x20, 0x63, 0x7a, 0x85, 0x27, 0xa8, 0xdd, 0xf4, 0x99, 0xa6,
	0x7a, 0x6e, 0xd4, 0x8a, 0x4e, 0x7f, 0xef, 0xf7, 0x8d, 0xef, 0xfd, 0xb9, 0xf1, 0xbd, 0xbf, 0x37,
	0xbe, 0xf7, 0xf3, 0x9f, 0xff, 0x60, 0xb8, 0x6d, 0x7f, 0xbf, 0x2f, 0xff, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x63, 0x72, 0x51, 0x89, 0xa4, 0x05, 0x00, 0x00,
}
