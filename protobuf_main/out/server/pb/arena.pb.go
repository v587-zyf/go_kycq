// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arena.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 打开页面
type ArenaOpenReq struct {
}

func (m *ArenaOpenReq) Reset()                    { *m = ArenaOpenReq{} }
func (m *ArenaOpenReq) String() string            { return proto.CompactTextString(m) }
func (*ArenaOpenReq) ProtoMessage()               {}
func (*ArenaOpenReq) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{0} }

type ArenaOpenAck struct {
	Three       []*RankInfo  `protobuf:"bytes,1,rep,name=three" json:"three,omitempty"`
	ArenaRank   []*ArenaRank `protobuf:"bytes,2,rep,name=arenaRank" json:"arenaRank,omitempty"`
	DareNum     int32        `protobuf:"varint,3,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
	BuyDareNum  int32        `protobuf:"varint,4,opt,name=buyDareNum,proto3" json:"buyDareNum,omitempty"`
	BuyDareNums int32        `protobuf:"varint,5,opt,name=buyDareNums,proto3" json:"buyDareNums,omitempty"`
	Ranking     int32        `protobuf:"varint,6,opt,name=ranking,proto3" json:"ranking,omitempty"`
}

func (m *ArenaOpenAck) Reset()                    { *m = ArenaOpenAck{} }
func (m *ArenaOpenAck) String() string            { return proto.CompactTextString(m) }
func (*ArenaOpenAck) ProtoMessage()               {}
func (*ArenaOpenAck) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{1} }

func (m *ArenaOpenAck) GetThree() []*RankInfo {
	if m != nil {
		return m.Three
	}
	return nil
}

func (m *ArenaOpenAck) GetArenaRank() []*ArenaRank {
	if m != nil {
		return m.ArenaRank
	}
	return nil
}

func (m *ArenaOpenAck) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func (m *ArenaOpenAck) GetBuyDareNum() int32 {
	if m != nil {
		return m.BuyDareNum
	}
	return 0
}

func (m *ArenaOpenAck) GetBuyDareNums() int32 {
	if m != nil {
		return m.BuyDareNums
	}
	return 0
}

func (m *ArenaOpenAck) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

// 进入战斗
type EnterArenaFightReq struct {
	ChallengeUid     int32 `protobuf:"varint,1,opt,name=challengeUid,proto3" json:"challengeUid,omitempty"`
	ChallengeRanking int32 `protobuf:"varint,2,opt,name=challengeRanking,proto3" json:"challengeRanking,omitempty"`
}

func (m *EnterArenaFightReq) Reset()                    { *m = EnterArenaFightReq{} }
func (m *EnterArenaFightReq) String() string            { return proto.CompactTextString(m) }
func (*EnterArenaFightReq) ProtoMessage()               {}
func (*EnterArenaFightReq) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{2} }

func (m *EnterArenaFightReq) GetChallengeUid() int32 {
	if m != nil {
		return m.ChallengeUid
	}
	return 0
}

func (m *EnterArenaFightReq) GetChallengeRanking() int32 {
	if m != nil {
		return m.ChallengeRanking
	}
	return 0
}

type ArenaFightNtf struct {
	Result int32           `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Goods  *GoodsChangeNtf `protobuf:"bytes,2,opt,name=goods" json:"goods,omitempty"`
	MyRank int32           `protobuf:"varint,3,opt,name=myRank,proto3" json:"myRank,omitempty"`
}

func (m *ArenaFightNtf) Reset()                    { *m = ArenaFightNtf{} }
func (m *ArenaFightNtf) String() string            { return proto.CompactTextString(m) }
func (*ArenaFightNtf) ProtoMessage()               {}
func (*ArenaFightNtf) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{3} }

func (m *ArenaFightNtf) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *ArenaFightNtf) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

func (m *ArenaFightNtf) GetMyRank() int32 {
	if m != nil {
		return m.MyRank
	}
	return 0
}

// 购买次数
type BuyArenaFightNumReq struct {
}

func (m *BuyArenaFightNumReq) Reset()                    { *m = BuyArenaFightNumReq{} }
func (m *BuyArenaFightNumReq) String() string            { return proto.CompactTextString(m) }
func (*BuyArenaFightNumReq) ProtoMessage()               {}
func (*BuyArenaFightNumReq) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{4} }

type BuyArenaFightNumAck struct {
	DareNum     int32           `protobuf:"varint,1,opt,name=dareNum,proto3" json:"dareNum,omitempty"`
	BuyDareNum  int32           `protobuf:"varint,2,opt,name=buyDareNum,proto3" json:"buyDareNum,omitempty"`
	BuyDareNums int32           `protobuf:"varint,3,opt,name=buyDareNums,proto3" json:"buyDareNums,omitempty"`
	Goods       *GoodsChangeNtf `protobuf:"bytes,4,opt,name=goods" json:"goods,omitempty"`
}

func (m *BuyArenaFightNumAck) Reset()                    { *m = BuyArenaFightNumAck{} }
func (m *BuyArenaFightNumAck) String() string            { return proto.CompactTextString(m) }
func (*BuyArenaFightNumAck) ProtoMessage()               {}
func (*BuyArenaFightNumAck) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{5} }

func (m *BuyArenaFightNumAck) GetDareNum() int32 {
	if m != nil {
		return m.DareNum
	}
	return 0
}

func (m *BuyArenaFightNumAck) GetBuyDareNum() int32 {
	if m != nil {
		return m.BuyDareNum
	}
	return 0
}

func (m *BuyArenaFightNumAck) GetBuyDareNums() int32 {
	if m != nil {
		return m.BuyDareNums
	}
	return 0
}

func (m *BuyArenaFightNumAck) GetGoods() *GoodsChangeNtf {
	if m != nil {
		return m.Goods
	}
	return nil
}

// 刷新对手
type RefArenaRankReq struct {
}

func (m *RefArenaRankReq) Reset()                    { *m = RefArenaRankReq{} }
func (m *RefArenaRankReq) String() string            { return proto.CompactTextString(m) }
func (*RefArenaRankReq) ProtoMessage()               {}
func (*RefArenaRankReq) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{6} }

type RefArenaRankAck struct {
	ArenaRank []*ArenaRank `protobuf:"bytes,1,rep,name=arenaRank" json:"arenaRank,omitempty"`
	Three     []*RankInfo  `protobuf:"bytes,2,rep,name=three" json:"three,omitempty"`
}

func (m *RefArenaRankAck) Reset()                    { *m = RefArenaRankAck{} }
func (m *RefArenaRankAck) String() string            { return proto.CompactTextString(m) }
func (*RefArenaRankAck) ProtoMessage()               {}
func (*RefArenaRankAck) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{7} }

func (m *RefArenaRankAck) GetArenaRank() []*ArenaRank {
	if m != nil {
		return m.ArenaRank
	}
	return nil
}

func (m *RefArenaRankAck) GetThree() []*RankInfo {
	if m != nil {
		return m.Three
	}
	return nil
}

type ArenaRank struct {
	Ranking  int32          `protobuf:"varint,1,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Userinfo *BriefUserInfo `protobuf:"bytes,2,opt,name=userinfo" json:"userinfo,omitempty"`
}

func (m *ArenaRank) Reset()                    { *m = ArenaRank{} }
func (m *ArenaRank) String() string            { return proto.CompactTextString(m) }
func (*ArenaRank) ProtoMessage()               {}
func (*ArenaRank) Descriptor() ([]byte, []int) { return fileDescriptorArena, []int{8} }

func (m *ArenaRank) GetRanking() int32 {
	if m != nil {
		return m.Ranking
	}
	return 0
}

func (m *ArenaRank) GetUserinfo() *BriefUserInfo {
	if m != nil {
		return m.Userinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ArenaOpenReq)(nil), "pb.ArenaOpenReq")
	proto.RegisterType((*ArenaOpenAck)(nil), "pb.ArenaOpenAck")
	proto.RegisterType((*EnterArenaFightReq)(nil), "pb.EnterArenaFightReq")
	proto.RegisterType((*ArenaFightNtf)(nil), "pb.ArenaFightNtf")
	proto.RegisterType((*BuyArenaFightNumReq)(nil), "pb.BuyArenaFightNumReq")
	proto.RegisterType((*BuyArenaFightNumAck)(nil), "pb.BuyArenaFightNumAck")
	proto.RegisterType((*RefArenaRankReq)(nil), "pb.RefArenaRankReq")
	proto.RegisterType((*RefArenaRankAck)(nil), "pb.RefArenaRankAck")
	proto.RegisterType((*ArenaRank)(nil), "pb.ArenaRank")
}
func (m *ArenaOpenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaOpenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ArenaOpenAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaOpenAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Three) > 0 {
		for _, msg := range m.Three {
			dAtA[i] = 0xa
			i++
			i = encodeVarintArena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ArenaRank) > 0 {
		for _, msg := range m.ArenaRank {
			dAtA[i] = 0x12
			i++
			i = encodeVarintArena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.DareNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.DareNum))
	}
	if m.BuyDareNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.BuyDareNum))
	}
	if m.BuyDareNums != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.BuyDareNums))
	}
	if m.Ranking != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.Ranking))
	}
	return i, nil
}

func (m *EnterArenaFightReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnterArenaFightReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChallengeUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.ChallengeUid))
	}
	if m.ChallengeRanking != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.ChallengeRanking))
	}
	return i, nil
}

func (m *ArenaFightNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaFightNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.Result))
	}
	if m.Goods != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.Goods.Size()))
		n1, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MyRank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.MyRank))
	}
	return i, nil
}

func (m *BuyArenaFightNumReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyArenaFightNumReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BuyArenaFightNumAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyArenaFightNumAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DareNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.DareNum))
	}
	if m.BuyDareNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.BuyDareNum))
	}
	if m.BuyDareNums != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.BuyDareNums))
	}
	if m.Goods != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.Goods.Size()))
		n2, err := m.Goods.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RefArenaRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefArenaRankReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *RefArenaRankAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefArenaRankAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ArenaRank) > 0 {
		for _, msg := range m.ArenaRank {
			dAtA[i] = 0xa
			i++
			i = encodeVarintArena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Three) > 0 {
		for _, msg := range m.Three {
			dAtA[i] = 0x12
			i++
			i = encodeVarintArena(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ArenaRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArenaRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ranking != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.Ranking))
	}
	if m.Userinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintArena(dAtA, i, uint64(m.Userinfo.Size()))
		n3, err := m.Userinfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintArena(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ArenaOpenReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ArenaOpenAck) Size() (n int) {
	var l int
	_ = l
	if len(m.Three) > 0 {
		for _, e := range m.Three {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	if len(m.ArenaRank) > 0 {
		for _, e := range m.ArenaRank {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	if m.DareNum != 0 {
		n += 1 + sovArena(uint64(m.DareNum))
	}
	if m.BuyDareNum != 0 {
		n += 1 + sovArena(uint64(m.BuyDareNum))
	}
	if m.BuyDareNums != 0 {
		n += 1 + sovArena(uint64(m.BuyDareNums))
	}
	if m.Ranking != 0 {
		n += 1 + sovArena(uint64(m.Ranking))
	}
	return n
}

func (m *EnterArenaFightReq) Size() (n int) {
	var l int
	_ = l
	if m.ChallengeUid != 0 {
		n += 1 + sovArena(uint64(m.ChallengeUid))
	}
	if m.ChallengeRanking != 0 {
		n += 1 + sovArena(uint64(m.ChallengeRanking))
	}
	return n
}

func (m *ArenaFightNtf) Size() (n int) {
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovArena(uint64(m.Result))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	if m.MyRank != 0 {
		n += 1 + sovArena(uint64(m.MyRank))
	}
	return n
}

func (m *BuyArenaFightNumReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *BuyArenaFightNumAck) Size() (n int) {
	var l int
	_ = l
	if m.DareNum != 0 {
		n += 1 + sovArena(uint64(m.DareNum))
	}
	if m.BuyDareNum != 0 {
		n += 1 + sovArena(uint64(m.BuyDareNum))
	}
	if m.BuyDareNums != 0 {
		n += 1 + sovArena(uint64(m.BuyDareNums))
	}
	if m.Goods != nil {
		l = m.Goods.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func (m *RefArenaRankReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *RefArenaRankAck) Size() (n int) {
	var l int
	_ = l
	if len(m.ArenaRank) > 0 {
		for _, e := range m.ArenaRank {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	if len(m.Three) > 0 {
		for _, e := range m.Three {
			l = e.Size()
			n += 1 + l + sovArena(uint64(l))
		}
	}
	return n
}

func (m *ArenaRank) Size() (n int) {
	var l int
	_ = l
	if m.Ranking != 0 {
		n += 1 + sovArena(uint64(m.Ranking))
	}
	if m.Userinfo != nil {
		l = m.Userinfo.Size()
		n += 1 + l + sovArena(uint64(l))
	}
	return n
}

func sovArena(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozArena(x uint64) (n int) {
	return sovArena(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArenaOpenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaOpenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaOpenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaOpenAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaOpenAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaOpenAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Three", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Three = append(m.Three, &RankInfo{})
			if err := m.Three[len(m.Three)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaRank = append(m.ArenaRank, &ArenaRank{})
			if err := m.ArenaRank[len(m.ArenaRank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyDareNum", wireType)
			}
			m.BuyDareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyDareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyDareNums", wireType)
			}
			m.BuyDareNums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyDareNums |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnterArenaFightReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnterArenaFightReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnterArenaFightReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeUid", wireType)
			}
			m.ChallengeUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeUid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeRanking", wireType)
			}
			m.ChallengeRanking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeRanking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaFightNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaFightNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaFightNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyRank", wireType)
			}
			m.MyRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyArenaFightNumReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyArenaFightNumReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyArenaFightNumReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyArenaFightNumAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyArenaFightNumAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyArenaFightNumAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DareNum", wireType)
			}
			m.DareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyDareNum", wireType)
			}
			m.BuyDareNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyDareNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyDareNums", wireType)
			}
			m.BuyDareNums = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyDareNums |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Goods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Goods == nil {
				m.Goods = &GoodsChangeNtf{}
			}
			if err := m.Goods.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefArenaRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefArenaRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefArenaRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefArenaRankAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefArenaRankAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefArenaRankAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArenaRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArenaRank = append(m.ArenaRank, &ArenaRank{})
			if err := m.ArenaRank[len(m.ArenaRank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Three", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Three = append(m.Three, &RankInfo{})
			if err := m.Three[len(m.Three)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArenaRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArena
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArenaRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArenaRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranking", wireType)
			}
			m.Ranking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ranking |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Userinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArena
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArena
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Userinfo == nil {
				m.Userinfo = &BriefUserInfo{}
			}
			if err := m.Userinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArena(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthArena
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArena(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArena
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArena
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthArena
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowArena
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipArena(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthArena = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArena   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("arena.proto", fileDescriptorArena) }

var fileDescriptorArena = []byte{
	// 422 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0xc5, 0xe9, 0xb4, 0x30, 0xb7, 0x19, 0x98, 0x31, 0x02, 0x45, 0x2c, 0xa2, 0xca, 0xab, 0x0a,
	0x44, 0x17, 0xc3, 0x17, 0xa4, 0xbc, 0xc4, 0xa6, 0x48, 0x16, 0xfd, 0x80, 0xa4, 0xb9, 0x79, 0xa8,
	0x8d, 0x9d, 0x3a, 0xc9, 0xa2, 0x7f, 0x82, 0xc4, 0x0f, 0xb1, 0x64, 0xc3, 0x1e, 0x95, 0x1f, 0x41,
	0x76, 0xd2, 0x3c, 0x54, 0x31, 0x5d, 0x9e, 0x73, 0x4f, 0x8e, 0xed, 0x73, 0x4f, 0x60, 0xea, 0x2b,
	0x14, 0xfe, 0x22, 0x57, 0xb2, 0x94, 0xd4, 0xca, 0x83, 0x57, 0xf6, 0x46, 0x66, 0x99, 0x14, 0x35,
	0xc3, 0x9e, 0x82, 0xed, 0x69, 0xc1, 0xd7, 0x1c, 0x05, 0xc7, 0x3d, 0xfb, 0x4d, 0x7a, 0x84, 0xb7,
	0xd9, 0x52, 0x06, 0xe3, 0x32, 0x51, 0x88, 0x0e, 0x99, 0x8d, 0xe6, 0xd3, 0x7b, 0x7b, 0x91, 0x07,
	0x0b, 0xee, 0x8b, 0xed, 0x17, 0x11, 0x49, 0x5e, 0x8f, 0xe8, 0x1b, 0xb8, 0x36, 0xa7, 0x68, 0xde,
	0xb1, 0x8c, 0xee, 0x46, 0xeb, 0xbc, 0x13, 0xc9, 0xbb, 0x39, 0x75, 0xe0, 0x71, 0xe8, 0x2b, 0x5c,
	0x55, 0x99, 0x33, 0x9a, 0x91, 0xf9, 0x98, 0x9f, 0x20, 0x75, 0x01, 0x82, 0xea, 0xf0, 0xa1, 0x19,
	0x5e, 0x99, 0x61, 0x8f, 0xa1, 0x33, 0x98, 0x76, 0xa8, 0x70, 0xc6, 0x46, 0xd0, 0xa7, 0xb4, 0xb7,
	0xf2, 0xc5, 0x36, 0x15, 0xb1, 0x33, 0xa9, 0xbd, 0x1b, 0xc8, 0x42, 0xa0, 0x1f, 0x45, 0x89, 0xca,
	0x5c, 0xe9, 0x53, 0x1a, 0x27, 0x25, 0xc7, 0x3d, 0x65, 0x60, 0x6f, 0x12, 0x7f, 0xb7, 0x43, 0x11,
	0xe3, 0x3a, 0x0d, 0x1d, 0x62, 0x3e, 0x1a, 0x70, 0xf4, 0x35, 0xdc, 0xb6, 0x98, 0x37, 0xe6, 0x96,
	0xd1, 0x9d, 0xf1, 0x2c, 0x85, 0x9b, 0xee, 0x80, 0x55, 0x19, 0xd1, 0x97, 0x30, 0x51, 0x58, 0x54,
	0xbb, 0xb2, 0xb1, 0x6e, 0x10, 0x9d, 0xc3, 0x38, 0x96, 0x32, 0x2c, 0x8c, 0xd3, 0xf4, 0x9e, 0xea,
	0xb4, 0x3e, 0x6b, 0xe2, 0x7d, 0xe2, 0x8b, 0x18, 0x57, 0x65, 0xc4, 0x6b, 0x81, 0x76, 0xc8, 0x0e,
	0x26, 0xd8, 0x3a, 0xad, 0x06, 0xb1, 0x17, 0xf0, 0x7c, 0x59, 0x1d, 0x7a, 0xa7, 0x55, 0x99, 0xde,
	0xdf, 0x0f, 0x72, 0xce, 0xeb, 0x35, 0xf6, 0x52, 0x27, 0x0f, 0xa5, 0x6e, 0x5d, 0x4a, 0x7d, 0x74,
	0x9e, 0x7a, 0xfb, 0x98, 0xab, 0x0b, 0x8f, 0x61, 0x77, 0xf0, 0x8c, 0x63, 0xd4, 0xd5, 0x02, 0xf7,
	0x2c, 0x18, 0x52, 0xfa, 0xae, 0x83, 0x3a, 0x91, 0x0b, 0x75, 0x6a, 0xfb, 0x69, 0xfd, 0xb7, 0x9f,
	0xec, 0x1b, 0x5c, 0x7b, 0xfd, 0xfe, 0x9d, 0x3a, 0x42, 0x06, 0x1d, 0xa1, 0x6f, 0xe1, 0x49, 0x55,
	0xa0, 0x4a, 0x45, 0x24, 0x9b, 0xbd, 0xdc, 0x69, 0xb7, 0xa5, 0x4a, 0x31, 0x5a, 0x17, 0xa8, 0x8c,
	0x65, 0x2b, 0x59, 0xde, 0xfe, 0x3c, 0xba, 0xe4, 0xd7, 0xd1, 0x25, 0x7f, 0x8e, 0x2e, 0xf9, 0xfe,
	0xd7, 0x7d, 0x14, 0x4c, 0xcc, 0x3f, 0xf5, 0xee, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0xcd,
	0x6d, 0x0c, 0x74, 0x03, 0x00, 0x00,
}
