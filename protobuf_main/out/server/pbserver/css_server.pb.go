// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: css_server.proto

package pbserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SyncUserInfoNtf struct {
	UserId      int32  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OpenId      string `protobuf:"bytes,2,opt,name=openId,proto3" json:"openId,omitempty"`
	ServerId    int32  `protobuf:"varint,3,opt,name=serverId,proto3" json:"serverId,omitempty"`
	ServerIndex int32  `protobuf:"varint,4,opt,name=serverIndex,proto3" json:"serverIndex,omitempty"`
	Sex         int32  `protobuf:"varint,5,opt,name=sex,proto3" json:"sex,omitempty"`
	Nickname    string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level       int32  `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	Vip         int32  `protobuf:"varint,8,opt,name=vip,proto3" json:"vip,omitempty"`
	Combat      int64  `protobuf:"varint,9,opt,name=combat,proto3" json:"combat,omitempty"`
	CreateTime  int32  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Avatar      string `protobuf:"bytes,11,opt,name=avatar,proto3" json:"avatar,omitempty"`
}

func (m *SyncUserInfoNtf) Reset()                    { *m = SyncUserInfoNtf{} }
func (m *SyncUserInfoNtf) String() string            { return proto.CompactTextString(m) }
func (*SyncUserInfoNtf) ProtoMessage()               {}
func (*SyncUserInfoNtf) Descriptor() ([]byte, []int) { return fileDescriptorCssServer, []int{0} }

func (m *SyncUserInfoNtf) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SyncUserInfoNtf) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *SyncUserInfoNtf) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *SyncUserInfoNtf) GetServerIndex() int32 {
	if m != nil {
		return m.ServerIndex
	}
	return 0
}

func (m *SyncUserInfoNtf) GetSex() int32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *SyncUserInfoNtf) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *SyncUserInfoNtf) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *SyncUserInfoNtf) GetVip() int32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *SyncUserInfoNtf) GetCombat() int64 {
	if m != nil {
		return m.Combat
	}
	return 0
}

func (m *SyncUserInfoNtf) GetCreateTime() int32 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SyncUserInfoNtf) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

type CCSToGsCrossFsIdChangeNtf struct {
	CrossFsId int32 `protobuf:"varint,1,opt,name=crossFsId,proto3" json:"crossFsId,omitempty"`
}

func (m *CCSToGsCrossFsIdChangeNtf) Reset()         { *m = CCSToGsCrossFsIdChangeNtf{} }
func (m *CCSToGsCrossFsIdChangeNtf) String() string { return proto.CompactTextString(m) }
func (*CCSToGsCrossFsIdChangeNtf) ProtoMessage()    {}
func (*CCSToGsCrossFsIdChangeNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorCssServer, []int{1}
}

func (m *CCSToGsCrossFsIdChangeNtf) GetCrossFsId() int32 {
	if m != nil {
		return m.CrossFsId
	}
	return 0
}

func init() {
	proto.RegisterType((*SyncUserInfoNtf)(nil), "pbserver.SyncUserInfoNtf")
	proto.RegisterType((*CCSToGsCrossFsIdChangeNtf)(nil), "pbserver.CCSToGsCrossFsIdChangeNtf")
}
func (m *SyncUserInfoNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncUserInfoNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.UserId))
	}
	if len(m.OpenId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if m.ServerId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.ServerId))
	}
	if m.ServerIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.ServerIndex))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.Sex))
	}
	if len(m.Nickname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(len(m.Nickname)))
		i += copy(dAtA[i:], m.Nickname)
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.Level))
	}
	if m.Vip != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.Vip))
	}
	if m.Combat != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.Combat))
	}
	if m.CreateTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.CreateTime))
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	return i, nil
}

func (m *CCSToGsCrossFsIdChangeNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CCSToGsCrossFsIdChangeNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CrossFsId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCssServer(dAtA, i, uint64(m.CrossFsId))
	}
	return i, nil
}

func encodeVarintCssServer(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SyncUserInfoNtf) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovCssServer(uint64(m.UserId))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovCssServer(uint64(l))
	}
	if m.ServerId != 0 {
		n += 1 + sovCssServer(uint64(m.ServerId))
	}
	if m.ServerIndex != 0 {
		n += 1 + sovCssServer(uint64(m.ServerIndex))
	}
	if m.Sex != 0 {
		n += 1 + sovCssServer(uint64(m.Sex))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovCssServer(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovCssServer(uint64(m.Level))
	}
	if m.Vip != 0 {
		n += 1 + sovCssServer(uint64(m.Vip))
	}
	if m.Combat != 0 {
		n += 1 + sovCssServer(uint64(m.Combat))
	}
	if m.CreateTime != 0 {
		n += 1 + sovCssServer(uint64(m.CreateTime))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCssServer(uint64(l))
	}
	return n
}

func (m *CCSToGsCrossFsIdChangeNtf) Size() (n int) {
	var l int
	_ = l
	if m.CrossFsId != 0 {
		n += 1 + sovCssServer(uint64(m.CrossFsId))
	}
	return n
}

func sovCssServer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCssServer(x uint64) (n int) {
	return sovCssServer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SyncUserInfoNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCssServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncUserInfoNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncUserInfoNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCssServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIndex", wireType)
			}
			m.ServerIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCssServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Combat", wireType)
			}
			m.Combat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Combat |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCssServer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCssServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCssServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CCSToGsCrossFsIdChangeNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCssServer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CCSToGsCrossFsIdChangeNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CCSToGsCrossFsIdChangeNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrossFsId", wireType)
			}
			m.CrossFsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrossFsId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCssServer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCssServer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCssServer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCssServer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCssServer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCssServer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCssServer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCssServer(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCssServer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCssServer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("css_server.proto", fileDescriptorCssServer) }

var fileDescriptorCssServer = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0x4b, 0x4b, 0x73, 0x1d, 0x88, 0x2c, 0x84, 0x0c, 0x42, 0x51, 0xd4, 0x29, 0x13,
	0x0b, 0x13, 0x2b, 0x91, 0x40, 0x59, 0x18, 0xd2, 0x32, 0x23, 0xc7, 0xb9, 0x42, 0x44, 0x63, 0x47,
	0x76, 0x88, 0xca, 0x9b, 0xf0, 0x02, 0xbc, 0x0b, 0x23, 0x8f, 0x80, 0xc2, 0x8b, 0x20, 0xdb, 0xa1,
	0x74, 0xbb, 0xef, 0x3f, 0xff, 0xbf, 0xed, 0x3b, 0x08, 0x85, 0x31, 0x8f, 0x06, 0x75, 0x87, 0xfa,
	0xb2, 0xd1, 0xaa, 0x55, 0x74, 0xd6, 0x14, 0x9e, 0x17, 0x1f, 0x23, 0x38, 0x5e, 0xbe, 0x49, 0xf1,
	0x60, 0x50, 0x67, 0x72, 0xad, 0xee, 0xdb, 0x35, 0x3d, 0x85, 0xe9, 0xab, 0xc5, 0x92, 0x91, 0x98,
	0x24, 0x93, 0x7c, 0x20, 0xab, 0xab, 0x06, 0x65, 0x56, 0xb2, 0x51, 0x4c, 0x92, 0x20, 0x1f, 0x88,
	0x9e, 0xc3, 0xcc, 0xa7, 0x65, 0x25, 0x1b, 0x3b, 0xc7, 0x8e, 0x69, 0x0c, 0xf3, 0xa1, 0x96, 0x25,
	0x6e, 0xd9, 0xa1, 0x6b, 0xef, 0x4b, 0x34, 0x84, 0xb1, 0xc1, 0x2d, 0x9b, 0xb8, 0x8e, 0x2d, 0x6d,
	0x9e, 0xac, 0xc4, 0x8b, 0xe4, 0x35, 0xb2, 0xa9, 0xbb, 0x69, 0xc7, 0xf4, 0x04, 0x26, 0x1b, 0xec,
	0x70, 0xc3, 0x8e, 0xdc, 0x79, 0x0f, 0x36, 0xa3, 0xab, 0x1a, 0x36, 0xf3, 0x19, 0x5d, 0xd5, 0xd8,
	0xb7, 0x0a, 0x55, 0x17, 0xbc, 0x65, 0x41, 0x4c, 0x92, 0x71, 0x3e, 0x10, 0x8d, 0x00, 0x84, 0x46,
	0xde, 0xe2, 0xaa, 0xaa, 0x91, 0x81, 0x33, 0xec, 0x29, 0xd6, 0xc7, 0x3b, 0xde, 0x72, 0xcd, 0xe6,
	0xfe, 0x8f, 0x9e, 0x16, 0xd7, 0x70, 0x96, 0xa6, 0xcb, 0x95, 0xba, 0x33, 0xa9, 0x56, 0xc6, 0xdc,
	0x9a, 0xac, 0x4c, 0x9f, 0xb9, 0x7c, 0x42, 0x3b, 0xb0, 0x0b, 0x08, 0xc4, 0x9f, 0x3a, 0xcc, 0xec,
	0x5f, 0xb8, 0x09, 0x3f, 0xfb, 0x88, 0x7c, 0xf5, 0x11, 0xf9, 0xee, 0x23, 0xf2, 0xfe, 0x13, 0x1d,
	0x14, 0x53, 0xb7, 0x85, 0xab, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xcf, 0x56, 0x86, 0x99,
	0x01, 0x00, 0x00,
}
