// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: challenge.proto

/*
	Package pbserver is a generated protocol buffer package.

	It is generated from these files:
		challenge.proto
		common.proto
		css_server.proto
		fcc_server.proto
		fs_server.proto
		loginserver.proto

	It has these top-level messages:
		ChallengeSendLoseRewardNtf
		ErrorAck
		ItemUnit
		ItemUnits
		ItemUnitForPickUp
		HandShakeReq
		HandShakeAck
		HandCloseNtf
		Actor
		ActorHero
		ActorDisplayInfo
		ActorProp
		ActorPet
		ActorFit
		FitSkill
		Skill
		SyncUserInfoNtf
		CCSToGsCrossFsIdChangeNtf
		GSMessageToFS
		FSMessageToGS
		FSCallMessageToGS
		GSCallMessageToFS
		GsRouteMessageToFight
		FSCreateFightReq
		FSCreateFightAck
		FsResidentFightNtf
		FsFieldBossInfoNtf
		FSContinueFightReq
		FSFightEndNtf
		FSEnterFightReq
		FSEnterFightAck
		FSUpdateUserInfoNtf
		FSUpdateUserInfoAck
		FSLeaveFightReq
		FSLeaveFightAck
		GSToFsUpdateUserFightModel
		GsToFSUserReliveReq
		FSToGsUserReliveAck
		GsToFSCheckUserReliveReq
		FsToGSCheckUserReliveAck
		FSGetFightIdReq
		FSGetFightIdAck
		User
		UserDropReq
		UserDropAck
		FSAddItemReq
		FSAddItemAck
		GsTOFsPickUpReq
		FsTOGsPickUpAck
		FsSkillUseNtf
		FsTOGsClearSkillCdNtf
		FsRandomDeliveryNtf
		GsToFsUseItemNtf
		GSTOFSCheckFightReq
		FSTOGSCheckFightAck
		GsToFsGetCheerNumReq
		FsToGsGetCheerNumAck
		GsToFsCheerReq
		FsToGsCheerAck
		GsToFsGetPotionCdReq
		FsToGsGetPotionCdAck
		GsToFsUsePotionReq
		FsToGsUsePotionAck
		GsToFsCollectionReq
		FsToGsCollectionAck
		FsToGsCollectionNtf
		GsToFsUseFitReq
		FsToGsUseFitAck
		GsToFsFitCacelReq
		FsToGsFitCacelAck
		GsToFsUpdatePetReq
		FsToGsUpdatePetAck
		WorldBossStatusNtf
		ExpStageKillMonsterNtf
		PersonFightResult
		VipBossFightResult
		TowerFightResult
		FieldBossResult
		DarkPalaceBossResult
		MiningNewFightInfoReq
		MiningNewFightInfoAck
		MiningFightResultNtf
		HangUpKillWaveNtf
		HangUpBossFightEndNtf
		FightTotalData
		GuildbonfireExpAddNtf
		PaodianGoodsAddNtf
		ShabakeFightEndNtf
		ShabakeRankScore
		LoginKeyVerifyReq
		LoginKeyVerifyAck
*/
package pbserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChallengeSendLoseRewardNtf struct {
	RoundIndex int32   `protobuf:"varint,1,opt,name=roundIndex,proto3" json:"roundIndex,omitempty"`
	LoseUers   []int32 `protobuf:"varint,2,rep,packed,name=loseUers" json:"loseUers,omitempty"`
	WinUserId  int32   `protobuf:"varint,3,opt,name=winUserId,proto3" json:"winUserId,omitempty"`
}

func (m *ChallengeSendLoseRewardNtf) Reset()         { *m = ChallengeSendLoseRewardNtf{} }
func (m *ChallengeSendLoseRewardNtf) String() string { return proto.CompactTextString(m) }
func (*ChallengeSendLoseRewardNtf) ProtoMessage()    {}
func (*ChallengeSendLoseRewardNtf) Descriptor() ([]byte, []int) {
	return fileDescriptorChallenge, []int{0}
}

func (m *ChallengeSendLoseRewardNtf) GetRoundIndex() int32 {
	if m != nil {
		return m.RoundIndex
	}
	return 0
}

func (m *ChallengeSendLoseRewardNtf) GetLoseUers() []int32 {
	if m != nil {
		return m.LoseUers
	}
	return nil
}

func (m *ChallengeSendLoseRewardNtf) GetWinUserId() int32 {
	if m != nil {
		return m.WinUserId
	}
	return 0
}

func init() {
	proto.RegisterType((*ChallengeSendLoseRewardNtf)(nil), "pbserver.ChallengeSendLoseRewardNtf")
}
func (m *ChallengeSendLoseRewardNtf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeSendLoseRewardNtf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoundIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.RoundIndex))
	}
	if len(m.LoseUers) > 0 {
		dAtA2 := make([]byte, len(m.LoseUers)*10)
		var j1 int
		for _, num1 := range m.LoseUers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.WinUserId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChallenge(dAtA, i, uint64(m.WinUserId))
	}
	return i, nil
}

func encodeVarintChallenge(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChallengeSendLoseRewardNtf) Size() (n int) {
	var l int
	_ = l
	if m.RoundIndex != 0 {
		n += 1 + sovChallenge(uint64(m.RoundIndex))
	}
	if len(m.LoseUers) > 0 {
		l = 0
		for _, e := range m.LoseUers {
			l += sovChallenge(uint64(e))
		}
		n += 1 + sovChallenge(uint64(l)) + l
	}
	if m.WinUserId != 0 {
		n += 1 + sovChallenge(uint64(m.WinUserId))
	}
	return n
}

func sovChallenge(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChallenge(x uint64) (n int) {
	return sovChallenge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChallengeSendLoseRewardNtf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeSendLoseRewardNtf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeSendLoseRewardNtf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIndex", wireType)
			}
			m.RoundIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LoseUers = append(m.LoseUers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChallenge
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChallenge
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LoseUers = append(m.LoseUers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseUers", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinUserId", wireType)
			}
			m.WinUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinUserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChallenge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChallenge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChallenge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChallenge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChallenge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChallenge
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChallenge
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChallenge(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChallenge = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChallenge   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("challenge.proto", fileDescriptorChallenge) }

var fileDescriptorChallenge = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0xce, 0x48, 0xcc,
	0xc9, 0x49, 0xcd, 0x4b, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x48, 0x2a,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x52, 0x2a, 0xe3, 0x92, 0x72, 0x86, 0x49, 0x06, 0xa7, 0xe6, 0xa5,
	0xf8, 0xe4, 0x17, 0xa7, 0x06, 0xa5, 0x96, 0x27, 0x16, 0xa5, 0xf8, 0x95, 0xa4, 0x09, 0xc9, 0x71,
	0x71, 0x15, 0xe5, 0x97, 0xe6, 0xa5, 0x78, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0xb0, 0x06, 0x21, 0x89, 0x08, 0x49, 0x71, 0x71, 0xe4, 0xe4, 0x17, 0xa7, 0x86, 0xa6, 0x16, 0x15,
	0x4b, 0x30, 0x29, 0x30, 0x6b, 0xb0, 0x06, 0xc1, 0xf9, 0x42, 0x32, 0x5c, 0x9c, 0xe5, 0x99, 0x79,
	0xa1, 0xc5, 0xa9, 0x45, 0x9e, 0x29, 0x12, 0xcc, 0x60, 0xad, 0x08, 0x01, 0x27, 0x81, 0x13, 0x8f,
	0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24,
	0x36, 0xb0, 0xd3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x37, 0x18, 0xf8, 0xad, 0x00,
	0x00, 0x00,
}
