// This is generated by git@gitlab.hd.com:yulong/genproto.git
// Do not modify here.

package {packageName}
import (
    "reflect"
)

var msgPrototypes = make(map[uint16]reflect.Type)
var msgNames = make(map[uint16]string)
var msgLogLv = make(map[int]int)

func init() {{@iter obj=idMap}
    msgPrototypes[Cmd{$value}Id] = reflect.TypeOf((*{$value})(nil)).Elem(){/iter}
    {@iter obj=idMap}
    msgNames[Cmd{$value}Id] = "{$value}"{/iter}
	{@iter obj=logLvMap}
    msgLogLv[Cmd{$key}Id] = {$value}{/iter}
}

func GetMsgPrototype(key uint16) reflect.Type {
    return msgPrototypes[key]
}

func GetMsgName(key uint16) string {
	return msgNames[key]
}

func GetMsgLogLv(key int) int {
	return msgLogLv[key]
}

const (
    CmdUnknownId uint16 = 0{@iter obj=idMap}
    Cmd{$value}Id = {$key}{/iter}
)

func GetCmdIdFromType(i interface{}) uint16 {
	switch i.(type) {{@iter obj=idMap}
	case *{$value}:
	     return {$key}{/iter}
	default:
		return 0
	}
}
